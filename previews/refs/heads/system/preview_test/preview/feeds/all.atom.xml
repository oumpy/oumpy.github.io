<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>大阪大学医学部 Python会 (テスト用ページ)</title><link href="/previews/refs/heads/system/preview_test/" rel="alternate"></link><link href="/previews/refs/heads/system/preview_test/feeds/all.atom.xml" rel="self"></link><id>/previews/refs/heads/system/preview_test/</id><updated>2020-03-29T00:00:00+09:00</updated><subtitle>Now is better than never.</subtitle><entry><title>技術ブログをWebサイトに統合しました</title><link href="/previews/refs/heads/system/preview_test/news/2020/03/website_integration.html" rel="alternate"></link><published>2020-03-29T00:00:00+09:00</published><updated>2020-03-29T00:00:00+09:00</updated><author><name>Python会</name></author><id>tag:None,2020-03-29:/previews/refs/heads/system/preview_test/news/2020/03/website_integration.html</id><content type="html">&lt;p&gt;技術ブログは一時的にはてなブログで開設していましたが、本日、GitHub上の本サイトに統合しました。&lt;/p&gt;
&lt;p&gt;みんなでgitを使ってブログ記事をどんどん掲載していけるように頑張ります！&lt;/p&gt;</content><category term="News"></category><category term="News"></category></entry><entry><title>Webサイトをリニューアルしました！</title><link href="/previews/refs/heads/system/preview_test/news/2020/03/website_renewal.html" rel="alternate"></link><published>2020-03-24T00:00:00+09:00</published><updated>2020-03-29T00:00:00+09:00</updated><author><name>Python会</name></author><id>tag:None,2020-03-24:/previews/refs/heads/system/preview_test/news/2020/03/website_renewal.html</id><content type="html">&lt;p&gt;Python会の&lt;a href="https://oumpy.github.io"&gt;Webサイト&lt;/a&gt;と技術ブログがリニューアルしました。&lt;/p&gt;
&lt;p&gt;(2020/3/29 追記)&lt;br&gt;
技術ブログはWebサイトに統合しました。  &lt;/p&gt;
&lt;p&gt;参照：&lt;a href="/previews/refs/heads/system/preview_test/news/2020/03/website_integration.html"&gt;技術ブログをWebサイトに統合しました&lt;/a&gt;&lt;/p&gt;</content><category term="News"></category><category term="News"></category></entry><entry><title>シェルコマンドに触れてみよう</title><link href="/previews/refs/heads/system/preview_test/blog/2020/02/shellscript_tutorial.html" rel="alternate"></link><published>2020-02-26T00:00:00+09:00</published><updated>2020-02-26T00:00:00+09:00</updated><author><name>山田</name></author><id>tag:None,2020-02-26:/previews/refs/heads/system/preview_test/blog/2020/02/shellscript_tutorial.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;シェルって？　コマンドってなに？&lt;/h2&gt;
&lt;p&gt;詳しくはググるなり下の記事等を見てもらえばよいのですが、  簡単にまとめると
- コマンド：マウスやトラックパッドを用いて操作するのではなく、キーボードでコンピュータに命令を与えるもの
- シェル：命令をコンピュータに伝えるプログラムのこと  &lt;/p&gt;
&lt;p&gt;つまるところ、Pythonに限らず&lt;strong&gt;プログラミングをやりたければ必須の内容&lt;/strong&gt;というわけです！&lt;br&gt;
これができないと、極論プログラミングを始めることもできないかもしれません。  （installすらできないかも...）&lt;br&gt;
ですが、複雑なものではないので、下を読んでさくっと学んでしまいましょう！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;コマンドについてもっと知りたい方へ  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/lrf141/items/6c01d2f7afff79cd7286"&gt;Linux初心者のシェルスクリプト入門 - Qiita&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://eng-entrance.com/linux-what-is-command"&gt;【初心者用】Linuxのコマンドとは？とコマンドラインの表示方法&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sejuku.net/blog/5465"&gt;ブクマ必至！Linuxコマンド一覧表【全33種】 | 侍エンジニア塾ブログ（Samurai Blog） - プログラミング入門者向けサイト&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;シェルコマンドを学ぶ上でのポイント&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ムリにおぼえようとしない&lt;/li&gt;
&lt;li&gt;日頃使っていたら自然と覚えていく&lt;/li&gt;
&lt;li&gt;コマンドの名前は英語の省略かも？&lt;/li&gt;
&lt;li&gt;忘れたら、すぐググればよし&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;シェルコマンドってどういう風に書くの？&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt;
$ ls
$ emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;などのように、黒い画面（terminal、cmd）上にて、一つ一つの処理ごとに命令を書いてEnterキーで実行していきます。  &lt;/p&gt;
&lt;h2&gt;ランク別よく使うシェルコマンド&lt;/h2&gt;
&lt;p&gt;筆者の独断と偏見による、日頃よく使うコマンドを3段階にわけてまとめてみました。&lt;br&gt;
詳しい使い方は各自調べてもらいたいので、ここでは「何ができるか」だけ簡単に書いておきます。(&lt;strong&gt;自分で調べていく力&lt;/strong&gt;がプログラミングには大事ですよ！)&lt;br&gt;
ランク1、2あたりはググらずに使えるようになるといいと思います。&lt;br&gt;
もちろんこの他にも様々なコマンドがありますが、最初の1歩として学んでみて下さい。&lt;/p&gt;
&lt;h3&gt;ランク1&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;何ができるか&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cd&lt;/td&gt;
&lt;td&gt;ディレクトリ移動&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;td&gt;カレントディレクトリを表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ls&lt;/td&gt;
&lt;td&gt;フォルダの内容をリスト形式で表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ファイル操作編&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mv&lt;/td&gt;
&lt;td&gt;ファイルを移動&lt;br&gt;ファイルの名前を編集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cp&lt;/td&gt;
&lt;td&gt;ファイルやフォルダをコピーする&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rm&lt;/td&gt;
&lt;td&gt;ファイルやフォルダを削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdir&lt;/td&gt;
&lt;td&gt;フォルダを作成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rmdir&lt;/td&gt;
&lt;td&gt;フォルダを削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;less&lt;/td&gt;
&lt;td&gt;テキストファイルを閲覧&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;more&lt;/td&gt;
&lt;td&gt;ファイルの中身を表示&lt;br&gt;（lessがおすすめ）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cat&lt;/td&gt;
&lt;td&gt;ファイルの内容を表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grep&lt;/td&gt;
&lt;td&gt;指定した文字列がテキスト内に存在した場合その行を抽出&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ランク2&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;何ができるか&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;chmod&lt;/td&gt;
&lt;td&gt;ファイルやフォルダのアクセス権限を変更&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;touch&lt;/td&gt;
&lt;td&gt;空のファイルを作成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emacs&lt;br&gt;vim&lt;br&gt;など&lt;/td&gt;
&lt;td&gt;（それぞれのエディタで）ファイルを新規作成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;echo&lt;/td&gt;
&lt;td&gt;画面に文字列や数値、変数を表示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;open&lt;/td&gt;
&lt;td&gt;Finderを開く&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;ランク3&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;コマンド&lt;/th&gt;
&lt;th&gt;何ができるか&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ps&lt;/td&gt;
&lt;td&gt;現在動作しているプロセスを表示する&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssh&lt;/td&gt;
&lt;td&gt;リモートマシンにSSHでログイン&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zip&lt;br&gt;tar&lt;br&gt;gzip/gunzip&lt;/td&gt;
&lt;td&gt;ファイル・ディレクトリの解凍、圧縮&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;何度も使ってみておぼえていきましょう！&lt;/p&gt;
&lt;h2&gt;おまけ&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;シェル芸&lt;br&gt;
気になる方は下の記事でも読んでみて下さい。  &lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/t_nakayama0714/items/bfe4852e0535858ee662"&gt;【シェル芸人への道】シェル芸人の第一歩 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://qiita.com/_-_-_-_-_/items/214d537aae2c1488692c"&gt;【危険シェル芸】禁じられた闇の魔術とその防衛術💥 - Qiita&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clipyなどのクリップボードを活用する&lt;br&gt;
よく使うコマンドを登録しておくと便利！&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;コマンドの次へ&lt;/h2&gt;
&lt;p&gt;上の文にもいくつかでてきているのですが、コマンドに入門した次に勉強するおすすめとして、以下の単語を調べてみましょう。&lt;br&gt;
それぞれ今度何度も目にする単語なので、早めに知っておいて損はないと思います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;パスとは？&lt;br&gt;
キーワード：相対/絶対パス&lt;/li&gt;
&lt;li&gt;エディタとは？&lt;br&gt;
emacs/vim/atom/vscode...&lt;/li&gt;
&lt;/ol&gt;</content><category term="Blog"></category><category term="Shell script"></category></entry><entry><title>バイオインフォマティクス技術者認定試験2019 解答速報？</title><link href="/previews/refs/heads/system/preview_test/blog/2019/12/bioinfoexam2019_answer.html" rel="alternate"></link><published>2019-12-11T00:00:00+09:00</published><updated>2019-12-23T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2019-12-11:/previews/refs/heads/system/preview_test/blog/2019/12/bioinfoexam2019_answer.html</id><summary type="html">&lt;p&gt;先日受験したバイオインフォマティクス認定試験をあらためて復習して、ついでに解答速報（全然速くない）と備忘録程度の解説を書きました。&lt;/p&gt;</summary><content type="html">&lt;p&gt;先日受験したバイオインフォマティクス認定試験をあらためて復習して、ついでに解答速報（全然速くない）と備忘録程度の解説を書きました。&lt;/p&gt;
&lt;h2&gt;模範解答 (?)&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;6&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;8&lt;/th&gt;
&lt;th&gt;9&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;20&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;40&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;50&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;60&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;70&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;em&gt;4&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(問題番号 = 縦列番号 + 横列番号)&lt;/p&gt;
&lt;p&gt;(2019.12.23 公式解答と全問一致でした。ただ問74は取消になりませんでした。)&lt;/p&gt;
&lt;h2&gt;解説&lt;/h2&gt;
&lt;h3&gt;バイオ（問1-20）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;問1：答4：はい&lt;/li&gt;
&lt;li&gt;問2：答4：核小体で合成されるのはrRNA。なおさらにリボソームの組み立ても行われる。&lt;/li&gt;
&lt;li&gt;問3：答3：G1→S→G2なのでG2で倍になっている。&lt;/li&gt;
&lt;li&gt;問4：答3：mRNAにポリAが付加されるのは真核生物。
  （注：教科書的には多分そうなのだが、原核生物やミトコンドリアのmRNAでも大抵はポリA鎖が見られるらしい。ただ持たない例もあり、二次的に失われたと考えられている。一方、真核生物でそのような例は知られていない。いずれにせよ一般に正しいとまでは言えないという意味で、選択肢3が正解となる。消去法的に解けるとはいえ、実は難問。）&lt;/li&gt;
&lt;li&gt;問5：答2：リボソームの小サブユニットは1種、大サブユニットは真核で3種、原核（真正および古細菌）で2種のrRNAを含む。よって合計4種ないし3種である。&lt;/li&gt;
&lt;li&gt;問6：答2：ジスルフィド結合でなくリン酸エステル結合。&lt;/li&gt;
&lt;li&gt;問7：答4：引っ掛けに近いが、グリシンの側鎖はHのみである。&lt;/li&gt;
&lt;li&gt;問8：答1：1回膜貫通で普通チャネルはできない。&lt;/li&gt;
&lt;li&gt;問9：答2：ユビキチンはタンパク質なので糖鎖修飾ではない。&lt;/li&gt;
&lt;li&gt;問10：答2：これもちょっとした引っ掛け。解糖系で酸素は消費しない。&lt;/li&gt;
&lt;li&gt;問11：答2：はい&lt;/li&gt;
&lt;li&gt;問12：答1：はい&lt;/li&gt;
&lt;li&gt;問13：答3：ミトコンドリアは母親由来である。&lt;/li&gt;
&lt;li&gt;問14：答3：グリセリンはアミノ酸ですらない。Gはグリシン。&lt;/li&gt;
&lt;li&gt;問15：答4：プロモータ領域にあるGC含量の高い領域はGCボックスという。LINEはレトロトランスポゾンの一種。問62でも登場。&lt;/li&gt;
&lt;li&gt;問16：答2：PCRで変化させるのは溶液組成ではなく温度である。&lt;/li&gt;
&lt;li&gt;問17：答4：メタボローム解析とはその名の通り、低分子化合物を主とする代謝産物の網羅的解析である。DNAの配列決定とは無関係。&lt;/li&gt;
&lt;li&gt;問18：答3：はい&lt;/li&gt;
&lt;li&gt;問19：答1：2,3,4は正しいので消去法で決めることができる。&lt;/li&gt;
&lt;li&gt;問20：答3：はい&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;インフォマティクス（問21-40）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;問21：答3：偶奇を決める演算を問われている。該当するのはXORしかない。&lt;/li&gt;
&lt;li&gt;問22：答4：GPGPUの省略前名称を与えてくれており、これが説明と矛盾することは知らなくてもわかる。GPGPUの本当の意味は名前の通りだが、特に現在のカジュアルな深層学習には必須の技術である（そのうち専用プロセッサが主流となれば死語になるかもしれない）。&lt;/li&gt;
&lt;li&gt;問23：答2：はい&lt;/li&gt;
&lt;li&gt;問24：答2：はい&lt;/li&gt;
&lt;li&gt;問25：答4：はい&lt;/li&gt;
&lt;li&gt;問26：答1：while中の条件&lt;code&gt;x&amp;lt;A[j]&lt;/code&gt;が満たされることは決してない。よって&lt;code&gt;i&lt;/code&gt;のループが&lt;code&gt;2&lt;/code&gt;から&lt;code&gt;n&lt;/code&gt;まで一巡するだけで終了するので、計算量は&lt;span class="math"&gt;\(\Theta(n)\)&lt;/span&gt;である。&lt;/li&gt;
&lt;li&gt;問27：答2：マージソートを知らなくても、&lt;span class="math"&gt;\(f(n) = n + 2f(n/2)\)&lt;/span&gt; をただ解くだけでよい。&lt;span class="math"&gt;\(f(n)=n\log_2 n\)&lt;/span&gt; はこの厳密解となるので、計算量オーダーは &lt;span class="math"&gt;\(\Theta(n\log n)\)&lt;/span&gt; である。&lt;/li&gt;
&lt;li&gt;問28：答1：20n個の中の上位n個に入る確率は1/20であり、n依存性は消滅する。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;問29：答4：順に辿ると、E &amp;lt; F &amp;lt; G &amp;lt; H になることがわかる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;問30：答3：&lt;span class="math"&gt;\({}_5C_{2}=10\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;問31：答1：(i, j)に達する経路は(i-1, j)からと(i, j-1)からの2パターン。AtCoderのD問題以上でも頻出。&lt;/li&gt;
&lt;li&gt;問32：答1：SQLはRDB用の言語。&lt;/li&gt;
&lt;li&gt;問33：答1：論理演算を注意深く考えれば良い。&lt;/li&gt;
&lt;li&gt;問34：答2：はい&lt;/li&gt;
&lt;li&gt;問35：答1：-1から2までfを積分すればよいので、原始関数を使うと選択肢1が自動的に出る。&lt;/li&gt;
&lt;li&gt;問36：答2：どちらも負の相関があるが、x-yグラフの方がばらついている、つまり相関係数の絶対値が小さい。回帰直線の傾きは関係ない（引っ掛けである）。&lt;/li&gt;
&lt;li&gt;問37：答3：勾配ベクトルは軌跡に接し、また等高線に直交する。向きが紛らわしいが、上り方向である。学習時の変分ベクトルは符号を変えて下り方向。&lt;/li&gt;
&lt;li&gt;問38：答4：はい&lt;/li&gt;
&lt;li&gt;問39：答1：隠れマルコフモデルがクラスタリングに使えるかわからなくても（実際僕は知らない）、2,3,4は明らかにクラスタリングに使えるアルゴリズムである。&lt;/li&gt;
&lt;li&gt;問40：答4：訓練用とテスト用が逆である。訓練用のデータはなるべく多く確保したい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;バイオインフォマティクス（問41-80）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;問41：答3：菌種によらず共通に必要な機能は多く存在する。それらを1菌種にまとめるようなことをしてはいけない。&lt;/li&gt;
&lt;li&gt;問42：答4：はい&lt;/li&gt;
&lt;li&gt;問43：答4：書いているかどうかチェックするだけ。選択肢4のようなことは書いていない。&lt;/li&gt;
&lt;li&gt;問44：答3：4塩基分前後にずれたところ（右下と左上）にも直線状プロットがなければならない。&lt;/li&gt;
&lt;li&gt;問45：答2：はい&lt;/li&gt;
&lt;li&gt;問46：答2：四角が表すのは代謝反応を触媒する酵素である。&lt;/li&gt;
&lt;li&gt;問47：答3：はい&lt;/li&gt;
&lt;li&gt;問48：答1：一般に次世代シークエンサは繰り返し配列を苦手とする。たとえ反復配列から多くのRNAが転写されていても、そこから「ゲノム上の反復配列」を復元するのは困難と思われる。&lt;/li&gt;
&lt;li&gt;問49：答4：シュードノットとは、2度ヘアピンで折り返して元と同じ向きに進むような構造。そもそも2塩基だけで作れるようなものではない。&lt;/li&gt;
&lt;li&gt;問50：答1：PAMスコア行列の計算は、まず近縁なタンパク質間の置換回数から変異確率行列（=マルコフ過程遷移行列）を求める。1/100の割合で置換=1PAM。これを行列積で&lt;span class="math"&gt;\(n\)&lt;/span&gt;乗した遷移行列から、対数オッズスコアを計算したものがPAM&lt;span class="math"&gt;\(n\)&lt;/span&gt;である。「様々なアミノ酸の物理化学的指標を組み合わせて評価」したものではない。&lt;/li&gt;
&lt;li&gt;問51：答2：P(G)は縦および横に足し算するだけ。結果は一致する（一致しなければおかしい）。次にP(T|G)は0.05/0.2=0.25となる。&lt;/li&gt;
&lt;li&gt;問52：答3：1文字目Gの出現確率がP(G)=0.2、P(T|G)=0.25、P(C|T)=0.06/0.3=0.2なので、掛け合わせれば0.01が出る。&lt;/li&gt;
&lt;li&gt;問53：答3：疎水性アミノ酸は5番目のI（イソロイシン）と10番目のV（バリン）なので、それらが内部に埋もれるものを探して選べばよい。&lt;/li&gt;
&lt;li&gt;問54：答1：配列同士を比較すると、残基2と11、3と10のペアがそれぞれセットで変異していることがわかる。よってこれら同士が隣接するものを探して選べばよい。&lt;/li&gt;
&lt;li&gt;問55：答3：意味の異なる文字や数字が隣接していても、ルールが明確であればプログラムによる判読は容易である。&lt;/li&gt;
&lt;li&gt;問56：答4：はい（見ればわかる）&lt;/li&gt;
&lt;li&gt;問57：答4：図中にMainly Beta-Beta Barrelと書かれている。&lt;/li&gt;
&lt;li&gt;問58：答4：一概にそのようなことは言えない。一般に立体構造は一次配列よりもよく保存される傾向があり、遠い昔に共通起源を持つタンパク質が分化したものである可能性もよく検討する必要がある。&lt;/li&gt;
&lt;li&gt;問59：答2：1,3,4は少なくとも正しいと思われるので、消去法で。&lt;/li&gt;
&lt;li&gt;問60：答3：はい&lt;/li&gt;
&lt;li&gt;問61：答1：超優性だけでは高々ヘテロ結合になるだけであり、1箇所に何種類もの変異を保持することはできない。&lt;/li&gt;
&lt;li&gt;問62：答3：AluはSINEの一種で、レトロトランスポゾンでありながら有効な逆転写酵素を持たない。&lt;/li&gt;
&lt;li&gt;問63：答2：機能的制約から、特異な構造を持つタンパク質があってもおかしくない。&lt;/li&gt;
&lt;li&gt;問64：答1：連鎖不平衡と遺伝的連鎖は違う場合がある。&lt;/li&gt;
&lt;li&gt;問65：答1：はい&lt;/li&gt;
&lt;li&gt;問66：答3：新しい枝を追加する場所の選択肢が7通りあるので、15x7=105である。一般には(2n-5)!!となる。&lt;/li&gt;
&lt;li&gt;問67：答4：変異が有利に働く場合なので、中立説での説明とは異なる。&lt;/li&gt;
&lt;li&gt;問68：答4：はい（何もかも間違い）&lt;/li&gt;
&lt;li&gt;問69：答2：はい&lt;/li&gt;
&lt;li&gt;問70：答1：自身を活性化するAを抑えるので、「増えることによりさらに増える」ことはない。&lt;/li&gt;
&lt;li&gt;問71：答1：はい&lt;/li&gt;
&lt;li&gt;問72：答2：通常、DNAメチル化は遺伝子発現の抑制に働く。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;問73：答4：終止コドンはTAA、TAGと、TATでなくTGAである。正確に記憶していなくても、3つとも最初の2文字が共通ということはないこと、さらに2文字目と3文字目は両方プリンだったことなど、断片的な情報からも答えられるように作られた問題。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;問74：答4？：想定解答はおそらく4と思われるが、それも実は正しい模様（質量分析の情報が構造決定のために用いられる）。すると全選択肢が正しく、正答なしとなる。&lt;em&gt;全員正解扱いの可能性あり。&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;問75：答2：菌の割合を求めて細菌数に掛ければ各菌ごとの菌密度が求められ、菌Xの密度は試料Aで&lt;span class="math"&gt;\(1.0\times 10^5\)&lt;/span&gt; 、試料Bで &lt;span class="math"&gt;\(0.75\times 10^5\)&lt;/span&gt; となる。&lt;/li&gt;
&lt;li&gt;問76：答3：知らなくても、エントロピーという言葉がShannonのヒントになっている。&lt;/li&gt;
&lt;li&gt;問77：答4：タンパク質間相互作用があってもそれが元の遺伝子にフィードバックされるとは限らないため、一般に完全グラフになるというのは誤り。&lt;/li&gt;
&lt;li&gt;問78：答4：タンパク質とmRNAの量比を問題にしているので、直接は無関係な事象である。&lt;/li&gt;
&lt;li&gt;問79：答3：ポリクローナル抗体での解析で有意差が無かったのだから、これはおかしい。&lt;/li&gt;
&lt;li&gt;問80：答3：ベイジアンネットワーク推定ではループ構造が現れることはない。&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>機械学習のための最新GPU比較</title><link href="/previews/refs/heads/system/preview_test/blog/2019/10/GPUs_for_ML.html" rel="alternate"></link><published>2019-10-07T00:00:00+09:00</published><updated>2019-10-07T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2019-10-07:/previews/refs/heads/system/preview_test/blog/2019/10/GPUs_for_ML.html</id><summary type="html">&lt;p&gt;某所でGPU調達の必要があって、いまどきの事情を調べました。ゲームのことは知りません。&lt;/p&gt;</summary><content type="html">&lt;p&gt;某所でGPU調達の必要があって、いまどきの事情を調べました。
ゲームのことは知りません。&lt;/p&gt;
&lt;h2&gt;主要GPU一覧&lt;/h2&gt;
&lt;p&gt;NVidia製Volta/Turing世代ハイエンドデスクトップ／ワークステーション用の主要GPUラインアップ。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;コア&lt;/th&gt;
&lt;th&gt;VRAM&lt;/th&gt;
&lt;th&gt;最大精度&lt;/th&gt;
&lt;th&gt;TDP&lt;/th&gt;
&lt;th&gt;放熱&lt;/th&gt;
&lt;th&gt;価格(税込)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GeForce RTX 2080Ti&lt;/td&gt;
&lt;td&gt;Turing (TU102)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;11GB&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;単精度&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;250W&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;外排気&lt;/td&gt;
&lt;td&gt;14万円〜&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Titan RTX&lt;/td&gt;
&lt;td&gt;Turing (TU102)&lt;/td&gt;
&lt;td&gt;24GB&lt;/td&gt;
&lt;td&gt;単精度&lt;/td&gt;
&lt;td&gt;&lt;em&gt;280W&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;内排気&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;27.6万円〜※&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quadro RTX 6000&lt;/td&gt;
&lt;td&gt;Turing (TU102)&lt;/td&gt;
&lt;td&gt;24GB&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;倍精度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;260W&lt;/td&gt;
&lt;td&gt;外排気&lt;/td&gt;
&lt;td&gt;&lt;em&gt;41.5万円〜&lt;/em&gt;※&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Quadro RTX 8000&lt;/td&gt;
&lt;td&gt;Turing (TU102)&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;48GB&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;倍精度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;260W&lt;/td&gt;
&lt;td&gt;外排気&lt;/td&gt;
&lt;td&gt;60万円〜※&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Titan V&lt;/td&gt;
&lt;td&gt;Volta (V102?)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;12GB&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;倍精度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;250W&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;外排気&lt;/td&gt;
&lt;td&gt;&lt;em&gt;40万円〜&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tesla V100 32GB (参考)&lt;/td&gt;
&lt;td&gt;Volta (V100)&lt;/td&gt;
&lt;td&gt;32GB&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;倍精度&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;250W&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;外排気&lt;/td&gt;
&lt;td&gt;&lt;em&gt;99万円〜&lt;/em&gt;※&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;（&lt;strong&gt;すごい&lt;/strong&gt;。&lt;em&gt;いまいち&lt;/em&gt;。※はアカデミック価格。価格は2019年10月初頭調べ。）&lt;/p&gt;
&lt;h2&gt;ポイント&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;目を引くのはTuring世代ワークステーション用GPUの&lt;strong&gt;VRAM大容量化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Titan RTXでも24GB、Quadro RTX 8000に至っては&lt;strong&gt;泣く子も黙る48GB&lt;/strong&gt;。
サーバ用のTesla V100も凌ぐ。&lt;/li&gt;
&lt;li&gt;Titan RTXのみ内排気のため、多数枚の搭載には水冷システムが必要。&lt;/li&gt;
&lt;li&gt;Quadro 6000がやや割高なことを除けば、Turingコア製品の&lt;strong&gt;VRAM容量あたりの価格は概ね一定&lt;/strong&gt;なのが面白い。&lt;/li&gt;
&lt;li&gt;大きなネットワークを学習したい時など、GPU1基のメモリ容量はしばしば演算性能以上に重要。
例えばGPU予算が60万の場合、2080Tiを4枚かTitan RTXを2枚かQuadro 8000を1枚か、は用途次第。&lt;/li&gt;
&lt;li&gt;どれもTensorCore搭載。
FP16を使うように調整してやらないと本来の性能は出ない。&lt;/li&gt;
&lt;li&gt;倍精度演算機能は、実際のところ物理シミュレーションでもしない限り、あっても使わないので関係ない。遅いし。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;演算性能を妥協すれば、大容量VRAMの上位GPUにも実は手が出しやすくなっています。
用途に合わせて選びましょう。
選べる余地があるのはいいことですね。&lt;/p&gt;
&lt;p&gt;おしまい。&lt;/p&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>AtCoder Beginners Selection 雑感</title><link href="/previews/refs/heads/system/preview_test/blog/2019/06/atcoder.html" rel="alternate"></link><published>2019-06-24T00:00:00+09:00</published><updated>2019-06-24T00:00:00+09:00</updated><author><name>加藤</name></author><id>tag:None,2019-06-24:/previews/refs/heads/system/preview_test/blog/2019/06/atcoder.html</id><summary type="html"></summary><content type="html">&lt;p&gt;プログラミング初心者の加藤です。勉強会の時に、とりあえずやってみたらいいよと言われたので、よく分からないままやってみました。その概要と雑感です。&lt;/p&gt;
&lt;h2&gt;AtCoderとは？&lt;/h2&gt;
&lt;p&gt;まず始めにAtCoderの説明から。AtCoderとは、オンライン上で競技プログラミングのコンテストを提供しているサイトのことです(&lt;a href="https://atcoder.jp/?lang=ja"&gt;https://atcoder.jp/?lang=ja&lt;/a&gt;)。  &lt;/p&gt;
&lt;p&gt;定期的にコンテストを主催していたり、企業から(広告や人材獲得戦略の一環として) コンテストが開かれることもあります。コンテストに参加する以外にも、コンテストで使用された問題を解くこともでき、初心者でも、「プログラミング勉強したいけど本をなぞるだけじゃつまらない！」っていう僕みたいなわがままな人にはちょうどいいモチベーションアッパーになると思います。&lt;/p&gt;
&lt;h2&gt;AtCoder Beginners Selectionを解こう！&lt;/h2&gt;
&lt;p&gt;チュートリアルを読むと、「何をすれば良いか分からない人は、&lt;a href="https://atcoder.jp/contests/abs"&gt;AtCoder Beginners Selection&lt;/a&gt;から、まずいくつかの問題を解いてみましょう。」と書いてあります。ページに飛んでみると、さらに、「このコンテストは、『AtCoderに登録したけど何をしていいか分からない・・・！』という人に向けて作られた初心者向け問題集です。」とも書いてます。&lt;/p&gt;
&lt;p&gt;何も分かってない子羊ちゃんは素直に優しい言葉に付いて行くのでした。 以下いくつかの問題をピックアップしてみます。&lt;/p&gt;
&lt;h3&gt;問題０：はじめてのあっとこーだー&lt;/h3&gt;
&lt;p&gt;わざわざ平仮名で表記しちゃってまあどんな接待をしてくれるのやら...。問題文を読みます。&lt;/p&gt;
&lt;hr&gt;

&lt;h4&gt;問題文&lt;/h4&gt;
&lt;p&gt;高橋君はデータの加工が行いたいです。
整数 &lt;span class="math"&gt;\(a,b,c\)&lt;/span&gt;と、文字列 &lt;span class="math"&gt;\(s\)&lt;/span&gt; が与えられます。整数 &lt;span class="math"&gt;\(a+b+c\)&lt;/span&gt; の計算結果と、文字列 &lt;span class="math"&gt;\(s\)&lt;/span&gt; を並べて表示しなさい。&lt;/p&gt;
&lt;h4&gt;制約&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(1\leq a, b, c \leq 1,000\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(1\leq | s | \leq 100\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;入力&lt;/h4&gt;
&lt;p&gt;入力は次の形式で与えられる。
&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
&amp;amp;a\\
&amp;amp;b\quad c\\
&amp;amp;s
\end{align*}
$$&lt;/div&gt;
&lt;h4&gt;出力&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(a+b+c\)&lt;/span&gt;と&lt;span class="math"&gt;\(s\)&lt;/span&gt;を空白区切りで1行に出力せよ。&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;ん？入力ってなんだ？(競プロ初心者並感)
いや入力はinputを使えばいい、でも「b c」はどうやって入力するんだ？(Python初心者並感)&lt;/p&gt;
&lt;p&gt;そもそも複数行の入力ってどうするんだ？(プログラミング初心者並感)&lt;/p&gt;
&lt;p&gt;......(思考停止)&lt;/p&gt;
&lt;p&gt;数問解いた後の話ですが、気付きました。 ああこれが競技プログラミングなのか。 あれです、初心者あるあるの「思ってたのと違う」ってやつです。今回のは悪い意味ではないのですが。言語つながりで、例えば英語の問題なら、文法や読解、和文英訳など受験でさんざんやった形式のものが思い浮かびます。てっきりそういう類いの問題が出るのかなと思っていたら、完全に実践形式の問題で驚きました。英語始めたばっかりで、いきなり英会話しようと言われたら誰だってそうなるでしょう。&lt;/p&gt;
&lt;p&gt;このように競技プログラミングでは答えが決まってはなく、かなりのバリエーションがあり、独自に考えたプログラムが答えになり得るというのが面白みの一つですね。また、同じ方針でも表記の仕方がたくさんあって、まるで方言のようです。&lt;/p&gt;
&lt;p&gt;まとめっぽくなりましたが問題に戻ります。考えても分かる訳なさそうなので、この問題にだけついている解答例を見ます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="c1"&gt;# 整数の入力&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# スペース区切りの整数の入力&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;# 文字列の入力&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# 出力&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いまさらですが言語はPython3です。 なるほど、入力が複数行に分かれているのは文字列にエンターが含まれているからなのか、input１回だけで全て読み込めるのではないのだな。行が分かれているというのは本質的ではなく、入力をそのまま表示した結果なのか。いつものインタプリタと同じだ。というのがこの問題で一番印象に残った事です。&lt;/p&gt;
&lt;p&gt;map とかフォーマットとか、多分見るのが２ヶ月ぶりとかで、ああそういえばそんなのあったな状態です。&lt;/p&gt;
&lt;h3&gt;問題４：Coins&lt;/h3&gt;
&lt;p&gt;コンピューターっぽくて印象的な問題です。よくみる整数問題ですね。これは簡単に解けると思いきや...？こういう問題は受験数学的にはパパッと場合分けが浮かびますが、その条件分けを実装するのは面倒です。そう、受験問題では入力が１つだけですが、競技プログラミングでは複数の入力がなされるため、全ての場合分けに対応しないといけません。できないことはないですが、正直言ってかなり面倒です。&lt;/p&gt;
&lt;hr&gt;

&lt;h4&gt;問題文&lt;/h4&gt;
&lt;p&gt;あなたは、500円玉を&lt;span class="math"&gt;\(A\)&lt;/span&gt;枚、100円玉を&lt;span class="math"&gt;\(B\)&lt;/span&gt;枚、50円玉を&lt;span class="math"&gt;\(C\)&lt;/span&gt;枚持っています。これらの硬貨の中から何枚かを選び、合計金額をちょうど&lt;span class="math"&gt;\(X\)&lt;/span&gt;円にする方法は何通りありますか。
同じ種類の硬貨同士は区別できません。２通りの硬貨の選び方は、ある種類の硬貨についてその硬貨を選ぶ枚数が異なるとき区別されます。&lt;/p&gt;
&lt;h4&gt;制約&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(0 \leq A, B, C \leq 50\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(A+B+C \geq 1\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(50 \leq X \leq 20,000\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(A,B,C\)&lt;/span&gt; は整数である&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(X\)&lt;/span&gt;は50の倍数である&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;入力&lt;/h4&gt;
&lt;p&gt;入力は以下の形式で標準入力から与えられる。
&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
　&amp;amp;A\\
　&amp;amp;B\\
　&amp;amp;C\\
　&amp;amp;X
\end{align*}
$$&lt;/div&gt;
&lt;h4&gt;出力&lt;/h4&gt;
&lt;p&gt;硬貨を選ぶ方法の個数を出力せよ。
&lt;hr&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;a href="http://delta114514.hatenablog.jp/entry/2018/03/15/014555"&gt;http://delta114514.hatenablog.jp/entry/2018/03/15/014555&lt;/a&gt; より引用)&lt;/p&gt;
&lt;p&gt;しばらく場合分けを考えていましたが、ギブアップして答えを検索。ABSは有名らしく色んな人が色んな言語で解答をあげています。
このコードはつまるところ、総当たりをして条件を満たすものをカウントしてるんですね。なるほど！ヒトが計算するならこんな面倒なことはしないけれどコンピューターならできる。はっとしました。&lt;/p&gt;
&lt;h3&gt;問題７：Kagami Mochi&lt;/h3&gt;
&lt;hr&gt;

&lt;h4&gt;問題文&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(X\)&lt;/span&gt;段重ねの鏡餅(&lt;span class="math"&gt;\(X\geq 1\)&lt;/span&gt;) とは&lt;span class="math"&gt;\(X\)&lt;/span&gt;枚の円形の餅を縦に積み重ねたものであって、どの餅もその真下の餅より直径が小さい（一番下の餅を除く）もののことです。
例えば、直径10、8、6センチメートルの餅をこの順に下から積み重ねると3段重ねの鏡餅になり、
餅を一枚だけ置くと1段重ねの鏡餅になります。
ダックスフンドのルンルンは&lt;span class="math"&gt;\(N\)&lt;/span&gt;枚の円形の餅を持っていて、そのうち&lt;span class="math"&gt;\(i\)&lt;/span&gt; 枚目の餅の直径は&lt;span class="math"&gt;\(d_i\)&lt;/span&gt;センチメートルです。これらの餅のうち一部または全部を使って鏡餅を作るとき、
最大で何段重ねの鏡餅を作ることができるでしょうか。&lt;/p&gt;
&lt;h4&gt;制約&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(1 \leq N \leq 100\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(1 \leq d_i \leq 100\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;入力値は全て整数である。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;入力&lt;/h4&gt;
&lt;p&gt;入力は以下の形式で標準入力から与えられる。
&lt;/p&gt;
&lt;div class="math"&gt;$$
\begin{align*}
&amp;amp;N\\
&amp;amp;d_1\\
&amp;amp;：\\
&amp;amp;d_N
\end{align*}
$$&lt;/div&gt;
&lt;h4&gt;出力&lt;/h4&gt;
&lt;p&gt;作ることのできる鏡餅の最大の段数を出力せよ。&lt;/p&gt;
&lt;hr&gt;

&lt;h4&gt;普通の解法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;a href="http://delta114514.hatenablog.jp/entry/2018/03/15/014555"&gt;http://delta114514.hatenablog.jp/entry/2018/03/15/014555&lt;/a&gt; より引用)&lt;br&gt;
入力をリストにしてからセットにして要素数を数える。当然ですね。僕はセットの存在を思い出せなかったので、次のようにしました。&lt;/p&gt;
&lt;h4&gt;僕の解法&lt;/h4&gt;
&lt;p&gt;ソートしてからリストのままでなんとか数えあげました。明らかに汚いですね。長いですし、n=1で場合分けしてますし。こんな初心者じみた答えでも合ってたらいいんです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)])))&lt;/span&gt;
&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;問題９：Daydream&lt;/h3&gt;
&lt;p&gt;問題文の通りに、後ろから４単語のどれかを検索していくのが一番わかりやすいと思われます。が、わざわざeraseという単語を選んできたということは、こういうことでしょう。&lt;/p&gt;
&lt;hr&gt;

&lt;h4&gt;問題文&lt;/h4&gt;
&lt;p&gt;英小文字からなる文字列&lt;span class="math"&gt;\(S\)&lt;/span&gt; が与えられます。 &lt;span class="math"&gt;\(T\)&lt;/span&gt;が空文字列である状態から始め、
以下の操作を好きな回数繰り返すことで &lt;span class="math"&gt;\(S=T\)&lt;/span&gt; とすることができるか判定してください。
- &lt;span class="math"&gt;\(T\)&lt;/span&gt;の末尾に&lt;code&gt;dream dreamer erase eraser&lt;/code&gt; のいずれかを追加する。&lt;/p&gt;
&lt;h4&gt;制約&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(1\leq |S|\leq 10^5\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(S\)&lt;/span&gt;は英小文字からなる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;入力&lt;/h4&gt;
&lt;p&gt;入力は以下の形式で標準入力から与えられる。
&lt;/p&gt;
&lt;div class="math"&gt;$$S$$&lt;/div&gt;
&lt;h4&gt;出力&lt;/h4&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S=T\)&lt;/span&gt;とすることができる場合&lt;code&gt;'YES'&lt;/code&gt;を、そうでない場合&lt;code&gt;'NO'&lt;/code&gt;を出力せよ。&lt;/p&gt;
&lt;hr&gt;

&lt;h4&gt;僕の解法&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eraser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;erase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dreamer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;文字列の後ろからだけでなく、途中から抜いても、抜く単語の順番をうまく決めれば問題ないはずです。&lt;br&gt;
変数をいちいち置いているのが恥ずかしいですが、通ればいいんです。  &lt;/p&gt;
&lt;h4&gt;別解答&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;eraser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;erase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dreamer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dream&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;a href="http://delta114514.hatenablog.jp/entry/2018/03/15/014555"&gt;http://delta114514.hatenablog.jp/entry/2018/03/15/014555&lt;/a&gt; より引用)&lt;br&gt;
通ればなんでもいいはずなんですが、これはどうでしょう。この解答例だと、&lt;code&gt;'d erase r erase e erase a erase m'&lt;/code&gt; という文字列(スペースは抜いてください)もYESになってしまうはずなのですが、試しにこのコードを提出してみるとacceptされました。(嘘解法なんでしょうか？にしては同じような答えを書いてる人が大勢います。)&lt;/p&gt;
&lt;h2&gt;初学者にとっての競技プログラミング&lt;/h2&gt;
&lt;p&gt;解いてみた感想ですが、やはり考えるのは楽しいです。久々に数学的な頭の使い方をして懐かしさも覚えました。 また、何より、競技プログラミングは初学者にかなり便利なものだと感じました。ほんとに基礎的な部分しか学習してなくても解けるというのは取り組みやすいですし、結果がだせることは嬉しいです。過去問ならネット上にたくさん解説があるのでつまってもなんとかなります。&lt;/p&gt;
&lt;p&gt;他の人のコードを見ることができ、考え方の幅も広がります。上手く書けなかったコードを見直したり、異なった方針で書かれたコードを見るのはいい刺激になります。 特に基礎の文法に慣れるという点では一番だと思います。基礎を洗練させることは必ずこの先モジュールやパッケージを使っていくにしても、理解して扱えることができ役に立つことでしょう。&lt;/p&gt;
&lt;p&gt;もちろん万能ではありません。競技プログラミングの内容はプログラミング一般から見て偏っているらしいです。「競技プログラミング　デメリット」で調べると批判がたくさん出てきます。&lt;/p&gt;
&lt;p&gt;でも少なくともPython会に入ってる初心者の人は、ソフト開発のような能力ではなく、プログラミングをツールとして扱える能力を求めている人がほとんどでしょうから、うってつけの教材だと思います。&lt;/p&gt;
&lt;p&gt;簡単なブロック崩しのゲームを作ったことがありますが、今回の方がよっぽど練習になりました。もし興味があれば皆さんも是非試してみてください。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Blog"></category><category term="競技プログラミング"></category></entry><entry><title>Estimation statisticsに基づいたデータの可視化ライブラリ -DABEST-</title><link href="/previews/refs/heads/system/preview_test/blog/2019/06/DABEST_tutorial.html" rel="alternate"></link><published>2019-06-23T00:00:00+09:00</published><updated>2019-06-23T00:00:00+09:00</updated><author><name>山本</name></author><id>tag:None,2019-06-23:/previews/refs/heads/system/preview_test/blog/2019/06/DABEST_tutorial.html</id><summary type="html"></summary><content type="html">&lt;p&gt;データを可視化する手法としては、棒グラフ(&lt;strong&gt;Barplot&lt;/strong&gt;), 箱ひげ図(&lt;strong&gt;Boxplot&lt;/strong&gt;), &lt;strong&gt;Jitter plot&lt;/strong&gt;, &lt;strong&gt;Violin plot&lt;/strong&gt; などがよく用いられます。しかし、これらの可視化手法は &lt;strong&gt;有意差検定(null hypothesis significance testing; NHST)&lt;/strong&gt; の結果を表示するためのものです。有意差検定は様々な分野の研究において広く用いられていますが、統計検定の結果の評価に&lt;strong&gt;p値&lt;/strong&gt;を用いることは二分的な評価に繋がっています(例えばp&amp;lt;0.05ならOKでp&amp;gt;0.05ならダメ、という判断)。一方で、&lt;strong&gt;Estimation Statistics&lt;/strong&gt;はp値ではなく &lt;strong&gt;効果量(effect size)&lt;/strong&gt; に重きを置きます。つまり、効果がある/なしではなく、どのくらい効果があるか、を重視するということです。&lt;/p&gt;
&lt;p&gt;今回紹介する &lt;strong&gt;DABEST&lt;/strong&gt; (&lt;strong&gt;D&lt;/strong&gt;ata &lt;strong&gt;A&lt;/strong&gt;nalysis using &lt;strong&gt;B&lt;/strong&gt;ootstrap-coupled &lt;strong&gt;EST&lt;/strong&gt;imation)はEstimation Statisticsに基づいたデータの可視化を行うためのライブラリ（パッケージ）です。 &lt;strong&gt;Python, R, Matlab&lt;/strong&gt; に対応しています。以下はDABESTについての論文です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;J. Ho, T. Tumkaya, S. Aryal, H. Choi, A. Claridge-Chang. &lt;strong&gt;Moving beyond P values: Everyday data analysis with estimation plots&lt;/strong&gt;. &lt;em&gt;Nature Methods&lt;/em&gt;. (2019), 1548-7105. 10.1038/s41592-019-0470-3. (&lt;a href="https://www.nature.com/articles/s41592-019-0470-3"&gt;Nature Methods&lt;/a&gt;, &lt;a href="https://www.biorxiv.org/content/10.1101/377978v2"&gt;bioRxiv&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;ライブラリ&lt;/h3&gt;
&lt;p&gt;DABESTにはPython(&lt;a href="https://github.com/ACCLAB/DABEST-python"&gt;DABEST-Python&lt;/a&gt;)とR(&lt;a href="https://github.com/ACCLAB/dabestr"&gt;dabestr&lt;/a&gt;), Matlab(&lt;a href="https://github.com/ACCLAB/DABEST-Matlab"&gt;DABEST-Matlab&lt;/a&gt;)での実装があります。&lt;strong&gt;この記事ではPythonのライブラリを使用します&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;Estimation Stats&lt;/h3&gt;
&lt;p&gt;このDABESTには著者らによる優れたHP(&lt;a href="https://www.estimationstats.com/#/"&gt;Estimation Stats&lt;/a&gt;)が存在します。このHPには&lt;a href="https://www.estimationstats.com/#/background"&gt;Estimation statisticsとDABESTで用いられる手法の解説&lt;/a&gt;があり、さらに&lt;strong&gt;csvファイルをアップロードするだけ&lt;/strong&gt;でEstimation statisticsに基づいたデータの可視化ができるページもあります。コードを書く必要はなく、効果量としてどの指標を用いるか(Mean difference, Median difference, Cohen's d, hedges' g, Cliff's deltaなど)も選択できます。&lt;/p&gt;
&lt;h2&gt;DABESTチュートリアル&lt;/h2&gt;
&lt;p&gt;DABESTのチュートリアルは既に用意されています(&lt;a href="https://acclab.github.io/DABEST-python-docs/tutorial.html"&gt;Tutorial-dabest 0.2.4 documentation&lt;/a&gt;)。以下ではインストールの方法と簡単な使い方の紹介をします。&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;p&gt;DABEST(0.24)は次のライブラリに依存しています(括弧内はバージョン)： numpy(1.15), scipy(1.2), matplotlib(3.0), seaborn(0.9), pandas(0.24)。基本的なライブラリですが、必要に応じてバージョンアップ(またはダウン)しましょう。DABESTのインストールは次のコマンドによりpipで行うことができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install dabest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Quickstart&lt;/h3&gt;
&lt;p&gt;インストールしたら、とりあえずコードが動くか確認してみましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dabest&lt;/span&gt;

&lt;span class="c1"&gt;# Load the iris dataset. Requires internet access.&lt;/span&gt;
&lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/mwaskom/seaborn-data/raw/master/iris.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load the above data into `dabest`.&lt;/span&gt;
&lt;span class="n"&gt;iris_dabest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;species&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;petal_width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;setosa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;versicolor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;virginica&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Produce a Cumming estimation plot and save plot.&lt;/span&gt;
&lt;span class="n"&gt;iris_dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean_diff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;quick_start.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下のようなグラフが出力されれば成功です。&lt;br&gt;
&lt;img alt="quick_start" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/DABEST_tutorial_figs/quick_start.png"&gt;&lt;/p&gt;
&lt;p&gt;このグラフは &lt;strong&gt;Cumming plot&lt;/strong&gt; という可視化の方法です。Estimation statisticsにおける可視化の方法としてはもう1つ &lt;strong&gt;Gardner-Altman plot&lt;/strong&gt; というものがあります。以下ではこの2つの可視化方法の見方とコードについて紹介します。&lt;/p&gt;
&lt;h3&gt;Gardner-Altman plot&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Gardner-Altman plot&lt;/strong&gt; はM. GardnerとD. Altmanによって提案された描画法です。以下はGardner-Altman plotの例です。図の左側では両方の群のすべての観測値をJitter plotにより表示しています。右側にあるのは効果量の軸で、効果量の点推定(黒丸)と信頼区間(縦の黒棒)を表示しています。この効果量の信頼区間ですが、これは &lt;strong&gt;Bootstrap法&lt;/strong&gt; を用いて算出しています。なお、Bootstrap法に関しては後で詳しく述べます。&lt;br&gt;
&lt;img alt="ga1" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/DABEST_tutorial_figs/ga1.png"&gt;&lt;/p&gt;
&lt;p&gt;コードは次のようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dabest&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20190623&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Generate toy dataset&lt;/span&gt;
&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Control&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Load the above data into `dabest`.&lt;/span&gt;
&lt;span class="n"&gt;df_dabest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;df_dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean_diff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#df_dabest.cohens_d.plot(fig_size=(5,4))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ga1.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_inches&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gardner-Altman plotには &lt;strong&gt;対応のある2群(paired)&lt;/strong&gt; のためのバージョンもあります。&lt;br&gt;
&lt;img alt="ga2" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/DABEST_tutorial_figs/ga2.png"&gt;&lt;/p&gt;
&lt;p&gt;ここでは効果量として &lt;strong&gt;Cohen's d&lt;/strong&gt; を用いています。コードは次のようになります(ライブラリのインポートは省略)。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generate toy dataset&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;idx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Control&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Load the above data into `dabest`.&lt;/span&gt;
&lt;span class="n"&gt;df_dabest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;paired&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;idx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df_dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cohens_d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#df_dabest.mean_diff.plot(fig_size=(4,4))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ga2.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_inches&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Cumming plot&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cumming plot&lt;/strong&gt; はG. Cummingによって提案された描画法です。複数の群に対して2つ以上の効果量およびそれらの信頼区間を、今度は観測データの下に描画しています。&lt;br&gt;
&lt;img alt="cumming" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/DABEST_tutorial_figs/cumming.png"&gt;&lt;/p&gt;
&lt;p&gt;ここでは効果量として &lt;strong&gt;hedges' g&lt;/strong&gt; を用いています。コードは次のようになります(ライブラリのインポートは省略)。  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Generate toy dataset&lt;/span&gt;
&lt;span class="n"&gt;size1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;size2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;

&lt;span class="n"&gt;xc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xt1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xt2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xc1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xt1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xc2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xt2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Control1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Control2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Test2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Load the above data into `dabest`.&lt;/span&gt;
&lt;span class="n"&gt;df_dabest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Control1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Control2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;#df_dabest.cohens_d.plot(fig_size=(5,5))&lt;/span&gt;
&lt;span class="c1"&gt;#df_dabest.mean_diff.plot(fig_size=(5,5))&lt;/span&gt;
&lt;span class="n"&gt;df_dabest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hedges_g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cumming.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_inches&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Bootstrap Confidence Intervalについて&lt;/h2&gt;
&lt;p&gt;Bootstrap法で算出する信頼区間を &lt;strong&gt;Bootstrap Confidence Interval&lt;/strong&gt; といいます。信頼区間を出すためには多数のサンプルが必要ですが、Bootstrap法により疑似的に実験を繰り返し、2群間での効果量を算出することで多数の効果量のサンプルを得ることで解決します。  &lt;/p&gt;
&lt;p&gt;DABESTによる実装を用いずに効果量の信頼区間を描画してみます。正規分布に従う2つの群(N(50, 20&lt;sup&gt;2&lt;/sup&gt;), N(60, 20&lt;sup&gt;2&lt;/sup&gt;))からそれぞれ50サンプルを得たとします。効果量を平均の差として、5000回ブートストラップを行い、効果量のサンプルを5000個得ます。この場合のコードは以下のようになります。描画のためのコードが多いですが、&lt;code&gt;np.random.choice(x, size, replace=True)&lt;/code&gt;を用いればよい、というのが大事な部分です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20190623&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# generate observation (toy data)&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="c1"&gt;# sample size&lt;/span&gt;
&lt;span class="n"&gt;sigma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;mu1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;mu2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;span class="n"&gt;diff_mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mu2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mu1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x1_obs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mu1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x2_obs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mu2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;num_bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;
&lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.025&lt;/span&gt;

&lt;span class="n"&gt;es_bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bootstrap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# array to save bootstrapped effect size&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bootstrap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# bootstrapping&lt;/span&gt;
    &lt;span class="n"&gt;x1_resampling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1_obs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;x2_resampling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2_obs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# calculate effect size (mean difference) and save.&lt;/span&gt;
    &lt;span class="n"&gt;mu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2_resampling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1_resampling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;es_bootstrap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;mu&lt;/span&gt;

&lt;span class="c1"&gt;# plot&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kdeplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;data_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff_mu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;es_bootstrap_sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# to plot 95% CI&lt;/span&gt;
&lt;span class="n"&gt;idx_alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap_sorted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bootstrap&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;span class="n"&gt;idx_one_m_alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap_sorted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bootstrap&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;))]))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap_sorted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bootstrap&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx_alpha&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es_bootstrap_sorted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bootstrap&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;))],&lt;/span&gt; &lt;span class="n"&gt;ymin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ymax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;idx_one_m_alpha&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mean difference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Density&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#plt.show()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bootstrap_ci.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結果は次のようになります。&lt;br&gt;
&lt;img alt="bootstrap_ci" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/DABEST_tutorial_figs/bootstrap_ci.png"&gt;&lt;/p&gt;
&lt;p&gt;横軸が平均の差、縦軸が密度です。黒破線は0, 赤破線は真の分布の平均の差(今回であれば10)、緑実線は効果量の点推定(要は平均値)です。黒実線は第1, 3四分位数で、この間を95%信頼区間と近似しています(この信頼区間の算出手法を &lt;strong&gt;パーセンタイル法&lt;/strong&gt; といいます)。これは簡易な手法ですが、他にも算出方法はあります。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;p値と共に&lt;strong&gt;効果量も報告&lt;/strong&gt;しよう。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;効果量も図の中に表示&lt;/strong&gt;しよう。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DABEST&lt;/strong&gt; を用いれば簡単に効果量とその精度(信頼区間)を表示できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Estimation_statistics&lt;/li&gt;
&lt;li&gt;https://en.wikipedia.org/wiki/Bootstrapping_(statistics)&lt;/li&gt;
&lt;li&gt;統計学の時間（&lt;a href="https://bellcurve.jp/statistics/course/12752.html"&gt;効果量1&lt;/a&gt;, &lt;a href="https://bellcurve.jp/statistics/course/12765.html"&gt;効果量2&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;岡田謙介. &lt;strong&gt;心理学における効果量をめぐる最近の話題&lt;/strong&gt;. (&lt;a href="http://www3.psy.senshu-u.ac.jp/~ken/DevPsy2015_okada.pdf"&gt;pdf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;汪金芳. &lt;strong&gt;ブートストラップ法入門&lt;/strong&gt;. (&lt;a href="http://www.math.s.chiba-u.ac.jp/~wang/bootstrap.pdf"&gt;pdf&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Statistics"></category></entry><entry><title>がんゲノム変異シグネチャー解析</title><link href="/previews/refs/heads/system/preview_test/blog/2019/06/cancer_signature.html" rel="alternate"></link><published>2019-06-21T00:00:00+09:00</published><updated>2019-06-21T00:00:00+09:00</updated><author><name>山田</name></author><id>tag:None,2019-06-21:/previews/refs/heads/system/preview_test/blog/2019/06/cancer_signature.html</id><summary type="html"></summary><content type="html">&lt;p&gt;がんゲノムの変異シグネチャーの推定にチャレンジしてみました。&lt;/p&gt;
&lt;p&gt;&lt;img src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/1.png" width="400px"&gt;&lt;/p&gt;
&lt;h2&gt;きっかけ&lt;/h2&gt;
&lt;p&gt;先日の遺伝学の講義にて、がんゲノムの変異シグネチャーを教えていただき、やり方も詳しく書かれていたので、挑戦してみました。&lt;/p&gt;
&lt;p&gt;講義ではRでしたので、Pythonでも同じ結果が得られるか、Pythonの勉強も兼ねての挑戦記録です。&lt;/p&gt;
&lt;h2&gt;がんゲノムの変異シグネチャーとは？？&lt;/h2&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/2.png"&gt;&lt;/p&gt;
&lt;p&gt;（がんゲノム情報学　中谷先生のスライドより）&lt;/p&gt;
&lt;h2&gt;トピックモデルとは？？&lt;/h2&gt;
&lt;p&gt;&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/3.png"&gt;&lt;/p&gt;
&lt;p&gt;（&lt;a href="https://www.albert2005.co.jp/knowledge/machine_learning/topic_model/about_topic_model"&gt;https://www.albert2005.co.jp/knowledge/machine_learning/topic_model/about_topic_model&lt;/a&gt;より）&lt;/p&gt;
&lt;h3&gt;がんゲノムの場合のトピックは？？&lt;/h3&gt;
&lt;p&gt;&lt;img alt="4" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/4.png"&gt;&lt;/p&gt;
&lt;p&gt;（がんゲノム情報学　中谷先生のスライドより）&lt;/p&gt;
&lt;p&gt;一塩基ごとの変異情報がまとめられたテキストがDocumentsとして、がんの原因となる要素を一つ一つの「topic」、変異シグネチャーとして、トピックモデルを用いて推定します。&lt;/p&gt;
&lt;h2&gt;解析の方法&lt;/h2&gt;
&lt;p&gt;&lt;img alt="5" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/5.png"&gt;&lt;/p&gt;
&lt;p&gt;（がんゲノム情報学　中谷先生のスライドより）&lt;/p&gt;
&lt;p&gt;データベースにある変異データには、&lt;br&gt;
ゲノムの位置、その位置における変異前の塩基配列、変異後の配列&lt;br&gt;
の情報が書かれています。&lt;/p&gt;
&lt;p&gt;そこから変異の情報を、C&amp;gt;T_AGのような形でテキストファイルにIDごとに記録していきます。&lt;br&gt;
鋳型鎖と相補鎖の関係より、&lt;strong&gt;変異前がCかTの側のみ&lt;/strong&gt; を集計します。（＊注1）&lt;/p&gt;
&lt;p&gt;その後、各IDごとに変異データのテキストファイルを集め、変異情報をDocumentsとして、トピック、変異シグネチャーを推定していきます。&lt;/p&gt;
&lt;h2&gt;使用したツール&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;pandas  &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;matplotlib&lt;br&gt;
Pythonでおなじみのツールですね。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;biopython&lt;br&gt;
Python 用の計算機分子生物学パッケージです。&lt;br&gt;
核酸やアミノ酸の配列情報を扱うためのFASTAファイルの処理が簡単になります。&lt;br&gt;
（ドキュメントは読み切れていないので、いずれ読みたいです…）&lt;br&gt;
公式：&lt;a href="https://biopython.org/"&gt;https://biopython.org/&lt;/a&gt;&lt;br&gt;
参考：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/sato32ha6/items/6b762b0d0314a5db7dc3"&gt;https://qiita.com/sato32ha6/items/6b762b0d0314a5db7dc3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bi.biopapyrus.jp/python/biopython/seq.html"&gt;https://bi.biopapyrus.jp/python/biopython/seq.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gensim（topicmodel）&lt;br&gt;
今回の核となるトピックモデルについてはこちらを使います。&lt;br&gt;
gensimは、様々なトピックモデルを実装したPythonライブラリです。&lt;br&gt;
"&lt;em&gt;topic modeling for humans&lt;/em&gt;"とあるように、実装が大変なトピックモデルを簡単に使うことができます。&lt;br&gt;
今回はその中でも、LDA（Latent Dirichlet Allocation）を用います。&lt;br&gt;
参考：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sejuku.net/blog/67863"&gt;https://www.sejuku.net/blog/67863&lt;/a&gt;&lt;br&gt;
gensimの使い方についてはこれが一番わかりやすかったです）　　　&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.machinelearningplus.com/nlp/topic-modeling-gensim-python/"&gt;https://www.machinelearningplus.com/nlp/topic-modeling-gensim-python/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wordcloud&lt;br&gt;
matplotlib を利用して Word Cloud を作成できる Python ライブラリです。&lt;br&gt;
wordcloud自体は、文章中で出現頻度が高い単語を複数選び出し、その頻度に応じた大きさで図示する手法です。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;実践　〜解析〜&lt;/h2&gt;
&lt;h3&gt;COSMICとは？&lt;/h3&gt;
&lt;p&gt;（HP：https://cancer.sanger.ac.uk/cosmic/）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;COSMIC, the Catalogue Of Somatic Mutations In Cancer, is the world’s largest and most comprehensive resource for exploring the impact of somatic mutations in human cancer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（公式サイトより）&lt;/p&gt;
&lt;p&gt;がんと関連する体細胞変異の情報を集積したデータベースです。&lt;/p&gt;
&lt;p&gt;今回はこちらにある変異データを解析の対象としています。&lt;/p&gt;
&lt;p&gt;参考：統合TV　&lt;a href="https://togotv.dbcls.jp/20180127.html"&gt;https://togotv.dbcls.jp/20180127.html&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;データのダウンロード&lt;/h3&gt;
&lt;p&gt;がんゲノムの変異データをCOSMCのサイトからダウンロードします。
- &lt;a href="https://cancer.sanger.ac.uk/cosmic/download"&gt;https://cancer.sanger.ac.uk/cosmic/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;データを無料でダウンロードするには、学生としての登録が必要でした。
今回は様々なデータの中でも、Non coding variantsのものを使いました。
&lt;img alt="6" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/6.png"&gt;&lt;/p&gt;
&lt;h3&gt;リファレンス配列の入手&lt;/h3&gt;
&lt;p&gt;今回はUCSCからhg38をダウンロードしました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ wget http://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.fa.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こちらのフォーマットはfastaで、&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/7.png"&gt;&lt;/p&gt;
&lt;p&gt;のような感じで並んでいます。&lt;/p&gt;
&lt;p&gt;配列にAやaなど、大文字と小文字が並んでいるのは、大文字の A, C, G, T はコード領域、小文字の a, c, g, t はコード領域以外を表します。&lt;/p&gt;
&lt;h3&gt;変異データを覗いてみる&lt;/h3&gt;
&lt;p&gt;COSMICから入手したデータがどんなフォーマットなのか見てみました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="8" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/8.png"&gt;&lt;/p&gt;
&lt;p&gt;ここからサンプルID、ゲノムのposition、元の配列、変異後の配列、という形で抽出し手確認しました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="9" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/9.png"&gt;&lt;/p&gt;
&lt;p&gt;公式サイトによると、変異データのフォーマットは以下のようになっているようです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[column number:label] Heading&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;[1:A] Sample name,Sample id,Tumour id&lt;/strong&gt; – A sample is an instance of a portion of a tumour being examined for mutations. The sample name can be derived from a number of sources. In many cases it originates from the cell line name. Other sources include names assigned by the annotators, or an incremented number assigned during an anonymisation process. A number of samples can be taken from a single tumour and a number of tumours can be obtained from one individual. A sample id is used to identify a sample within the COSMIC database. There can be multiple ids, if the same sample has been entered into the database multiple times from different papers.&lt;br&gt;
&lt;strong&gt;[4:D] Primary Site&lt;/strong&gt; – The primary tissue/cancer from which the sample originated. More details on the tissue classification are avaliable from &lt;a href="https://cancer.sanger.ac.uk/cell_lines/classification"&gt;here&lt;/a&gt;. In COSMIC we have standard classification system for tissue types and sub types because they vary a lot between different papers.&lt;br&gt;
&lt;strong&gt;[5:E] Site Subtype 1&lt;/strong&gt; – Further sub classification (level 1) of the samples tissue of origin.&lt;br&gt;
&lt;strong&gt;[6:F] Site Subtype 2&lt;/strong&gt; – Further sub classification (level 2) of the samples tissue of origin.&lt;br&gt;
&lt;strong&gt;[7:G] Site Subtype 3&lt;/strong&gt; – Further sub classification (level 3) of the samples tissue of origin.&lt;br&gt;
&lt;strong&gt;[8:H] Primary Histology&lt;/strong&gt; – The histological classification of the sample.&lt;br&gt;
&lt;strong&gt;[9:I] Histology Subtype 1&lt;/strong&gt; – Further histological classification (level 1) of the sample.&lt;br&gt;
&lt;strong&gt;[10:J] Histology Subtype 2&lt;/strong&gt; – Further histological classification (level 2) of the sample.&lt;br&gt;
&lt;strong&gt;[11:K] Histology Subtype 3&lt;/strong&gt; – Further histological classification (level 3) of the sample.&lt;br&gt;
&lt;strong&gt;[12:L] Mutation Id&lt;/strong&gt; – unique mutation identifier.&lt;br&gt;
&lt;strong&gt;[13:M] Zygosity&lt;/strong&gt; – Information on whether the mutation was reported to be homozygous , heterozygous or unknown within the sample.&lt;br&gt;
&lt;strong&gt;[14:N] GRCh&lt;/strong&gt; – The coordinate system used –&lt;br&gt;
38 = GRCh38/Hg38&lt;br&gt;
37 = GRCh37/Hg19&lt;br&gt;
&lt;strong&gt;[15:O] Genome position&lt;/strong&gt; – The genomic cooridnate of the mutation.&lt;br&gt;
&lt;strong&gt;[16:P] Mutation somatic status&lt;/strong&gt; – Information on whether the sample was reported to be Confirmed Somatic, Previously Reported or Variant of unknown origin –&lt;br&gt;
Confirmed Somatic = if the mutation has been confimed to be somatic in the experiment by sequencing both the tumour and a matched normal from the same patient.&lt;br&gt;
variant of unknown origin = when the mutation is known to be somatic but the tumour was sequenced without a matched normal.&lt;br&gt;
Previously observed = when the mutation has been reported as somatic previously but not in current paper.&lt;br&gt;
&lt;strong&gt;[17:Q] WT SEQ&lt;/strong&gt; – wild type sequence.&lt;br&gt;
&lt;strong&gt;[18:R] MUT SEQ&lt;/strong&gt; – Mutated sequence.&lt;br&gt;
&lt;strong&gt;[19:S] SNP&lt;/strong&gt; – All the known SNPs are flagged as ‘y’ defined by the 1000 genomes project, dbSNP and a panel of 378 normal (non-cancer) samples from Sanger CGP sequencing.&lt;br&gt;
&lt;strong&gt;[20:T] FATHMM_MKL_NON_CODING_SCORE&lt;/strong&gt; – FATHMM-MKL non-coding score. A p-value ranging from 0 to 1 where &amp;gt;= 0.7 is functionally significant.&lt;br&gt;
&lt;strong&gt;[21:U] FATHMM_MKL_NON_CODING_GROUPS&lt;/strong&gt; – FATHMM-MKL group classification. More details from &lt;a href="https://cancer.sanger.ac.uk/cosmic/analyses"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;[22:V] FATHMM_MKL_CODING_SCORE&lt;/strong&gt; – FATHMM-MKL coding score (p-value ranging from 0 to 1).&lt;br&gt;
&lt;strong&gt;[23:W] FATHMM_MKL_CODING_GROUPS&lt;/strong&gt; – FATHMM-MKL group classification (coding). More details from &lt;a href="https://cancer.sanger.ac.uk/cosmic/analyses"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;[24:X] Whole Genome Reseq&lt;/strong&gt; – if the enitre genome is sequenced.&lt;br&gt;
&lt;strong&gt;[25:Y] Whole_Exome&lt;/strong&gt; – if the enitre exome is sequenced.&lt;br&gt;
&lt;strong&gt;[26:Z] Id Study&lt;/strong&gt; – Lists the unique Ids of studies that have involved this non coding mutation.&lt;br&gt;
&lt;strong&gt;[27:AA] Pubmed_PMID&lt;/strong&gt; – The PUBMED ID for the paper that the sample was noted in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;変異ファイルの処理&lt;/h3&gt;
&lt;p&gt;ここが一番苦労しました。。。&lt;/p&gt;
&lt;h4&gt;簡単な流れ&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;変異データをpandasで読み込む&lt;/li&gt;
&lt;li&gt;MUT_SEQについて、genome_positionからリファレンス配列を参照して、変異配列の前後の配列を探し出す&lt;/li&gt;
&lt;li&gt;DataFrameの新しいcolumnとして配列を追加していく&lt;/li&gt;
&lt;li&gt;ID_tumorごとに、配列の変異をテキストファイルに書き出していく。&lt;/li&gt;
&lt;li&gt;tumorごとの変異についてのテキストファイルをもとに、トピックモデルをgensimを使って作成する。&lt;/li&gt;
&lt;li&gt;可視化する。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下実際のコードです。&lt;/p&gt;
&lt;h4&gt;ライブラリのimport&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Bio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SeqIO&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;COSMICの変異データをpandasでDataFrameとして読み込みます。&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;mut_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CosmicNCV.tsv&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ref_fasta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hg38.fa&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;df_cosmic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mut_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cosmic&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID_SAMPLE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ID_tumour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;genome position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MUT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="10" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/10.png"&gt;&lt;/p&gt;
&lt;p&gt;上記のようにDataFrameとしてきれいに読み込めました。&lt;/p&gt;
&lt;h4&gt;リファレンス配列の読み込み&lt;/h4&gt;
&lt;p&gt;ここではbiopythonを使って簡単に配列部分を取り出します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#リファレンスファイルについて&lt;/span&gt;
&lt;span class="n"&gt;list_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;list_desc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;list_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="c1"&gt;#biopythonを用いて、idやdesc、seqを抽出&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;SeqIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ref_fasta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fasta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;id_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;desc_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;

&lt;span class="n"&gt;list_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list_desc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;desc_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list_seq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;塩基配列はlist_seqに入っています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="11" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/11.png"&gt;&lt;/p&gt;
&lt;p&gt;全てリスト形式なので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_desc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="mi"&gt;19829559&lt;/span&gt;

&lt;span class="n"&gt;chr3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のように各染色体ごとに見るこができます。&lt;/p&gt;
&lt;h4&gt;COSMICのdf（DataFrame）の操作&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;df_cutのgenome_positionについて、染色体番号とゲノムの位置に分割して新しいカラムとして追加します。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#chr、genome position用の空のリストを作成&lt;/span&gt;

&lt;span class="n"&gt;list_cut_chr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;list_cut_pos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="n"&gt;list_cut_chr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[:-]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;genome position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;list_cut_pos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[:-]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;genome position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;#df_cutに新しいカラムとして追加。&lt;/span&gt;

&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_cut_chr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;single position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_cut_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="12" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/12.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MUT_SEQの欠損値、chr23、24、25を除く。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#mutのdfからchr23、24、MUT_SEQのnanを除く&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;23&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;24&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;25&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MUT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#indexを振り直す&lt;/span&gt;

&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なぜかCOSMICのデータにchr22以上のものが含まれていたので、除きました。&lt;/p&gt;
&lt;h4&gt;リファレンス配列から、MUT_SEQの前後の配列を抽出&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#refから変異位置の前後の配列を抽出&lt;/span&gt;
&lt;span class="n"&gt;seq_before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;seq_after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="n"&gt;seq_before&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])][&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;single position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;seq_after&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_seq&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;list_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])][&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;single position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;COSMICのdfと合わせていく。&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;変異の前後の配列について、dfに追加し、大文字に直す&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_before&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq_before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_after&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq_after&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#大文字に変更&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_before&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_before&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_after&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_after&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;前、変異、後の3つの配列を新しいカラムの中に追加する
（以下のようなややこしいカラムを作っているのは（＊注1）のためです）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#3文字の配列にする（seq_forwardが鋳型）&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_forward&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_before&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MUT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_after&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#鋳型鎖の順番を逆にしたもの（相補鎖を作るため）&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_forward_r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_after&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MUT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_before&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここまでで以下のようになります。（dfの右側だけ）&lt;/p&gt;
&lt;p&gt;&lt;img alt="13" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/13.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;3つの配列について、相補鎖を作ります&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#辞書型で相補鎖に変換&lt;/span&gt;
&lt;span class="n"&gt;dict_base&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;G&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;G&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;list_seq_reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;list_wt_seq_reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;span class="n"&gt;list_seq_reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_forward_r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maketrans&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_base&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;#次のために、変異の配列も変換しておきます。 list_wt_seq_reverse.append((str(df_cut_chr_i[&amp;#39;WT_SEQ&amp;#39;][i])).translate(str.maketrans(dict_base)))&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_reverse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_seq_reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_seq_reverse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_wt_seq_reverse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;変異の情報をテキストファイルに書き出す&lt;/h4&gt;
&lt;p&gt;いよいよ最後のステップです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#ID_tumorのカウント&lt;/span&gt;
&lt;span class="n"&gt;dict_tumor_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID_tumour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="n"&gt;list_tumor_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_tumor_id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずはIDをリストに格納します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID_tumour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value_counts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="14" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/14.png"&gt;&lt;/p&gt;
&lt;p&gt;（上はテストファイルで行ったため、実際の数値とは異なります。）&lt;/p&gt;
&lt;p&gt;いろいろな試行錯誤したコードで、テキストファイルに書き出していきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df_index_for_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_tumor_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;df_index_for_id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index_&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID_tumour&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df_index_for_id&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index_&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text_2/&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;.txt&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MUT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;\
&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_forward&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_forward&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_SEQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;WT_seq_reverse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;amp;amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_reverse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;\
&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_reverse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_cut_chr_i&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seq_reverse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（特に速度のことは考えずに直感的にforで回したので、かなり時間がかかります。）
ここまでで変異のデータをIDごとに抽出することができました！&lt;/p&gt;
&lt;p&gt;上のスクリプトをサーバーにでも投げてしばらく待ちます。&lt;/p&gt;
&lt;h3&gt;トピックモデルを使ってみる&lt;/h3&gt;
&lt;p&gt;&lt;img alt="15" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/15.png"&gt;&lt;/p&gt;
&lt;p&gt;4までの操作で各IDごとの上のように、変異データが得られました。&lt;/p&gt;
&lt;p&gt;これをトピックモデルを使って解析していきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gensim&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;wordcloud&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WordCloud&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ディレクトリ内のファイルリストを取得する&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/Users/***/test/cancer_genome&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;list_file_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./text_2/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;list_file_name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;変異データを一つのリスト内に格納する&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;list_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_file_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;list_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;())[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;トピックモデル&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#辞書を作成&lt;/span&gt;
&lt;span class="n"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gensim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corpora&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;corpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doc2bow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list_text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#トピックモデルの学習&lt;/span&gt;
&lt;span class="n"&gt;num_topics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="n"&gt;lda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gensim&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldamodel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LdaModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;corpus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;id2word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dictionary&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;トピック数（num_topics）については後述します。&lt;/p&gt;
&lt;p&gt;これでトピックモデルの学習ができました。ここは実行時間はそこまで長くありません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="16" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/16.png"&gt;&lt;/p&gt;
&lt;p&gt;結果を見てみると、各トピックごとに、各変異がどれほどの割合を占めているのか、というのがわかります。&lt;/p&gt;
&lt;h4&gt;可視化&lt;/h4&gt;
&lt;p&gt;おなじみmatplotlibを使ってグラフにしてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;

&lt;span class="n"&gt;clist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;salmon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;salmon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;rvb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinearSegmentedColormap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rvb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="17" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/17.png"&gt;&lt;/p&gt;
&lt;p&gt;リストで色を指定することで、このように変異の種類（T&amp;gt;C、T&amp;gt;A、C&amp;gt;Gなど）ごとに色づけすることができました。
- 参考：&lt;a href="https://stackoverflow.com/questions/42656585/barplot-colored-according-a-colormap"&gt;https://stackoverflow.com/questions/42656585/barplot-colored-according-a-colormap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これをトピックごとにグラフを作成し、画像として保存します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;clist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aqua&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aqua&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gray&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;\
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),(&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;rvb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mcolors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinearSegmentedColormap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#plt.subplot(lda.num_topics,2,i+1)&lt;/span&gt;
&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;topic #&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rvb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xticks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dict_topic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;topic_pdf/topicmodel_ms_&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;.pdf&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（色はCOSMICのグラフのものと揃えました）&lt;/p&gt;
&lt;p&gt;&lt;img alt="18" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/18.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="19" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/19.png"&gt;&lt;/p&gt;
&lt;h3&gt;データベースのシグネチャと比較&lt;/h3&gt;
&lt;p&gt;COSMICには、今までに推定されてきたがんゲノムの変異シグネチャーが多数登録されています。
- &lt;a href="https://cancer.sanger.ac.uk/cosmic/signatures/SBS/"&gt;https://cancer.sanger.ac.uk/cosmic/signatures/SBS/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="20" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/20.png"&gt;&lt;/p&gt;
&lt;p&gt;シグネチャーのグラフと、関連するがんの原因が示されています。&lt;/p&gt;
&lt;h4&gt;推定&lt;/h4&gt;
&lt;p&gt;今回の課題は、「&lt;strong&gt;たばこ/紫外線のシグネチャーを見つけることができたか&lt;/strong&gt;」でした。&lt;/p&gt;
&lt;p&gt;データベースにあるグラフとどれほど一致しているか見ていきます。&lt;/p&gt;
&lt;p&gt;COSMICに掲載されているシグネチャーSBS1〜SBS85までのうち、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;たばこ&lt;/strong&gt;（tobacco）が原因とされるもの→SBS4、5、29&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;紫外線&lt;/strong&gt;（ultraviolet light）が原因とされるもの→SBS7a〜d、38&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="21" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/21.png"&gt;&lt;/p&gt;
&lt;p&gt;であるとわかりました。&lt;/p&gt;
&lt;h4&gt;推定結果&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;-たばこ-&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①SBS4&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="22" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/22.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="23" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/23.png"&gt;&lt;/p&gt;
&lt;p&gt;②SBS5&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="24" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/24.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="25" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/25.png"&gt;&lt;/p&gt;
&lt;p&gt;③SBS29&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="26" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/26.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="27" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/27.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-紫外線-&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;①SBS7a
- COSMIC&lt;/p&gt;
&lt;p&gt;&lt;img alt="28" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/28.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="29" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/29.png"&gt;&lt;/p&gt;
&lt;p&gt;②SBS7b&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="30" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/30.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="31" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/31.png"&gt;&lt;/p&gt;
&lt;p&gt;③SBS7c&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="32" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/32.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;類似しているシグネチャーは確認できませんでした。&lt;/p&gt;
&lt;p&gt;④SBS7d&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="33" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/33.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;類似しているシグネチャーは確認できませんでした。&lt;/p&gt;
&lt;p&gt;⑤SBS38&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COSMIC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="34" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/34.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;類似しているシグネチャーは確認できませんでした。&lt;/p&gt;
&lt;p&gt;どれも完全に一致しているとは言えないのですが、近いものはそれなりに類似しているグラフが作れたのではないかと思います。&lt;/p&gt;
&lt;p&gt;シグネチャーを見るだけでも、「たばこを原因とするがんは、変異の種類が多い」、「紫外線を原因とするがんは、変異の種類が少ない」という傾向も見て取れます。&lt;/p&gt;
&lt;h2&gt;おまけ -WordCloudによる可視化-&lt;/h2&gt;
&lt;p&gt;トピックモデルで単語を扱う際によく同時にやられているものとして、WordCloudがあったため、変異データでもやってみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_topics&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_topic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCloud&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_from_frequencies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Topic #&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="35" src="/previews/refs/heads/system/preview_test/blog/2019/06/images/cancer_signature_figs/35.png"&gt;&lt;/p&gt;
&lt;h2&gt;今後やってみたいこと&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;がんゲノムの変異シグネチャーは、最初に発表された論文ではNon- negative Matrix Factorization(NMF)(非負値行列因子分解)を使って推定された。2019年になって「トピックモデル」を使って変異 シグネチャを推定する論文が二報発表された。&lt;br&gt;
1. Funnell, T. et al. Integrated structural variation and point mutation signatures in cancer genomes using correlated topic models. PLOS Computational Biology 15, e1006799 (2019).
2. Matsutani, T., Ueno, Y., Fukunaga, T. &amp;amp; Hamada, M. Discovering novel mutation signatures by latent Dirichlet allocation with variational Bayes inference. Bioinformatics doi:10.1093/bioinformatics/btz266&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;このような背景があったため今回はトピックモデルを使ってみたのですが、NMFを用いた推定もやってみたいです。&lt;/p&gt;
&lt;p&gt;変異シグネチャーの個数については、今回のセッティングが最適ではなく、丁寧にやるならhierarchical dirichlet process (HDP) を用いるか、perplexity、coherenceなどの評価指標を用いる必要があるのかと思いました。
- 参考：&lt;a href="https://www.randpy.tokyo/entry/word2vec_skip_gram_model"&gt;https://www.randpy.tokyo/entry/word2vec_skip_gram_model&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;今回のコード、作成したグラフ等はGitHubにあります。
- &lt;a href="https://github.com/ykohki/cancer_signature"&gt;https://github.com/ykohki/cancer_signature&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;トピックモデルを用いたがんゲノムの変異シグネチャー解析
- &lt;a href="https://ipsj.ixsq.nii.ac.jp/ej/index.php?active_action=repository_view_main_item_detail&amp;amp;page_id=13&amp;amp;block_id=8&amp;amp;item_id=182433&amp;amp;item_no=1"&gt;https://ipsj.ixsq.nii.ac.jp/ej/index.php?active_action=repository_view_main_item_detail&amp;amp;page_id=13&amp;amp;block_id=8&amp;amp;item_id=182433&amp;amp;item_no=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;がんゲノムビッグデータから喫煙による遺伝子異常を同定
- &lt;a href="https://www.ncc.go.jp/jp/information/pr_release/2016/1104/index.html"&gt;https://www.ncc.go.jp/jp/information/pr_release/2016/1104/index.html&lt;/a&gt;
- &lt;a href="https://science.sciencemag.org/content/354/6312/618"&gt;https://science.sciencemag.org/content/354/6312/618&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同じ変異シグネチャーについて調べていて、特にたばこについて見ている論文でした
- https://www.nature.com/articles/nature12477#associating-cancer-aetiology-and-mutational-signatures&lt;/p&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>IPA「基本情報技術者試験」受験録</title><link href="/previews/refs/heads/system/preview_test/blog/2019/05/IPA_FE.html" rel="alternate"></link><published>2019-05-12T00:00:00+09:00</published><updated>2019-11-21T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2019-05-12:/previews/refs/heads/system/preview_test/blog/2019/05/IPA_FE.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.jitec.ipa.go.jp/1_11seido/fe.html"&gt;&lt;strong&gt;基本情報技術者試験&lt;/strong&gt;&lt;/a&gt;を受けてきた話。&lt;/p&gt;</summary><content type="html">&lt;p&gt;IPAの「&lt;a href="https://www.jitec.ipa.go.jp/1_11seido/fe.html"&gt;&lt;strong&gt;基本情報技術者試験&lt;/strong&gt;&lt;/a&gt;」（2019年春期）を受験してきました。&lt;/p&gt;
&lt;p&gt;なんでも経済産業省管轄の&lt;strong&gt;国家試験&lt;/strong&gt;で、&lt;a href="https://kanpou.npb.go.jp/"&gt;&lt;strong&gt;官報公示&lt;/strong&gt;&lt;/a&gt;までされるらしい。&lt;strong&gt;よくわからないけどすごい&lt;/strong&gt;。
厚生労働省の&lt;a href="https://www.mhlw.go.jp/kouseiroudoushou/shikaku_shiken/ishi/"&gt;&lt;strong&gt;某国家試験&lt;/strong&gt;&lt;/a&gt;は受験資格が残念ながらまだないけれど、&lt;strong&gt;こないだ国試受けてきた&lt;/strong&gt;って言ってもたぶん嘘じゃないわけです。だからどうしたって話ではありますが。&lt;/p&gt;
&lt;p&gt;今回はその受験録です。&lt;/p&gt;
&lt;h2&gt;受験申込〜当日まで&lt;/h2&gt;
&lt;h3&gt;申込&lt;/h3&gt;
&lt;p&gt;特に何も目的などはないんですが、2月のBioinfo会でNさんが&lt;a href="https://www.jitec.ipa.go.jp/"&gt;&lt;strong&gt;情報処理技術者試験&lt;/strong&gt;&lt;/a&gt;のポスターを持ってこられ、締切直前だったこともあり、何となくその場の勢いでぽちる。&lt;br&gt;
試験はレベル1から最上位の4まで区分があり、これも何となく弱気にレベル2の本試験を選択。&lt;/p&gt;
&lt;h3&gt;会場変更&lt;/h3&gt;
&lt;p&gt;試験会場は阪大豊中キャンパス。&lt;br&gt;
…のはずが、なんか&lt;strong&gt;遠くの方の某大学&lt;/strong&gt;に変更。ちょっと気力を削がれる。&lt;/p&gt;
&lt;h3&gt;試験勉強など&lt;/h3&gt;
&lt;p&gt;結局、何もしませんでした。
勉強も過去問調査も一切無しの&lt;strong&gt;ガチンコ&lt;/strong&gt;（？）で本番に臨みます。&lt;br&gt;
（そもそも試験受験の目的って半分以上はそれを口実に勉強することだと思うので、何やってるのかよくわかりませんが。。）&lt;/p&gt;
&lt;h2&gt;試験当日&lt;/h2&gt;
&lt;p&gt;昨夜も&lt;a href="https://atcoder.jp/contests/tenka1-2019"&gt;競プロ&lt;/a&gt;の出来は微妙だったけど、検討はほどほどにして寝たよ。&lt;/p&gt;
&lt;h3&gt;午前試験（9:30〜12:00）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4択問題が80問。ひたすらマークしていく。  &lt;/li&gt;
&lt;li&gt;常識で解けるような問題も多い。
第1問「10進数の7÷32の結果を2進数表記したものはどれか」…高校入試かな？  &lt;/li&gt;
&lt;li&gt;とはいえ、1/4くらいは確信がもてない／よくわからなかった。
第71問「IoTの応用事例のうちHEMSの説明はどれか」…知らないよ、ごめんね&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;。  &lt;/li&gt;
&lt;li&gt;でも&lt;strong&gt;結局は4択&lt;/strong&gt;だからね。期待値的に8割以上はあるはずだよ&lt;sup id="fnref2:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;見直す気力も沸かないし、お昼が気になるから午前試験は途中退出。
近くにラーメン屋さんを見つけてがっつり食べてきたよ。眠い。。&lt;/p&gt;
&lt;h3&gt;午後試験（13:00〜15:30）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4択は少ないけど、やっぱり全問択一式。要求知識は午前より少なくて、&lt;strong&gt;問題文や選択肢の読解力&lt;/strong&gt;が一番のポイントっぽい気がする。
ちゃんと読んで理解できれば答えられる問題がほとんど。  &lt;/li&gt;
&lt;li&gt;「変更管理会議において、仕様変更依頼が採用された場合、担当PMは（　　）する」…うん、&lt;strong&gt;辞任&lt;/strong&gt;…と、、あれ？選択肢にない？
「&lt;strong&gt;仕様変更依頼の内容をプロジェクト計画に反映させて更新&lt;/strong&gt;」か、、記述なら死んでたよ。&lt;/li&gt;
&lt;li&gt;「ソフトウェア開発」という5言語から1題選択のセクションがある。&lt;br&gt;
C、COBOL、Java、アセンブラ、表計算。…あれ？？&lt;strong&gt;Pythonどこ？&lt;/strong&gt;&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3"&gt;3&lt;/a&gt;&lt;/sup&gt; どこ？軽くパニック。
何回探しても出てこないから、しぶしぶCを解く。
レベル的には、昔のセンター試験（N88-BASIC）よりはちょっと上くらい？  &lt;/li&gt;
&lt;li&gt;結局、午後は午前より出来がよくて、9割あるんじゃないかな、たぶん&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そんなわけで終了。午後試験はちゃんと最後までいたよ。
マークがずれたりしてなければ合格だと思う。
結果発表は&lt;strong&gt;1ヶ月後&lt;/strong&gt;。全部マークシートなのに長いねえ。&lt;/p&gt;
&lt;h2&gt;全体を通しての感想&lt;/h2&gt;
&lt;p&gt;この試験の合格基準は午前午後とも&lt;strong&gt;各60%&lt;/strong&gt;です。
僕は理数系出身の学士編入生で、この種の試験には医学部生の中でも強い方だと思います。
しかしそれを差し引いても、少なくともボーダー60%の試験としては、&lt;strong&gt;難度がきわめて低い&lt;/strong&gt;と言わざるをえません。  &lt;/p&gt;
&lt;p&gt;ですので、情報処理技術者試験に興味があっても、能力証明という意味では&lt;strong&gt;レベル2の本試験は会員の皆さんにお勧めしません&lt;/strong&gt;。
レベル3の&lt;a href="https://www.jitec.ipa.go.jp/1_11seido/ap.html"&gt;&lt;strong&gt;応用情報技術者試験&lt;/strong&gt;&lt;/a&gt;を検討してみてください。
尤も、午前試験の超高得点はそんなに簡単じゃないと思うので、勉強してみるのは悪くないかも。
そのあたりは&lt;a href="http://www.toukei-kentei.jp/about/grade1semi/"&gt;統計検定準1級&lt;/a&gt;などと似ていると思います。&lt;/p&gt;
&lt;p&gt;何はともあれ、&lt;strong&gt;基本情報技術者&lt;/strong&gt;というよくわからない肩書き（&lt;strong&gt;国家資格&lt;/strong&gt;？）を手に入れました（たぶん）。
おしまい。&lt;/p&gt;
&lt;h2&gt;注記&lt;/h2&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;HEMS = Home Energy Management System.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;(2019.06)
試験結果開示は午前80.00点、午後95.00点。
ほぼ手応え通りながら、午前試験でわからなかった部分は本当にランダム回答の正答率しかなかった模様。。&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;(2019.11)
2020年春期試験から、COBOLが廃止されPythonがめでたく導入されることになりました。&lt;br&gt;
&lt;a href="https://www.jitec.ipa.go.jp/1_00topic/topic_20191028.html"&gt;https://www.jitec.ipa.go.jp/1_00topic/topic_20191028.html&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Blog"></category><category term="検定試験"></category></entry><entry><title>はじめての競プロ：入力アンチョコメモ</title><link href="/previews/refs/heads/system/preview_test/blog/2019/04/competition_input.html" rel="alternate"></link><published>2019-04-27T00:00:00+09:00</published><updated>2019-04-29T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2019-04-27:/previews/refs/heads/system/preview_test/blog/2019/04/competition_input.html</id><summary type="html">&lt;p&gt;AtCoderのABCで、これさえ覚えれば大丈夫！な入力のパターンについて解説します。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;入力のパターン&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Python会競プロ部（？）へようこそ！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;はじめての方には&lt;strong&gt;入力&lt;/strong&gt;が最初の鬼門だと思います。&lt;br&gt;
&lt;a href="https://atcoder.jp"&gt;AtCoder&lt;/a&gt; のABCで、&lt;strong&gt;これさえ覚えれば大丈夫！&lt;/strong&gt;な入力パターンは以下の通り。
最初は説明の意味がわからなくても、とりあえずコピペすれば動きます（何）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;言語&lt;/strong&gt;は &lt;code&gt;Python3 (3.4.3)&lt;/code&gt; (または &lt;code&gt;PyPy3 (2.4.0)&lt;/code&gt;) を選択してね。&lt;/p&gt;
&lt;h3&gt;文字列を入力&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;整数ひとつを入力&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;int()&lt;/code&gt; が、文字列を整数 (integer) に変換する&lt;strong&gt;呪文&lt;/strong&gt;です。&lt;/p&gt;
&lt;h3&gt;整数2つ〜を一行（空白区切り）で入力&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まず &lt;code&gt;split()&lt;/code&gt; で文字列を分割。
次に &lt;code&gt;map()&lt;/code&gt; で &lt;code&gt;int()&lt;/code&gt; をそれぞれに適用しています。&lt;/p&gt;
&lt;h3&gt;多数の整数を一行で入力&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;x&lt;/code&gt; は0番目から始まる配列になる。n番目は &lt;code&gt;x[n]&lt;/code&gt; で参照します。&lt;/p&gt;
&lt;h2&gt;使用例&lt;/h2&gt;
&lt;h3&gt;問題1&lt;/h3&gt;
&lt;p&gt;整数A, Bが1行 (空白区切り) で&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;A B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のように与えられる。和 &lt;code&gt;A+B&lt;/code&gt; を出力せよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;問題2&lt;/h3&gt;
&lt;p&gt;1行目に自然数 &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt; (&lt;code&gt;N&amp;gt;=K&lt;/code&gt;)、2行目にN個の整数 &lt;code&gt;x1,..,xN&lt;/code&gt; が、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;N K&lt;/span&gt;
&lt;span class="err"&gt;x1 x2 x3 ... xN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のように与えられる。
このうちK番目の整数xKを出力せよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;配列が0番目からであることに注意。
&lt;code&gt;N&lt;/code&gt; は実は使わなくてよい。&lt;br&gt;
ちょっと難しいパターンだが、B問題ではちょくちょく出てくる。&lt;/p&gt;
&lt;h3&gt;問題3&lt;/h3&gt;
&lt;p&gt;&lt;s&gt;(このパターンはたぶんC問題以降のみ。)&lt;/s&gt; B問題にも時々出ます。&lt;br&gt;
1行目に自然数 &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;K&lt;/code&gt; (&lt;code&gt;N&amp;gt;=K&lt;/code&gt;)、2行目〜N+1行目に &lt;code&gt;N&lt;/code&gt;個の整数 &lt;code&gt;x1,..,xN&lt;/code&gt; が、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;N K&lt;/span&gt;
&lt;span class="err"&gt;x1&lt;/span&gt;
&lt;span class="err"&gt;x2&lt;/span&gt;
&lt;span class="err"&gt;x3&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;xN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のように与えられる。
このうち &lt;code&gt;K&lt;/code&gt; 番目の整数 &lt;code&gt;xK&lt;/code&gt; を出力せよ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解答例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ループとの組み合わせ。&lt;s&gt;C問題&lt;/s&gt; B問題以降でときどき必要。&lt;/p&gt;
&lt;p&gt;以上です。おしまい。&lt;/p&gt;</content><category term="Blog"></category><category term="競技プログラミング"></category></entry><entry><title>5年次海外実習</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/study_abroad.html" rel="alternate"></link><published>2019-03-29T00:00:00+09:00</published><updated>2019-03-29T00:00:00+09:00</updated><author><name>佐藤</name></author><id>tag:None,2019-03-29:/previews/refs/heads/system/preview_test/blog/2019/03/study_abroad.html</id><summary type="html"></summary><content type="html">&lt;p&gt;1月末から3月中旬までオーストラリアのメルボルンに海外実習に行ってました、５年生の佐藤です。基礎系の研究室に行ったのですが、僕がまだまだ勉強不足なところも多くこれからの勉強のモチベーションにもなりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;僕の実習内容についてはまだまとまっていないので、去年行った宮崎先輩の資料をもらいました。&lt;/p&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/f3e0fxEFp9OQAq" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;

&lt;div style="margin-bottom:5px"&gt;

&lt;p&gt;海外での生活は旅行も含めて初めてだったので本当に不安でしたが、寮の友達が親切に接してくれて本当に助かりました。ここでその暮らしぶりを少し書かせてもらおうと思います。&lt;/p&gt;
&lt;h2&gt;英語について&lt;/h2&gt;
&lt;p&gt;僕を含めて多くの人が海外留学する際に懸念していることかもしれません。IELTSはギリギリ6.0でかつ直前まで英語の勉強をサボっていたので非常に心配でした。なんとかなるかなーと割と楽観的だったのですが、空港でコーヒー頼む時に全然通じなくて絶望しました。&lt;/p&gt;
&lt;p&gt;ただ、僕が滞在していた寮は留学生が多く住んでいる寮で英語を母国語としている人はそこまで多くなかったので助かりました。それでも最初は聞き取れませんでしたが、周りの人が割と根気強く伝えようとしてくれたのでありがたかったです。&lt;/p&gt;
&lt;p&gt;日本に帰ってからもちゃんと英語勉強します。。。&lt;/p&gt;
&lt;h2&gt;寮生活について&lt;/h2&gt;
&lt;p&gt;今回僕は大学内にある寮的なところに滞在しました。朝晩食事付きで週34000円くらいです。オーストラリアにしてはだいぶ良心的ですが、それでも１ヶ月半いるとなるとばかにならないし、行かせてくれた親には超感謝してます。朝晩バイキング形式で食べるので、必然的に他の住人と話すことになるわけですが、結果的にこれがよかったです。用事を作らずとも自然に人と話す機会があるし、色々な人の色々な人生が聞けてすごく楽しいです。ここでたくさんの友達ができました。&lt;/p&gt;
&lt;p&gt;部屋も結構快適で落ち着きます。風呂とトイレは共同と聞いていて結構ビビってたんですが、全然不快な感じはなかったです。&lt;/p&gt;
&lt;p&gt;寮というものに住んだことがなかったので、とても新鮮でした。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_02.jpg"&gt;
&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_03.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;メルボルンという町について&lt;/h2&gt;
&lt;p&gt;ぶっちゃけ日本より住みやすい気がします。気温の年較差は小さく(冬でも10度前後)、日較差は大きいです(今は夏ですが、最低気温18度くらい)。昼間はラボに行っているので、外に出る時は5月くらいの気候で超気持ちいいです。日差しは強いのでオーストラリア来る時は日焼け止め必須です。&lt;/p&gt;
&lt;p&gt;メルボルンはアートとスポーツの町です。そこらかしこに美術館や記念館があり、とても全部は行けないほどです。古い建築物が多く残っており、伝統的な西洋建築が立ち並ぶかと思いきや、流線形のドーム状の病院や路地裏にはストリートアート的なものがそこら中に描かれ、それらがいい意味で混じり合い独特の景観を形成しています。&lt;/p&gt;
&lt;p&gt;先日全豪オープンが開かれたのもこの町です。ちょうど中之島のように中心地のすぐ近くにヤラ川という川が流れており、ボート競技も盛んに行われていました。&lt;/p&gt;
&lt;p&gt;オーストラリアは移民の国で、色々な人種の人たちがいます。だいたい３割がアジア系(中国が最多)、アフリカ系の人も結構います。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_04.jpg"&gt;
&lt;img alt="5" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_05.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;海外の留学生について&lt;/h2&gt;
&lt;p&gt;アジア系の人たちが結構多かったです。特に中国はチャイナタウンもあるからなのか、非常に多くの学生が来ています。話を聞いていると、中国の学生の20%くらいの人が海外で修士、あるいは博士を取るらしく、英語は使えて当然のような雰囲気が伺えました。日本は自国の大学や研究機関以外の選択肢があまりないというか、海外に行く人が(少なくとも僕の周りには)少ないので驚きました。当然、speakingやlisteningの能力も程度の差こそあれ、日本人は劣っていると思います。カナダ人から「日本人ってシャイだしあんまり英語も喋れないよねー」って言われて、確かに、、、と納得してしまいました。海外に渡り、技術や知識を取り入れるのがスタンダードになろうとしている他のアジア諸国の人たちを見ていると、日本の将来を考えずにはいられませんでした。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;海外での生活は予想よりもはるかに楽しかったです。これは寮の友達によるところが大きかったです。毎日誰かが寮のどこかでボードゲームなどで遊んでおり、それを見ているだけでも楽しく、また一緒にやろうぜと気軽に誘ってくれました。休日はみんなで出かけ、それぞれの故郷の料理を交互に食べ、文化について語り合う。考え方は人それぞれなのはもちろん、国や宗教に大きく影響を受けていることを知りました。&lt;/p&gt;
&lt;p&gt;旅行ではなかなか味わえないたくさんの貴重な経験をさせてもらいました。&lt;/p&gt;
&lt;p&gt;海外に行ってみたい、というミーハーな理由で海外実習を選びましたが、行って本当によかったです。皆さんも是非！！&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_06.jpg"&gt;
&lt;img alt="7" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/study_abroad_figs/img_07.jpg"&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="海外留学"></category></entry><entry><title>NTT corevoチャレンジ: 話者の性別・年代識別</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/voice_recognition.html" rel="alternate"></link><published>2019-03-29T00:00:00+09:00</published><updated>2019-03-29T00:00:00+09:00</updated><author><name>佐藤</name></author><id>tag:None,2019-03-29:/previews/refs/heads/system/preview_test/blog/2019/03/voice_recognition.html</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;a href="https://signate.jp"&gt;Signate&lt;/a&gt;内で開催されていた上記のコンペティションに参加してきました。以下試してみたこと、感想のまとめです。&lt;/p&gt;
&lt;div class="jetpack-video-wrapper"&gt;&lt;iframe src='https://www.slideshare.net/slideshow/embed_code/138387330' width='616' height='505' allowfullscreen webkitallowfullscreen mozallowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;p&gt;思っていたよりも良い成績を残すことができて満足です。医学とはあまり関係なさそうですが、音声は脳波や心電図等と同じく時系列データなので、その扱いに慣れたことは良かったです。コンペなどに定期的に参加することで、機械学習を学ぶモチベーションになっているので、この調子で色々なコンペに参加していきたいと思います。&lt;/p&gt;
&lt;p&gt;2stage制なのになぜかstageごとにメダルをもらい、signate総合ランキング52位に入りました。ランキングはあんまり当てにならない気がします。&lt;/p&gt;</content><category term="Blog"></category><category term="Data Science Competition"></category></entry><entry><title>VELOCYTO</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/velocyto.html" rel="alternate"></link><published>2019-03-24T00:00:00+09:00</published><updated>2019-03-24T00:00:00+09:00</updated><author><name>廣瀬</name></author><id>tag:None,2019-03-24:/previews/refs/heads/system/preview_test/blog/2019/03/velocyto.html</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;strong&gt;Velocyto&lt;/strong&gt; とは、RNAseq の結果に含まれるイントロンの割合からその細胞の分化指向性を算出するという解析手法です。&lt;/p&gt;
&lt;h2&gt;RNAseq でイントロン??&lt;/h2&gt;
&lt;p&gt;RNAseq においては totalRNA のうち 99%ともいわれる rRNA を除き mRNA のみを効率よくSequence する目的で、Poly(A)で成熟 mRNA を濃縮することがしばしば行われています。しかし、そのようなサンプルにおいても、実際の Sequence 結果ではイントロンにあたる配列が読まれてくることが指摘されており、この原因は Poly(A)類似モチーフの存在であると推察されています。&lt;/p&gt;
&lt;h2&gt;結果の例&lt;/h2&gt;
&lt;p&gt;概日時間の検討ではとてもきれいな結果が得られています。関連遺伝子のunspliced(u) とspliced(s)を観察していくと、circadian timeの経過とともにu がs に変化していきます。&lt;/p&gt;
&lt;p&gt;また、未分化細胞からの分化の方向性を見積もることも可能と報告されています。マウスのオリゴデンドロサイト前駆体細胞がオリゴデンドロサイトへ分化する方向に Velocityを持っていることが示されました。&lt;/p&gt;
&lt;h2&gt;実践編&lt;/h2&gt;
&lt;p&gt;Developer の WEB(&lt;a href="http://velocyto.org/"&gt;http://velocyto.org/&lt;/a&gt;)の tutorial を参考に手持ちの BAM で挑戦します。R 用と Python 用とあるようですが、もちろん Python です。二部構成となっており、前半はCommand lineでBAMファイルから.loomファイルを作成、後半では作成した.loomファイルから解析を行うとのことです。&lt;/p&gt;
&lt;h3&gt;準備&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda install numpy scipy cython numba matplotlib scikit-learn h5py click
$ pip install velocyto
$ pip install scanpy
$ pip install -U scvelo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;※pysam は Windows 環境下では仮想環境下であってもインストールできないそうです。
- &lt;a href="https://qiita.com/chaoi/items/6d7702cd70430610f844"&gt;https://qiita.com/chaoi/items/6d7702cd70430610f844&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これに気付かず数日はまりました。。&lt;/p&gt;
&lt;h3&gt;Genome annotation file のダウンロード&lt;/h3&gt;
&lt;p&gt;GENCODE のサイトから GTF ファイルをダウンロードし、適当な場所に保存して
gunzip。&lt;/p&gt;
&lt;h3&gt;実行&lt;/h3&gt;
&lt;p&gt;Sequence の手法ごとに Command を選べます。今回は smart-seq2 で行います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ velocyto run-smartseq2 -e hogehoge /*.bam annotation.gtf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;オプション&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o, --outputfolder&lt;/code&gt;：出力ディレクトリを作成・指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e, --sampleid&lt;/code&gt;：出力ファイル名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m, --repmask&lt;/code&gt;：リピート配列をマスクする場合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t, --dtype&lt;/code&gt;：出力ファイルのデータ型(default は unit32)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d, --dump&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v, --verbose&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サンプルごとに BAM があることを想定して複数ファイルを*で受け付けてくれます。BAM と GTF ファイルは必須です。なお、BAM の代わりに SAM を入れてもエラーは吐かないようです。これにより、hogehoge.loom ファイルが得られました。この中には、各分子のスプライシング状態が格納されています。&lt;/p&gt;
&lt;p&gt;※TOPHAT でアラインメントしたデータはそのままではうまく行かないようです。なので、TopHat-Recondition で unmap のデータを拾ってくればいけるかもしれません。今回はHISAT2 でアラインメントし直してから velocyto をかけ、改めてhogehoge.loom ファイルを得ました。&lt;/p&gt;
&lt;h3&gt;描画&lt;/h3&gt;
&lt;p&gt;Scanpy と組み合わせて使用するために scvelo を用いました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scanpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sc&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scvelo&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;scv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;データ読み込み&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;adata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hogehoge.loom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;次元圧縮&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pca&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_comps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;速度計算&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;scv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;scv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;velocity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;描画&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;scv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;velocity_embedding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/velocyte_figs/picture1.png"&gt;&lt;/p&gt;
&lt;p&gt;※それぞれの細胞における特定遺伝子の発現レベルを色で表したり、PCA 以外の次元圧縮法を用いることもできます。この場合は tSNE のほうがきれいに見えるようです。パラメータはたくさん用意されているので、各データセットで最適な条件を検討する必要があるでしょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/velocyte_figs/picture2.png"&gt;
&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/velocyte_figs/picture3.png"&gt;&lt;/p&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nature.com/articles/s41586-018-0414-6"&gt;https://www.nature.com/articles/s41586-018-0414-6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://velocyto.org/velocyto.py/index.html"&gt;http://velocyto.org/velocyto.py/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://catway.jp/bioinformatics/qc/rmrepeat.html"&gt;http://catway.jp/bioinformatics/qc/rmrepeat.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/theislab/scvelo"&gt;https://github.com/theislab/scvelo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>必要n数の決定～研究計画～</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/n_number.html" rel="alternate"></link><published>2019-03-22T00:00:00+09:00</published><updated>2019-03-22T00:00:00+09:00</updated><author><name>依藤</name></author><id>tag:None,2019-03-22:/previews/refs/heads/system/preview_test/blog/2019/03/n_number.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;シングルセル解析での細胞数&lt;/h2&gt;
&lt;p&gt;① &lt;strong&gt;実現可能性&lt;/strong&gt;：金銭面、使用機器のスループットを考慮した細胞数&lt;br&gt;
② &lt;strong&gt;検出力&lt;/strong&gt;：統計学的検討により細胞種間の差が充分に検出される症例数であるか&lt;br&gt;
③ &lt;strong&gt;倫理面&lt;/strong&gt;：ヒトサンプル、あるいはモデル動物サンプルの取り扱い  &lt;/p&gt;
&lt;p&gt;とくに②に関して：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分類するclusterに関して過去の文献から予測する。&lt;/li&gt;
&lt;li&gt;想定されるcluster数&lt;/li&gt;
&lt;li&gt;1clusterあたりの最低細胞数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の見積もりができれば、ウェブサイトでの計算が可能。&lt;/p&gt;
&lt;h2&gt;臨床研究での症例数&lt;/h2&gt;
&lt;p&gt;① &lt;strong&gt;実現可能性&lt;/strong&gt;：それだけの症例数を集めることができるか&lt;br&gt;
② &lt;strong&gt;検出力&lt;/strong&gt;：統計学的検討によりoutcomeの差が充分に検出される症例数であるか&lt;br&gt;
③ &lt;strong&gt;倫理面&lt;/strong&gt;：不必要に多くの被験者を研究に参加させるべきではない  &lt;/p&gt;
&lt;p&gt;とくに②に関して：&lt;/p&gt;
&lt;p&gt;症例数の予測に必要なものを過去の文献やパイロット研究を行うことで予測する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;outcomeの差&lt;/li&gt;
&lt;li&gt;データのばらつき(標準偏差)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の見積もりができれば、ソフトウェアでの計算が可能。 (cf.) &lt;a href="http://biostat.mc.vanderbilt.edu/wiki/Main/PowerSampleSize"&gt;Power and Sample Size Calculation (PS)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;シングルセル解析では、やはり値段や機器の問題が大きくなってくるでしょうか。特に細胞種がかなり希少な場合に、細胞数(n)をどんどん増やすしかないとなると、その点が一番気になります。&lt;/p&gt;
&lt;p&gt;一方で臨床研究では、単施設で可能なのか、多施設共同でないと症例数(n)が集まらないのかという問題は切実です。そしてヒトを対象にする以上、症例数決定の明確な理由が必要です。&lt;a href="http://www.consort-statement.org/media/default/downloads/consort%202010%20checklist.pdf"&gt;CONSORT2010 checklist&lt;/a&gt;にも記載があります。&lt;/p&gt;
&lt;p&gt;いずれにせよ、事前の文献調査やプレ実験・パイロット研究によって着地点を明確にしておかないと、途中で頓挫してしまい、出るはずの結果がでない事態になりそうです。今後はシングルセル解析で前提となる統計手法に関しても勉強していこうと思っています。&lt;/p&gt;
&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;今日から使える医療統計　(新谷歩, 2015年, 医学書院)&lt;/li&gt;
&lt;li&gt;Tutorial: guidelines for the experimental design of single-cell RNA sequencing studies　(Atefeh Lafzi et el., Nature Protocols volume 13, pages2742–2757 (2018))&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Statistics"></category></entry><entry><title>阪医Python会特製 RNA-seq pipeline ver. 1.0 リリース</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/original_rnaseq_pipeline.html" rel="alternate"></link><published>2019-03-19T00:00:00+09:00</published><updated>2019-03-19T00:00:00+09:00</updated><author><name>菅波</name></author><id>tag:None,2019-03-19:/previews/refs/heads/system/preview_test/blog/2019/03/original_rnaseq_pipeline.html</id><summary type="html"></summary><content type="html">&lt;p&gt;阪医Python会のbioinformaticsチームの一つの成果として、RNA-seqのパイプラインのv1.0がリリースとなったので記事とさせていただきます。SRR idから遺伝子✕サンプルのテーブルにするまでには意外に大変ですが、それをすべて自動化しました。ダウンロード、詳細等は以下にあります。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/yyoshiaki/auto_counttable_maker"&gt;https://github.com/yyoshiaki/auto_counttable_maker&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;なお、以下のイラストはikraのアイコンとなっています。&lt;/p&gt;
&lt;p&gt;&lt;img src="/previews/refs/heads/system/preview_test/blog/2019/03/images/original_rnaseq_pipeline_figs/ikra.png" width="250px"&gt; &lt;/p&gt;
&lt;h2&gt;特徴&lt;/h2&gt;
&lt;p&gt;今回、自分たちの使いやすさを考えてツールの設計を行いました。他サンプルのファイル名の管理など、煩わしいところをすべて自動化することで、ミスも減らせると思います。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;準備するのは簡単なCSVファイル（テーブルだけ）で、極力パラメーターを減らした。&lt;/li&gt;
&lt;li&gt;すべてdocker上で動くため、ツールを各々インストールする必要がないし、バージョンに苦しむこともない。&lt;/li&gt;
&lt;li&gt;udockerにも対応しているため、ユーザー権限しかないサーバー上でも実行可能。&lt;/li&gt;
&lt;li&gt;outputは&lt;a href="http://bioinformatics.sdstate.edu/idep/"&gt;idep&lt;/a&gt;に対応。&lt;/li&gt;
&lt;li&gt;もちろんマルチスレッド対応。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;使い方&lt;/h2&gt;
&lt;p&gt;必要なテーブルは&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;SRR or fastq&lt;/th&gt;
&lt;th&gt;Layout&lt;/th&gt;
&lt;th&gt;condition1&lt;/th&gt;
&lt;th&gt;...&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Treg_LN_1&lt;/td&gt;
&lt;td&gt;SRR5385247&lt;/td&gt;
&lt;td&gt;SE&lt;/td&gt;
&lt;td&gt;Treg&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Treg_LN_2&lt;/td&gt;
&lt;td&gt;SRR5385248&lt;/td&gt;
&lt;td&gt;SE&lt;/td&gt;
&lt;td&gt;Treg&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;のような形式で、前3列が必須です。簡単ですね！データの集め方は、論文についているaccession number等をたどるのでもいいし、新しくなって爆速になった&lt;a href="http://sra.dbcls.jp/"&gt;DDBJ Search&lt;/a&gt;もおすすめ。&lt;/p&gt;
&lt;p&gt;コマンドはオプションが指定でき、リード数を100000に絞ったテストモードやマルチプロセスにも対応。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;Usage&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MakeCountTable_Illumina_trimgalore_SRR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;experiment_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spiece&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;--test, --help, --without-docker, --udocker&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;--threads [VALUE&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;human&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mouse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;--test test mode(MAX_SPOT_ID=100000).(dafault : False)&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--udocker&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--without-docker&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--threads&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--help Show usage.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なお、自前のfastq filesからの実行はv1.1で載せようと思っています。また、出力はscaled TPMを採用。(Soneson, C., Love, M. I. &amp;amp; Robinson, M. D. Differential analyses for RNA-seq: transcript-level estimates improve gene-level inferences. F1000Research 4, 1521 (2015).)。&lt;/p&gt;
&lt;h2&gt;pipelineの構成&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;fasterq-dump : シーケンスデータの取得&lt;/li&gt;
&lt;li&gt;fastqc : QC&lt;/li&gt;
&lt;li&gt;trim-galore : トリミング&lt;/li&gt;
&lt;li&gt;salmon : RNA定量&lt;/li&gt;
&lt;li&gt;multiqc : QCログの回収、可視化&lt;/li&gt;
&lt;li&gt;tximport : 遺伝子テーブルの生成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;となっています。各ツールの説明は省きますが、今時のツールの選定になっていると思います。&lt;/p&gt;
&lt;h2&gt;idep&lt;/h2&gt;
&lt;p&gt;本ツールは&lt;a href="http://bioinformatics.sdstate.edu/idep/"&gt;idep&lt;/a&gt;を意識した設計になっています。idepはRNA-seqの解析をinteractiveに行えるプラットフォームで、Differential expressed genes(DEGs)の検出だけではなく、遺伝子、サンプルのクラスタリング、パスウェイ解析、可視化などが行えます。idepについては以下がとても参考になります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://kazumaxneo.hatenablog.com/entry/2018/12/29/153838"&gt;macでインフォマティクス : インタラクティブなRNA seq解析webアプリケーション iDEP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/original_rnaseq_pipeline_figs/screenshot-from-2019-03-19-23-14-31.png"&gt;&lt;/p&gt;
&lt;h2&gt;githubを用いたチーム開発&lt;/h2&gt;
&lt;p&gt;今回、githubを用いてチーム開発を行いました。githubはエンジニアの間では当たり前のツールで、チームでのソフト開発によく用いられます。bioinformatics界隈でチーム開発を経験できることは意外に少なく、非常にいい経験になりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/original_rnaseq_pipeline_figs/ikra_git.png"&gt;&lt;/p&gt;
&lt;p&gt;雑多にはなりましたが、阪医Python会bioinformaticsチームの成果をアナウンスさせていただきました。完成までには3ヶ月ほどを要し、各人のアイデアや努力が詰まっております。今後もどんどん開発を進めていこうと思います。また、皆様のissue, Pull Requestもお待ちしております。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enjoy bioinformatics life!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/original_rnaseq_pipeline_figs/ios-e381aee794bbe5838f.jpg"&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>JuliaとPythonと競技プログラミング</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/julia_python_competition.html" rel="alternate"></link><published>2019-03-16T00:00:00+09:00</published><updated>2019-03-16T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2019-03-16:/previews/refs/heads/system/preview_test/blog/2019/03/julia_python_competition.html</id><summary type="html"></summary><content type="html">&lt;p&gt;最近友人と話していてJulia (&lt;a href="https://julialang.org"&gt;https://julialang.org&lt;/a&gt;)が話題になったことがあったので、少しだけ調べて試してみた話。&lt;/p&gt;
&lt;h2&gt;Juliaってなに？&lt;/h2&gt;
&lt;p&gt;Pythonのような動的型付けのスクリプト言語です。実行時にコンパイルを行いC言語にも迫る実行速度、科学技術系の数値計算もどんと来い、という触れ込みで、人気上昇中らしいです。Pythonを含む他言語のライブラリを読み込む仕組みを備えているのもすごいところ。&lt;br&gt;
&lt;s&gt;ただ、コードの見た目が激しくMatlab風味で思わず目を背けたくなります。&lt;/s&gt;&lt;/p&gt;
&lt;h2&gt;AtCoderでのJulia&lt;/h2&gt;
&lt;p&gt;ご多分に漏れず、実行速度に惹かれました。半年ほど前から参加している競技プログラミングサイト&lt;strong&gt;AtCoder&lt;/strong&gt; (&lt;a href="https://atcoder.jp"&gt;https://atcoder.jp&lt;/a&gt;)で、常用しているPython（← Python会だからね！）で実行時間切れ、C/C++に書き換えると正答、という経験を何度かしてきたので。&lt;/p&gt;
&lt;p&gt;そういうわけで、ここでは最近の&lt;strong&gt;第121回 AtCoder Beginner Contest (ABC121)&lt;/strong&gt; (&lt;a href="https://atcoder.jp/contests/abc121/"&gt;https://atcoder.jp/contests/abc121/&lt;/a&gt;)の問題で、Juliaのパフォーマンスを実際に見てみます。&lt;br&gt;
（言語知識0から数十分調べて書いたコードのため、動きはするが思わぬところで非効率、ということはあるかもしれません。）&lt;/p&gt;
&lt;h3&gt;AtCoder Beginner Contest 121 問題A "White Cells"&lt;/h3&gt;
&lt;p&gt;（問題はこちら → &lt;a href="https://atcoder.jp/contests/abc121/tasks/abc121_a"&gt;https://atcoder.jp/contests/abc121/tasks/abc121_a&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;入力値4個を読み込んで簡単な演算結果を返すだけの問題です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# ABC121-A &amp;quot;White Cells&amp;quot; in Julia&lt;/span&gt;
&lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所要時間が入力にほぼ依存しない問題ですが、、各言語でのAtCoder上実行結果。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;言語&lt;/th&gt;
&lt;th align="right"&gt;実行時間&lt;/th&gt;
&lt;th align="right"&gt;消費メモリ&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;360 ms&lt;/strong&gt;&lt;/td&gt;
&lt;td align="right"&gt;&lt;strong&gt;110 MB&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;PyPy3&lt;/td&gt;
&lt;td align="right"&gt;180 ms&lt;/td&gt;
&lt;td align="right"&gt;40 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Python3&lt;/td&gt;
&lt;td align="right"&gt;17 ms&lt;/td&gt;
&lt;td align="right"&gt;3 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;C++&lt;/td&gt;
&lt;td align="right"&gt;1 ms&lt;/td&gt;
&lt;td align="right"&gt;256 kB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;C++にもPythonにも、実行時間と消費メモリ双方で惨敗。 &lt;br&gt;
おそらくですが、&lt;strong&gt;実行ごとにまずコンパイルを行う&lt;/strong&gt;ので、簡単な問題だとそれが相対的に巨大なオーバーヘッドになってしまうようです。&lt;br&gt;
Pythonの半コンパイラ型実装であるPyPyはJuliaの半分程度でした。&lt;/p&gt;
&lt;!---

### AtCoder Beginner Contest 121-B

問題はこちら → &lt;https://atcoder.jp/contests/abc121/tasks/abc121_b&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# ABC121-B by Julia&lt;/span&gt;
&lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



---&gt;

&lt;h3&gt;AtCoder Beginner Contest 121 問題C "Energy Drink Collector"&lt;/h3&gt;
&lt;p&gt;（問題はこちら → &lt;a href="https://atcoder.jp/contests/abc121/tasks/abc121_c"&gt;https://atcoder.jp/contests/abc121/tasks/abc121_c&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;読み込んだ値の列をソートして、条件判定をしながら順番に足し上げていく問題。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# ABC121-C &amp;quot;Energy Drink Collector&amp;quot; in Julia&lt;/span&gt;
&lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sortrows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="kp"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なんと、テスト16個中15個でタイムアウト（2000ms以上）。。。&lt;/p&gt;
&lt;p&gt;Pythonのコードはこちら：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ABC121-C &amp;quot;Energy Drink Collector&amp;quot; in Python3&lt;/span&gt;
&lt;span class="n"&gt;inpl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inpl&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ans&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こちらは最大466msでクリア（同一コードのPyPy3では733ms）。ここで134msのテストもJuliaではタイムアウト。悲しい。&lt;/p&gt;
&lt;p&gt;今回Juliaでタイムアウトになったのは、言語の特性や正しいコーディングの仕方を知らないから、という可能性は高いです。ただ実際にこの問題でJuliaを使って提出されている答案は、最速クリアのものでも1724ms（そもそもJuliaでの提出数自体が少ないですが）。やはり上の安直なPythonコードが圧勝しています。&lt;/p&gt;
&lt;h2&gt;Juliaは競技プログラミングに向かない？&lt;/h2&gt;
&lt;p&gt;Juliaの実行速度が速いこと自体は（今回検証していませんが、きっと）本当なんだと思います。しかしそれは時間のかかる複雑・大規模な処理の場合であって、競技プログラミングのような高々2-3秒の計算にはコンパイルのオーバーヘッドがやはり大きいのかな、という印象です。  &lt;/p&gt;
&lt;p&gt;AtCoderなどでは、C++などのあからさまなコンパイル型言語はコンパイル時間が実行時間に算入されず、一方でJuliaに対しては算入されます。やや理不尽な感じはしなくもないけれど、このルール下でJuliaの高速性能を生かすことは（あくまでAtCoderのような短時間型競技プログラミングの話ですが）なかなか難しそう。残念ながら、普通にやるとPythonよりもずっと遅い。  &lt;/p&gt;
&lt;p&gt;なので、当面の競技プログラミング用言語は&lt;strong&gt;やっぱりPython&lt;/strong&gt;（とC/C++）、と個人的には結論づけたところです。おしまい。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt; History &amp;gt;&lt;/strong&gt;&lt;br&gt;
2019.03.21 ver1.0&lt;br&gt;
2019.03.21 ver1.1 微修正、PyPy3の成績を追記&lt;br&gt;
2019.03.21 ver1.2 JuliaとPythonのコードが対応するよう修正&lt;/p&gt;</content><category term="Blog"></category><category term="競技プログラミング"></category></entry><entry><title>Bioinformatics春合宿@三島</title><link href="/previews/refs/heads/system/preview_test/blog/2019/03/mishima.html" rel="alternate"></link><published>2019-03-10T00:00:00+09:00</published><updated>2019-03-10T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2019-03-10:/previews/refs/heads/system/preview_test/blog/2019/03/mishima.html</id><summary type="html"></summary><content type="html">&lt;p&gt;平岡と安水は2019/03/04-09の一週間、静岡県三島市の国立遺伝学研究所にある&lt;a href="https://dbcls.rois.ac.jp/"&gt;DBCLS&lt;/a&gt;にてbioinformatics合宿をしていました。定量、アセンブリを始めとするトランスクリプトーム解析やjuliaの入門、データベースのコツなど、たくさんのことを学びました。bioinformatics意外にも、坊農さんのグルメツアーや温泉、富士山など、季節ならではの三島を堪能することができました。詳しくは以下の日誌をご覧ください。&lt;/p&gt;
&lt;h3&gt;平岡&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/yuna06/mishima2019/blob/master/README.md"&gt;mishima2019&lt;/a&gt;
 &lt;/p&gt;
&lt;h3&gt;安水&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/yyoshiaki/mishima_gassyuku/blob/master/README.md"&gt;三島合宿日誌&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後に、合宿を快諾いただいた坊農さんはじめ、仲里さん、内藤さん、小野さん、大田さんには心よりお礼申し上げます。生涯忘れることない、大切な経験になりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2019/03/images/mishima_figs/img_8242.jpg"&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>Mockinbirdを用いたPAR-CLIP解析</title><link href="/previews/refs/heads/system/preview_test/blog/2019/01/mockinbird_parclip.html" rel="alternate"></link><published>2019-01-18T00:00:00+09:00</published><updated>2019-01-18T00:00:00+09:00</updated><author><name>平岡</name></author><id>tag:None,2019-01-18:/previews/refs/heads/system/preview_test/blog/2019/01/mockinbird_parclip.html</id><summary type="html"></summary><content type="html">&lt;p&gt;今回は &lt;strong&gt;PAR-CLIP&lt;/strong&gt; 解析のAll-in-oneパイプラインソフトウェアである、&lt;a href="http://wwwuser.gwdg.de/~compbiol/mockinbird/doc/intro.html"&gt;Mockinbird&lt;/a&gt;を紹介します。日本語での情報がほぼなく、説明が長くなってしまいそうなので、２回に分けて書きます。&lt;/p&gt;
&lt;h2&gt;PAR-CLIPって何？&lt;/h2&gt;
&lt;p&gt;PAR-CLIPは photoactivatable ribonucleoside-enhanced crosslinking and immunoprecipitation の略でRNAやmicroRNA結合タンパクの結合サイトを特定するために使います。&lt;/p&gt;
&lt;p&gt;実験法としては、まず4SU（4-チオウリジン）を細胞培地中に添加し、4SUによるラベル標識を行います。次にUVの照射を行い、RNA結合タンパクとRNAの間で架橋反応を起こします。その後、RBPと結合したリードの抽出を行い、サンプルとして用います。&lt;/p&gt;
&lt;p&gt;サンプルRNAを逆転写するときに、4SUがシトシン( C )に置換されます(misread)。そのため、リードがピークを形成し、かつT -&amp;gt; C置換が入っていた場合、RBPと結合していた可能性が高いということになります。これによりあるタンパクが、RNAのどの領域に結合するのか？結合領域間でどのような相互作用があるのかを知ることができます。特に一塩基という高い解像度での解析ができることが特徴です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2019/01/images/mockinbird_parclip_figs/hits-clip-clip-seq-ptb-seq.png"&gt;&lt;/p&gt;
&lt;h2&gt;Mockinbirdとは？&lt;/h2&gt;
&lt;p&gt;&lt;a href="//wwwuser.gwdg.de/~compbiol/mockinbird/doc/intro.html”"&gt;公式ドキュメント&lt;/a&gt;、&lt;a href="//github.com/soedinglab/mockinbird)”"&gt;GitHub&lt;/a&gt;に詳細は記載されていますが、日本語での情報が少ない、というか全くない。のでまとめていきたいと思います。&lt;/p&gt;
&lt;p&gt;PAR-CLIPの解析は生のFASTQデータから、Quality Check -&amp;gt; Trimming -&amp;gt; Mapping -&amp;gt; Downstream Analysisという流れで行いますが、それらすべての解析をMockinbirdでは一気に行ってくれます。また、MockinbirdModule（詳細は後述）を使うことでmock PAR-CLIP experimentを考慮に入れた解析を行うことができるのも大きな特徴です。&lt;/p&gt;
&lt;p&gt;このソフトでは、２つにパイプラインが分かれており、preprocessing phaseとpostprocessing phaseと呼ばれています。タンパク結合サイトの情報が書かれたテーブルを出力するまでが、preprocessing phaseでそれ以降のDownstream解析をpostprocessing phaseと呼んでいます。それぞれにYAMLファイルが用意されており、ユーザーはYAMLファイルで解析したいサンプルデータ、使いたいリファレンスデータ、使いたいモジュール（Mappingの時にSTARやBowtieを選べたりする。）閾値などのパラメータを指定します。最後にコマンドを一行実行するだけで、解析がすべて自動で流れていきます。あるモジュールで出力されたファイルのパスが次のモジュールに自動で設定されていくシステムになっているので、慣れると非常に便利です。&lt;/p&gt;
&lt;p&gt;ただ、ドキュメントでも、既存の解析手法に完全に取って代わるものではなく、PAR-CLIP実験のコンディションのトラブルシューティングを再現可能性が高い状態で行なったり、研究の最初の仮説づくりを短時間で行うために使ってもらうことが目的と書かれていました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2019/01/images/mockinbird_parclip_figs/library.png"&gt;&lt;/p&gt;
&lt;h2&gt;環境構築&lt;/h2&gt;
&lt;p&gt;前置きが長くなりましたが、実際に環境構築から進めていきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda create -n mockinbird -c bioconda -c conda-forge &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6 mockinbird
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Anacondaでmockinbirdという名前の仮想環境を作ります。mockinbirdが仮想環境にインストールされることになり、これにより、下記のライブラリとツールが環境内で使えるようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; activate mockinbird
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でmockinbirdの仮想環境を立ち上げ、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; deactivate mockinbird
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で仮想環境を閉じます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;conda remove --all -n mockinbird
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;で環境を削除します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/soedinglab/mockinbird.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;でgithubからクローンします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; mockinbird/mockinbird/data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とディレクトリを進めていくと、&lt;code&gt;preprocess.yaml&lt;/code&gt;, &lt;code&gt;postprocess.yaml&lt;/code&gt;というファイルがあります。基本はこの二つのYAMLファイルを調整していくことになります。terminalでコマンドを出すときも &lt;code&gt;mockinbird/mockinbird/data&lt;/code&gt;ディレクトリで実行するのが個人的にはおすすめです（ファイルの構成が綺麗になる。パスの調整も楽）。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wwwuser.gwdg.de/~compbiol/mockinbird/doc/getting_started.html#tutorial"&gt;Tutorialデータ&lt;/a&gt;がドキュメントの方に書かれていましたが、私が見たときはリンクがNotFoundになっていました。ので、私は&lt;a href="http://wwwuser.gwdg.de/~compbiol/mockinbird/doc/"&gt;公式ドキュメント&lt;/a&gt;や&lt;a href="https://github.com/soedinglab/mockinbird"&gt;GitHub&lt;/a&gt;を参考にYAMLファイルの調整などを行いました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;preprocess&lt;/code&gt;, &lt;code&gt;postprocess&lt;/code&gt;の実行のコードは以下のようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# mockinbird preprocess [parclip_fastq] [output_dir] [prefix] [config_file]&lt;/span&gt;
$ mockinbird preprocess nrd1.fastq nrd1 nrd1 preprocess.yaml

&lt;span class="c1"&gt;# mockinbird postprocess {{genomefasta}} {{output_dir}} {{output_dir}} {{script_dir}}&lt;/span&gt;
$ mockinbird postprocess nrd1 nrd1_pp postprocess.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ですが、コードの実行はYAMLの設定ができてからになります。ということでYAMLの中身について説明していきます。&lt;/p&gt;
&lt;h3&gt;preprocess.yaml&lt;/h3&gt;
&lt;p&gt;preprocess.yamlの４つの区画から構成されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;① 変数設定。&lt;/li&gt;
&lt;li&gt;② general. 必須情報の設定。&lt;/li&gt;
&lt;li&gt;③ reads. リードについての情報。&lt;/li&gt;
&lt;li&gt;④ pipeline. 使うモジュールと各引数の設定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;① 変数設定
下記のコードはドキュメントから引用していますが、モジュールで使う、ディレクトリの変数化と、mock_processing をFalseに設定しています。（ここ重要！）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set data_dir = &amp;quot;data&amp;quot; %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;

&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set genome_fasta = data_dir + &amp;quot;/genome.fa&amp;quot; %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set mock_pileup = data_dir + &amp;quot;/mock.mpileup&amp;quot; %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set mock_statistics = data_dir + &amp;quot;/mock_stat.json&amp;quot; %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set norm_pileup = data_dir + &amp;quot;/normalization.mpileup&amp;quot; %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set bowtie_index = data_dir + &amp;quot;/bowtie_index/genome&amp;quot; %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# setting mock_processing to True will only process the mock. Setting to `False` will run the full&lt;/span&gt;
&lt;span class="c1"&gt;# pipeline&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="nv"&gt;set mock_processing = False %&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;② general. 必須情報の設定
アダプター配列の指定、リファレンスデータの指定、UMI(Unique molecular identifiers)の有無、スレッド数の指定。&lt;/p&gt;
&lt;p&gt;③ reads. リードについての情報
リードの最短長、T -&amp;gt; C mutationの指定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;general&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;adapter5prime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;GTTCAGAGTTCTACAGTCCGACGATC&lt;/span&gt;
    &lt;span class="nt"&gt;adapter3prime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;TGGAATTCTCGGGTGCCAAGG&lt;/span&gt;
    &lt;span class="nt"&gt;genomefasta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;genome_fasta&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;normalization_pileup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;norm_pileup&lt;/span&gt; &lt;span class="p p-Indicator"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;rmTemp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;yes&lt;/span&gt;
    &lt;span class="nt"&gt;n_threads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;

&lt;span class="nt"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;bc_5prime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
    &lt;span class="nt"&gt;bc_3prime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0&lt;/span&gt;
    &lt;span class="nt"&gt;min_len&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;20&lt;/span&gt;
    &lt;span class="nt"&gt;reference_nucleotide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;T&lt;/span&gt;
    &lt;span class="nt"&gt;mutation_nucleotide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;C&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;④ pipeline. 使うモジュールと各引数の設定
クオリティチェック -&amp;gt; トリミング -&amp;gt; マッピング&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="x"&gt;pipeline:&lt;/span&gt;
&lt;span class="x"&gt;  - FastQCModule:&lt;/span&gt;
&lt;span class="x"&gt;      outdir_name: fastQC_raw&lt;/span&gt;

&lt;span class="x"&gt;  - UmiToolsExtractModule&lt;/span&gt;

&lt;span class="x"&gt;  - SkewerAdapterClippingModule&lt;/span&gt;

&lt;span class="x"&gt;  - ClippyAdapterClippingModule:&lt;/span&gt;
&lt;span class="x"&gt;      clipped_5prime_bc: True&lt;/span&gt;

&lt;span class="x"&gt;  - FastQCModule:&lt;/span&gt;
&lt;span class="x"&gt;      outdir_name: fastQC_clipped&lt;/span&gt;
&lt;span class="x"&gt;      genome_index: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;bowtie_index&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;  - BamPPModule:&lt;/span&gt;
&lt;span class="x"&gt;      remove_n_edge_mut: 2&lt;/span&gt;
&lt;span class="x"&gt;      max_mut_per_read: 1&lt;/span&gt;
&lt;span class="x"&gt;      min_mismatch_quality: 20&lt;/span&gt;

&lt;span class="x"&gt;  - SortIndexModule:&lt;/span&gt;
&lt;span class="x"&gt;     keep_all: yes&lt;/span&gt;

&lt;span class="x"&gt;  - UmiToolsDedupModule&lt;/span&gt;

&lt;span class="x"&gt;  - SortIndexModule:&lt;/span&gt;
&lt;span class="x"&gt;     keep_all: yes&lt;/span&gt;

&lt;span class="x"&gt;  - PileupModule:&lt;/span&gt;
&lt;span class="x"&gt;     keep_all: yes&lt;/span&gt;

&lt;span class="x"&gt;  - BamStatisticsModule&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;MockinbirdModuleを使うことでmock PAR-CLIP experimentを考慮に入れた解析ができますと、すでに書きましたが、Mock Experimentの結果をバックグラウンドとして処理して、PAR-CLIP Experimentの結果を出すことができます。&lt;/p&gt;
&lt;p&gt;具体的な方法としては、まず
&lt;code&gt;mock_processing = True&lt;/code&gt;とし、
&lt;code&gt;mockinbird preprocess nrd1_mock.fastq nrd1_mock nrd1_mock preprocess.yaml&lt;/code&gt;を実行します。これで&lt;code&gt;{% if not mock_processing %}&lt;/code&gt;までで解析がストップします。&lt;/p&gt;
&lt;p&gt;PileupModule, BamStatisticsModuleによって、Mock Experimentの.mpileupファイルと_stat.jsonファイルがそれぞれ生成されます。（この二つのファイルを次に使うことになります。）&lt;/p&gt;
&lt;p&gt;次に&lt;code&gt;mock_processing = False&lt;/code&gt;に戻し、
&lt;code&gt;$ mockinbird preprocess nrd1.fastq nrd1 nrd1 preprocess.yaml&lt;/code&gt;を実行します。すると下記のコードも一緒に実行されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;mock_processing&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    - PredictionSitesModule:&lt;/span&gt;
&lt;span class="x"&gt;        sites_file: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;data_dir&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/genome.sites&lt;/span&gt;
&lt;span class="x"&gt;        fasta_file: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;genome_fasta&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        transition_nucleotide: T&lt;/span&gt;

&lt;span class="x"&gt;    - MockTableModule:&lt;/span&gt;
&lt;span class="x"&gt;        mock_table: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;data_dir&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;/mock.table&lt;/span&gt;
&lt;span class="x"&gt;        mock_pileup: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mock_pileup&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="x"&gt;    - TransitionTableModule&lt;/span&gt;

&lt;span class="x"&gt;    - LearnMockModule:&lt;/span&gt;
&lt;span class="x"&gt;        mock_model: mock_model/model.pkl&lt;/span&gt;
&lt;span class="x"&gt;        mock_statistics: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mock_statistics&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        n_mixture_components: 5&lt;/span&gt;
&lt;span class="x"&gt;        em_iterations: 250&lt;/span&gt;

&lt;span class="x"&gt;    - MockinbirdModule&lt;/span&gt;

&lt;span class="x"&gt;    - NormalizationModule&lt;/span&gt;
&lt;span class="x"&gt;    - QuantileCapModule&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これによって、Mock Experimentの&lt;code&gt;.mpileupファイル&lt;/code&gt;と&lt;code&gt;_stat.jsonファイル&lt;/code&gt;を受け取りつつ、最終的なCLIP-seqのテーブルを作ることができ、preprocessは終了となります。下記のようなテーブルが出力され、これをもとにpostprocessに進んでいくことになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;seqid   position        transitions     coverage        score   strand  occupancy       posterior&lt;/span&gt;
&lt;span class="err"&gt;chrI    32601   4       4       6.352710158543762       -       0.15384615384615385     0.772109761967&lt;/span&gt;
&lt;span class="err"&gt;chrI    35562   4       5       5.292152965717071       +       0.0223463687150838      0.539841709238&lt;/span&gt;
&lt;span class="err"&gt;chrI    35805   5       5       9.376254703871467       +       0.03184713375796178     0.98585024515&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;長くなってしまったので、モジュールとpostprocessの説明は次回に回したいと思います。長い間お付き合いいただきありがとうございました。&lt;/p&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>Pythonで可視化入門</title><link href="/previews/refs/heads/system/preview_test/blog/2019/01/python_visualization.html" rel="alternate"></link><published>2019-01-18T00:00:00+09:00</published><updated>2019-01-18T00:00:00+09:00</updated><author><name>宮崎</name></author><id>tag:None,2019-01-18:/previews/refs/heads/system/preview_test/blog/2019/01/python_visualization.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Pythonでいい感じのグラフを書いてみたい！でも面倒！よくわからない！&lt;/p&gt;
&lt;p&gt;これを読めばそんなあなたも簡単にいい感じのグラフがかける！&lt;/p&gt;
&lt;p&gt;この記事では、Pythonのライブラリである、定番のmatplotlibとseaborn、pandasを使った可視化、インタラクティブなplotly、複数グラフ表示が簡単にできるラッパーであるholoviewsの簡単な解説をします。&lt;/p&gt;
&lt;h2&gt;Pythonの可視化ライブラリ&lt;/h2&gt;
&lt;h3&gt;matplotlib：&lt;u&gt;&lt;a href="https://seaborn.pydata.org/"&gt;https://matplotlib.org/&lt;/a&gt;&lt;/u&gt;(公式)&lt;/h3&gt;&lt;/h3&gt;
&lt;p&gt;定番のmatplotlibです。まずはギャラリー ( &lt;u&gt;&lt;a href="https://matplotlib.org/gallery/index.html"&gt;https://matplotlib.org/gallery/index.html&lt;/a&gt;&lt;/u&gt;)でいろいろなグラフを見てみましょう。グラフがたくさん並んでいて楽しいですね！&lt;/p&gt;
&lt;h3&gt;seaborn：&lt;u&gt;&lt;a href="https://seaborn.pydata.org/"&gt;https://seaborn.pydata.org/&lt;/a&gt;&lt;/u&gt;(公式)&lt;/h3&gt;&lt;/h3&gt;
&lt;p&gt;matplotlibをベースにしたseabornです。こちらもギャラリー(&lt;u&gt;&lt;a href="https://seaborn.pydata.org/examples/index.html"&gt;https://seaborn.pydata.org/examples/index.htm&lt;/a&gt;&lt;a href="https://seaborn.pydata.org/examples/index.html"&gt;l&lt;/a&gt;&lt;/u&gt;)を見てみましょう。ヒートマップがおしゃれですね！&lt;/p&gt;
&lt;h3&gt;pandas：&lt;u&gt;&lt;a href="https://pandas.pydata.org/index.html"&gt;https://pandas.pydata.org/index.html&lt;/a&gt;&lt;/u&gt;(公式)&lt;/h3&gt;&lt;/h3&gt;
&lt;p&gt;表計算で便利なpandasです。DataFrame形式のデータをpandas.DataFrame.plot(&lt;u&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/visualization.html"&gt;http://pandas.pydata.org/pandas-docs/stable/visualization.html&lt;/a&gt;&lt;/u&gt;)でグラフを書くのが一番手間がかからない気がします。bar(棒グラフ)やhistogramやscatter(散布図)を作るならこれで十分なことが多いです。DataFrameの.describe (&lt;u&gt;&lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html"&gt;https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.describe.html&lt;/a&gt;&lt;/u&gt;)で統計量が簡単に計算できるので、グラフがあっているかの確認も一連の流れでできます。&lt;/p&gt;
&lt;h3&gt;plotly：&lt;u&gt;&lt;a href="https://plot.ly/"&gt;https://plot.ly/&lt;/a&gt;&lt;/u&gt;(公式)&lt;/h3&gt;&lt;/h3&gt;
&lt;p&gt;インタラクティブに動かせるplotlyです。&lt;u&gt;&lt;a href="https://plot.ly/python/"&gt;https://plot.ly/python/&lt;/a&gt;&lt;/u&gt;(Python用) を見てみると、なんとグラフを動かせます！楽しい！Kaggleでもよく見ます。データ構造を調べるのに便利だからかもしれないですね。(例&lt;u&gt;&lt;a href="https://www.kaggle.com/andresionek/what-makes-a-kaggler-valuable?utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=Weekly-Kernel-Awards"&gt;https://www.kaggle.com/andresionek/what-makes-a-kaggler-valuable?utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=Weekly-Kernel-Awards&lt;/a&gt;&lt;/u&gt;) Dashと組み合わせると ( &lt;u&gt;&lt;a href="https://plot.ly/products/dash/"&gt;https://plot.ly/products/dash/&lt;/a&gt;&lt;/u&gt;) 簡単にWebアプリにできます。&lt;/p&gt;
&lt;h3&gt;holoview：&lt;u&gt;&lt;a href="http://holoviews.org/"&gt;http://holoviews.org/&lt;/a&gt;&lt;/u&gt;(公式)&lt;/h3&gt;&lt;/h3&gt;
&lt;p&gt;Pythonの可視化ツールはHoloViewsが標準になるかもしれない(&lt;u&gt;&lt;a href="https://qiita.com/driller/items/53be86cea3c3201e7e0f"&gt;https://qiita.com/driller/items/53be86cea3c3201e7e0f&lt;/a&gt;&lt;/u&gt;)とまで言われるholoviewは、matplotlibやplotly、bokehを簡単に使えるようにするラッパーです。特筆すべき機能として、introduction(&lt;u&gt;&lt;a href="http://holoviews.org/getting_started/Introduction.html"&gt;http://holoviews.org/getting_started/Introduction.html&lt;/a&gt;&lt;/u&gt;)をみるとわかるのですが、複数グラフ表示は足し算(例：&lt;code&gt;Compositional Layouts layout =scatter +hv.Histogram&lt;/code&gt;)、オーバーレイは掛け算(例：&lt;code&gt;Compositional Overlays image +image*points&lt;/code&gt;)で定義できとてもシンプルに書くことができます。&lt;/p&gt;
&lt;p&gt;可視化のまとめ(kaggle：&lt;u&gt;&lt;a href="https://www.kaggle.com/maheshdadhich/strength-of-visualization-python-visuals-tutorial"&gt;https://www.kaggle.com/maheshdadhich/strength-of-visualization-python-visuals-tutorial&lt;/a&gt;&lt;/u&gt;)もよくまとまっていて非常に勉強になります。&lt;/p&gt;
&lt;p&gt;そのほかにも、tensorflowの embedding &lt;u&gt;&lt;a href="https://www.tensorflow.org/guide/embedding"&gt;https://www.tensorflow.org/guide/embedding&lt;/a&gt;&lt;/u&gt;から Mnist や Word2Vecのデモ &lt;u&gt;&lt;a href="http://projector.tensorflow.org/"&gt;http://projector.tensorflow.org/&lt;/a&gt;&lt;/u&gt;(重いかも) や &lt;u&gt;&lt;a href="https://distill.pub/"&gt;https://distill.pub/&lt;/a&gt;&lt;/u&gt;も動かしてみると楽しいです！&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;holoview最強説(plotlyも使えるラッパーなので)&lt;/li&gt;
&lt;li&gt;楽にしたいならpandasのplot、動かしたければplotly！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;keywordでググると詳しい記事がたくさん出てきます。上記以外の可視化手法や面白いものあれば教えてください！&lt;/p&gt;</content><category term="Blog"></category><category term="Python"></category></entry><entry><title>Twitter自動投稿あれこれ</title><link href="/previews/refs/heads/system/preview_test/blog/2019/01/twitter_automation.html" rel="alternate"></link><published>2019-01-18T00:00:00+09:00</published><updated>2019-01-18T00:00:00+09:00</updated><author><name>川崎</name></author><id>tag:None,2019-01-18:/previews/refs/heads/system/preview_test/blog/2019/01/twitter_automation.html</id><summary type="html"></summary><content type="html">&lt;p&gt;突如TwitterのBotを作ってみたくなり試行錯誤した結果をまとめてみました。&lt;/p&gt;
&lt;h2&gt;きっかけ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;講義棟の音出し禁止時間を毎日6時に通知してくれるBOTが欲しい。&lt;/li&gt;
&lt;li&gt;幸い音出し禁止時間はネット上に記載されているので、毎日取得して呟くだけなら実装は簡単そう。&lt;/li&gt;
&lt;li&gt;何よりPython会の記事のネタになる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Twitter APIの取得&lt;/h2&gt;
&lt;p&gt;Botを作るにはAPI （アプリケーション・プログラミング・インタフェイス）が必要です。&lt;/p&gt;
&lt;p&gt;まあアカウント作ったら一発やろーと高を括っていたのですが、最近Twitter APIの使用申請が厳格化されたらしくなんだか不安。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.twitter.com/"&gt;https://developer.twitter.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;とりあえずここにアクセスし、利用登録を進めていきます。&lt;/p&gt;
&lt;p&gt;慣れない英語を読みすすめるとどうやら必要なのが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用用途を英語で入力(400字程度)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大学入試以来の英作文です。&lt;/p&gt;
&lt;p&gt;しかしそんな英語力は無いので適当に文章作ってGoogle翻訳(https://translate.google.co.jp/?hl=ja)にぶち込みます。小学生並みの文章が出来上がりました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.I decided to use the Twitter API to study programming.In order to know what many people are interested in, I would like to learn what kind of program to write. 2....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若干嘘が混じっている気もしますが気にしません。早速フォームに入力して送信しました。&lt;/p&gt;
&lt;p&gt;なお事前に調べた情報ではここでTwitter社からなかなか返信が返って来ず断念するケースが多いみたいです。緊張します。&lt;/p&gt;
&lt;p&gt;しかしドキドキする間もなく一瞬で申請が通りました。どうしてでしょうか。&lt;/p&gt;
&lt;p&gt;実は「chat bot」など自動化に関する単語が含まれていると検閲に引っかかりやすいらしく、婉曲表現を用いて危険なワードを巧みに回避していたのでした。下調べは大切ですね。&lt;/p&gt;
&lt;p&gt;晴れて使用権限を得たので早速使っていきます。BOT作成に必要な値は次の4つです。ログインすれば見ることができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;CONSUMER_KEY = &amp;quot;***********************************************&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;CONSUMER_SECRET = &amp;quot;********************************************&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;ACCESS_TOKEN = &amp;quot;**********************************************&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;ACCESS_TOKEN_SECRET = &amp;quot;******************************************&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上のようにしてconfig.pyとしてまとめておくと後々楽です。&lt;/p&gt;
&lt;h2&gt;書く&lt;/h2&gt;
&lt;p&gt;事前に&lt;code&gt;pip install requests&lt;/code&gt;と&lt;code&gt;pip install requests_oauthlib&lt;/code&gt;しておきます。&lt;/p&gt;
&lt;p&gt;先ほど取得した4つのKeyはconfig.pyとして同じ階層に忘れずに置いておきます。&lt;/p&gt;
&lt;p&gt;内容は1.取ってきて 2.整形して 3.ツイートする という流れです。シンプルですね。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;　&lt;span class="c1"&gt;#スクレイピング&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="c1"&gt;#jsonモジュールとconfig.pyの読み込み&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests_oauthlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OAuth1Session&lt;/span&gt; &lt;span class="c1"&gt;#OAuthのライブラリの読み込みURL = &amp;quot;hoge&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;UserAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;huga&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserAgent&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#HTML取得&lt;/span&gt;

&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# (中略)(HTMLから整形する作業)&lt;/span&gt;

&lt;span class="n"&gt;CK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_KEY&lt;/span&gt;
&lt;span class="n"&gt;CS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONSUMER_SECRET&lt;/span&gt;
&lt;span class="n"&gt;AT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;
&lt;span class="n"&gt;ATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;
&lt;span class="n"&gt;twitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OAuth1Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ATS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#認証処理&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://api.twitter.com/1.1/statuses/update.json&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;おはようッピ！&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;月&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;日(&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;)の音出し禁止時間をお知らせするッピ！&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;『&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;』&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;今日も一日がんばるッピ！！&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#post送信&lt;/span&gt;
&lt;span class="c1"&gt;#print(tweet) #テスト表示&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#成功した場合&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Success.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Failed. : &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;実行結果&lt;/h2&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2019/01/images/twitter_automation_figs/picture1.png"&gt;&lt;/p&gt;
&lt;p&gt;成功です。語尾は適当です。&lt;/p&gt;
&lt;p&gt;(この後自動投稿するまでの流れがありますが締め切りが来てしまったので一旦提出します。)&lt;/p&gt;</content><category term="Blog"></category><category term="Python"></category></entry><entry><title>【論文まとめ】医師国家試験問題自動生成AI</title><link href="/previews/refs/heads/system/preview_test/blog/2018/12/doctor_exam_ai.html" rel="alternate"></link><published>2018-12-20T00:00:00+09:00</published><updated>2018-12-20T00:00:00+09:00</updated><author><name>秋山</name></author><id>tag:None,2018-12-20:/previews/refs/heads/system/preview_test/blog/2018/12/doctor_exam_ai.html</id><summary type="html"></summary><content type="html">&lt;p&gt;以下の論文を軽く紹介。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shen S, Li Y, Du N, Wu X, Xie Y, Ge S, et al.  On the Generation of Medical Question-Answer Pairs. &lt;em&gt;arXiv&lt;/em&gt;. 2018.
&lt;a href="http://arxiv.org/abs/1811.00681"&gt;http://arxiv.org/abs/1811.00681&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;Tensent Mediacal AI lab Internからの論文。&lt;br&gt;
Deep learning技術により質問文に対して回答するAI (&lt;strong&gt;question answering, QA&lt;/strong&gt;)が発展している。しかし、QAを医療に応用するためにはAIを学習させるためのデータが不足している。そこで質問文と解答のペアを自動生成するモデルを提案した。&lt;/p&gt;
&lt;h2&gt;手法&lt;/h2&gt;
&lt;h3&gt;Key Phrase Detector&lt;/h3&gt;
&lt;p&gt;質問文の各フレーズが解答の決め手となるキーフレーズであるかを評価する。キーフレーズであるかどうかは特定の解答に対して高頻度で質問文に出現するフレーズがキーフレーズであるとしてdetectorを学習させる。例えば「日本脳炎」が解答である場合「項部硬直」などがキーフレーズとなる。&lt;/p&gt;
&lt;h3&gt;Conditional Variational Autoencoder (CVAE)&lt;/h3&gt;
&lt;p&gt;キーフレーズは維持しつつ、それ以外のフレーズを生成モデルCVAEによって言い換える。これによって答が同じな新たな質問文が作られる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/12/images/doctor_exam_ai_figs/doctor_exam_ai.png"&gt;&lt;/p&gt;
&lt;h2&gt;データ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;中国医師国家試験18,798問&lt;/li&gt;
&lt;li&gt;中国のWikipedia風医療サイト ([http://xywy.com/])&lt;/li&gt;
&lt;li&gt;医学辞書19冊&lt;/li&gt;
&lt;li&gt;医学論文2,130,128本&lt;/li&gt;
&lt;li&gt;医学専門書518冊&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;実験結果&lt;/h2&gt;
&lt;p&gt;アルゴリズムによる評価、人間による評価ともにベースラインを上回った。&lt;/p&gt;
&lt;h2&gt;読んだ感想&lt;/h2&gt;
&lt;p&gt;生成された問題文の例が載ってないのですごいのかよくわからなかった。データの量はすごい。&lt;/p&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>Pythonの変数と代入について</title><link href="/previews/refs/heads/system/preview_test/blog/2018/12/python_value.html" rel="alternate"></link><published>2018-12-20T00:00:00+09:00</published><updated>2018-12-20T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2018-12-20:/previews/refs/heads/system/preview_test/blog/2018/12/python_value.html</id><summary type="html"></summary><content type="html">&lt;p&gt;Pythonの変数、ふだん何気なく使っていますが、やっていることは実は結構複雑です。主にC/C++と対比しつつ簡単にまとめてみます。&lt;/p&gt;
&lt;p&gt;実際のところ、よく知らなくてもあまり影響がない場合が殆どです。が、複雑な操作を行ったり何か変数の挙動が不審な場合などは、思い出してみるのもよさそうです。&lt;/p&gt;
&lt;h2&gt;変数は参照である&lt;/h2&gt;
&lt;p&gt;一言でいえば表題の通り。
Pythonでの&lt;strong&gt;変数への代入とは、変数の参照するメモリ（インスタンス）を切り替えること&lt;/strong&gt;であり、&lt;strong&gt;メモリの内容を書き換えることではない&lt;/strong&gt;。これが多くの言語（C/C++など）と大きく違うところです。&lt;/p&gt;
&lt;h2&gt;変数の代入(1)&lt;/h2&gt;
&lt;p&gt;例えばこんなコード。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python3&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 1を出力&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C++で書き換えると、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// C++&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 1を出力&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;なのか？？
（#include\とかint main(void){...}とかは全部省略。）  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;実は違う&lt;/strong&gt;のです。&lt;br&gt;
C++の方では&lt;code&gt;a&lt;/code&gt;で表されるメモリ領域を一つ確保し、そこにまず&lt;code&gt;0&lt;/code&gt;をセット、次に&lt;code&gt;1&lt;/code&gt;を、&lt;strong&gt;同じメモリ領域を書き換えて&lt;/strong&gt;セットしています。  &lt;/p&gt;
&lt;p&gt;Pythonの方はそうではありません。まず&lt;code&gt;0&lt;/code&gt;の値を持つメモリ領域を確保し、&lt;strong&gt;変数&lt;code&gt;a&lt;/code&gt;がそこを指すように&lt;/strong&gt;します。次に&lt;code&gt;1&lt;/code&gt;の値を持つ&lt;strong&gt;別のメモリ領域を確保&lt;/strong&gt;し、変数&lt;code&gt;a&lt;/code&gt;がそこを指すように切り替えます。&lt;/p&gt;
&lt;p&gt;C++で無理矢理それっぽいものを書くと、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// C++&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 1を出力&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;のようになります。&lt;br&gt;
（C++に参照定数はあるが参照変数がないため、ポインタで書いた。）&lt;/p&gt;
&lt;p&gt;実はこのC++コード、2行目で確保した&lt;code&gt;int(0)&lt;/code&gt;メモリを3行目の&lt;code&gt;int(1)&lt;/code&gt;代入時に&lt;strong&gt;放棄&lt;/strong&gt;していて、&lt;strong&gt;メモリリーク&lt;/strong&gt;が起こっています。C++では、これを処理（メモリ解放）するためのコードを本当は書き加えないといけません。&lt;br&gt;
しかし、Pythonではそれを&lt;strong&gt;ガベージコレクタ&lt;/strong&gt;という仕組みが&lt;strong&gt;勝手に代行&lt;/strong&gt;してくれます。逆にこれがないと、Pythonではメモリリークが頻繁に起こって大変なことになります。&lt;/p&gt;
&lt;h2&gt;変数の代入(2)&lt;/h2&gt;
&lt;p&gt;問題です。次のコードは何を出力するでしょうか。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python3&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 何が出る？&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;答えは「&lt;code&gt;0&lt;/code&gt;」&lt;/strong&gt;です。&lt;br&gt;
C++で書いた似たようなコード、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// C++&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// 出力は「0」&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;も結果は同じなのですが、内部動作は全く異なります。&lt;strong&gt;Pythonでの変数代入は参照の切り替え&lt;/strong&gt;であることがやはりポイントです。&lt;/p&gt;
&lt;p&gt;一方で、過程は違えどPythonもC++も結果は変わりません。&lt;strong&gt;気にしなくても大抵はうまくいく&lt;/strong&gt;、というのも大事なところです(笑)。&lt;/p&gt;
&lt;h2&gt;関数引数はすべて参照渡し&lt;/h2&gt;
&lt;p&gt;「変数が全て参照」であることから、関数引数もまた&lt;strong&gt;参照渡し&lt;/strong&gt;となります。C/C++のデフォルトである&lt;strong&gt;値渡し&lt;/strong&gt;と異なり、メモリのコピーなどは行われません。&lt;/p&gt;
&lt;p&gt;では再び問題。次のコードは何を出力するでしょう？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# ここまで。このprint()は何を出力するか？0？1？&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;「参照渡し」を知っている人ほど、「1」と答えたくなりそうですが、、  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答えは「0」&lt;/strong&gt;です。何故か？&lt;br&gt;
&lt;code&gt;func(a)&lt;/code&gt;を呼び出した時点では、&lt;strong&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;x&lt;/code&gt;の指すメモリは同じ&lt;code&gt;0&lt;/code&gt;&lt;/strong&gt;ですが、&lt;code&gt;x = 1&lt;/code&gt;で&lt;code&gt;x&lt;/code&gt;の指すメモリは&lt;strong&gt;別に確保された&lt;code&gt;1&lt;/code&gt;&lt;/strong&gt;に切り替わります。&lt;strong&gt;&lt;code&gt;a&lt;/code&gt;および、&lt;code&gt;a&lt;/code&gt;の指す&lt;code&gt;0&lt;/code&gt;には何の変化も無い&lt;/strong&gt;のです。このあたりは前項の問題とほとんど同じです。&lt;/p&gt;
&lt;h2&gt;「変数への代入」ではない場合&lt;/h2&gt;
&lt;p&gt;例えばこんなとき。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python3&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# 出力は[2,1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3行目で&lt;code&gt;b&lt;/code&gt;と&lt;code&gt;a&lt;/code&gt;は同じリストを参照するようになります。4行目では、そのリスト（これも参照の列みたいなもの）の最初の成分を、&lt;code&gt;0&lt;/code&gt;でなく&lt;code&gt;2&lt;/code&gt;のメモリを参照するように切り替えます。全体として見れば&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;b&lt;/code&gt;が同じリストを参照していることに変わりはないので、この変更は&lt;code&gt;b&lt;/code&gt;にも反映されています。&lt;/p&gt;
&lt;p&gt;これは、前項の関数引数で若干の問題を引き起こします。&lt;br&gt;
次のコード、前項で見たものにそっくりですが、、、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python3&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;前項とは違い、この出力は「&lt;code&gt;1&lt;/code&gt;」&lt;/strong&gt;です。&lt;br&gt;
関数が呼び出されると&lt;strong&gt;&lt;code&gt;a&lt;/code&gt;と&lt;code&gt;x&lt;/code&gt;の指すリストは一貫して同じ&lt;/strong&gt;で、その一部が書き換えられるからです。これは&lt;strong&gt;リストでなくnumpy配列の場合もほぼ同じ&lt;/strong&gt;です。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;以上見てきたように、Pythonの変数は全て参照、関数引数は全て参照渡しです。これらが組み合わさると、結果的に全てを値渡しにした場合（C/C++）と殆ど違いが見えなくなり、あまり意識することなくプログラムを書けるようになっています。&lt;/p&gt;
&lt;p&gt;しかし、リストや配列（や、もっと複雑なクラスオブジェクトなど）のように部分的に書き換え可能なものを扱う場合などには、この違いはかなり重要になってきます。怪しいと思ったら、各変数が何を参照しているか、互いに同じか違うかなどを、その都度考えてみてください。&lt;/p&gt;
&lt;p&gt;ひとまず今回はここまで。おしまい。
※画像は&lt;a href="https://www.python.org/"&gt;公式&lt;/a&gt;のものです。&lt;/p&gt;</content><category term="Blog"></category><category term="Python"></category></entry><entry><title>Common Workflow Language入門</title><link href="/previews/refs/heads/system/preview_test/blog/2018/12/cwl.html" rel="alternate"></link><published>2018-12-07T00:00:00+09:00</published><updated>2018-12-07T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2018-12-07:/previews/refs/heads/system/preview_test/blog/2018/12/cwl.html</id><summary type="html"></summary><content type="html">&lt;p&gt;先日&lt;a href="https://github.com/manabuishii/workflow-meetup/wiki/20181126"&gt;workflow-meetup&lt;/a&gt;にお誘いを頂いて参加してきました。そこでThe Common Workflow Language(CWL)というものを習ったので忘れないうちに&lt;strong&gt;医学部生にもわかりやすく&lt;/strong&gt;まとめます。&lt;/p&gt;
&lt;h2&gt;CWLって？&lt;/h2&gt;
&lt;p&gt;&lt;img alt="cwl" src="https://github.com/common-workflow-language/cwl-website/blob/master/site/CWL-Logo-Header.png?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;一言で言うと、bioinformatics処理の自動化です。どういうことかもうちょっと詳しく見てみましょう。&lt;/p&gt;
&lt;p&gt;&amp;gt;ソフトウェアを組み合わせて構成される一連の作業手順 (ワークフロー) を記述するための仕組みや言語、GUI ソフトウェアは既に多く存在します。しかし、それらは特定の実行環境 (ハードウェア、ソフトウェア) に依存したものであり、異なる環境の間でワークフローを共有、再実行することは困難です。この問題を解決するために、異なるワークフロー実行ソフトウェア (実行エンジン) の間で共通してインポート/エクスポートできるフォーマットを目指して、Common Workflow Language (CWL) の開発が始まりました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pitagora-galaxy/cwl/wiki/CWL-Start-Guide-JP"&gt;素晴らしい日本語ドキュメント&lt;/a&gt;から取ってきました。要はbioinformaticsなど、複数のソフトの連携が必要な処理を自動化、共有がスムーズになるような仕組みです。ローカルでテストして、サーバーやクラウドに持っていくのも簡単です。最近はSangerやBroad Institute(ハーバードとMITの共同研究施設)などでも使われているとのことです。&lt;/p&gt;
&lt;p&gt;まずは&lt;strong&gt;&lt;a href="https://www.youtube.com/embed/86eY8xs-Vo8?cc_load_policy=1&amp;amp;cc_lang_pref=ja&amp;amp;autoplay=1"&gt;60秒でわかるCWL - youtube&lt;/a&gt;&lt;/strong&gt;をみてください。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.cwl&lt;/code&gt;で記述できるのはtoolとworkflowの二種類です。toolは例えばSTARやkallistoなど一つのツールを一つのcwlファイルに記述します。workflowはそれらのtoolをbindして実際のworkflowにします。更に、workflowをnestして新しいworkflowを作ったりも出来ます。&lt;/p&gt;
&lt;h2&gt;始め方&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/pitagora-galaxy/cwl/wiki/CWL-Start-Guide-JP"&gt;素晴らしい日本語ドキュメント&lt;/a&gt;を読みましょう。10分もあれば読めると思います。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/13K6BKQoimiaOIFSnComw8in3HlCxEm820OASP8_jnDI/edit?usp=sharing"&gt;cwl-intro-gui-workshop スライド&lt;/a&gt;をやってみましょう。1時間ほどです。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.commonwl.org/user_guide/"&gt;user guide&lt;/a&gt;をやりましょう。3時間ほどで終わるように設計されています。(理論値)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;CWLのここがすごい&lt;/h2&gt;
&lt;p&gt;入門は各サイトにお任せするとして、今回は私がCWLをさわってみてすごいと思ったところをまとめてみます。素人目線です。&lt;/p&gt;
&lt;h3&gt;rabix composerのGUIがきれいすぎる&lt;/h3&gt;
&lt;p&gt;&lt;img alt="rabix gif" src="https://github.com/rabix/composer/raw/master/doc/images/workflows.gif"&gt;&lt;/p&gt;
&lt;p&gt;画像はbioinformaticsでお馴染みのSTARをrabix composerで操っているところです。&lt;a href="http://rabix.io/"&gt;rabix composer&lt;/a&gt;を使えば、GUIで直感的にCWLが触れます。更に出来たworkflowをクラウドやサーバーにそのまま持っていってCLI越しに使うことが出来ます。&lt;/p&gt;
&lt;h3&gt;dockerをベースにして完全にreproducibleにできる&lt;/h3&gt;
&lt;p&gt;いかにも今どきなのですが、toolの記述はすべてdockerのコンテナを使って記述することが出来ます。つまり、環境が変わってインストールし直す手間がまったく無いということです。すばらしいですね。さらに&lt;code&gt;--user-space-docker-cmd=udocker&lt;/code&gt;というオプション一つで、udockerというUser権限しか無い環境でも使えるdockerを使って動かすことができるようです。&lt;/p&gt;
&lt;h3&gt;すでにいろいろなソフトのcwlが出来ている&lt;/h3&gt;
&lt;p&gt;Communityで管理されている&lt;a href="https://github.com/common-workflow-language/workflows"&gt;CWL Tools &amp;amp; Workflows&lt;/a&gt;があります。ほかにもDBCLS太田さんの管理されている&lt;a href="https://github.com/pitagora-galaxy/cwl"&gt;Pitagora Workflows in CWL&lt;/a&gt;もいろいろ揃っています。&lt;/p&gt;
&lt;h3&gt;cwltoolの安定感がすごい&lt;/h3&gt;
&lt;p&gt;出来たcwlファイルをCLI環境で使うにはcwltoolを使います。感動したのはヘルプが自動で生成されるところ。しかも、pythonで書かれていてpythonに組み込むことも出来ます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cwltool.factory&lt;/span&gt;
&lt;span class="n"&gt;fac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cwltool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;echo.cwl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# result[&amp;quot;out&amp;quot;] == &amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;日本人contributerが多い&lt;/h3&gt;
&lt;p&gt;困ったときに助けてくれるやさしいcontributerの方々が日本に何人かいます。また、日本語ドキュメントも多くてとても助かります。更に、開発者の&lt;a href="https://twitter.com/biocrusoe"&gt;Michael R. Crusoe&lt;/a&gt;は来日しており、&lt;a href="https://twitter.com/hashtag/CommonWLjp?src=hash"&gt;#CommonWLjp&lt;/a&gt;などでCWLの輪を広げています。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;On my way to the 11th &lt;a href="https://twitter.com/NBDC_info?ref_src=twsrc%5Etfw"&gt;@NBDC_info&lt;/a&gt; / &lt;a href="https://twitter.com/dbcls?ref_src=twsrc%5Etfw"&gt;@dbcls&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/biohack18?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#biohack18&lt;/a&gt; (with a week long stop in Tokyo for &lt;a href="https://twitter.com/hashtag/usegalaxyjp?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#usegalaxyjp&lt;/a&gt; meeting and other &lt;a href="https://twitter.com/hashtag/CommonWL?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#CommonWL&lt;/a&gt; presentations and a bilingual workshop) &lt;a href="https://t.co/W4gsO9bnA1"&gt;pic.twitter.com/W4gsO9bnA1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Michael R. Crusoe (@biocrusoe) &lt;a href="https://twitter.com/biocrusoe/status/1069104245100748801?ref_src=twsrc%5Etfw"&gt;2018年12月2日&lt;/a&gt;&lt;/blockquote&gt;

&lt;h2&gt;kallistoをCWL + Rabix Composerで試してみる&lt;/h2&gt;
&lt;p&gt;まずは実際の作業工程を見てみましょう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="gif" src="https://github.com/yyoshiaki/cwl_user_guide/blob/master/kallisto/kallisto.gif?raw=true"&gt;&lt;/p&gt;
&lt;p&gt;ちゃんとkallistoのoutputが生成されていますね！データは&lt;a href="https://github.com/yyoshiaki/cwl_user_guide/tree/master/kallisto"&gt;github&lt;/a&gt;にまとめておきました。テスト用のシーケンスデータも付けてあるので、クローンして遊んでみてください。&lt;code&gt;kallisto-index.cwl&lt;/code&gt;と&lt;code&gt;kallisto-quant.cwl&lt;/code&gt;は公式の&lt;a href="https://github.com/common-workflow-language/workflows"&gt;CWL Tools &amp;amp; Workflows&lt;/a&gt;から取ってきました。もちろんこれらはdocker imageを使っています。新しいworkflowを作ってみましょう。動画のように直感的にできると思います。&lt;/p&gt;
&lt;p&gt;今回、errorが出て進まなかった場所があったのですが、石井さん、西田さんの応援や、cwlの作者のMichaelやRabixの作者のKaushikがerrorに対処してくれました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/rabix/composer/issues/418#issuecomment-444257454"&gt;issue : kallisto workflow is incompatible with Rabix composer #418&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この対応のフレンドリーさはbioinformaticsならではですね。&lt;/p&gt;
&lt;h2&gt;workflow業界のあれこれ&lt;/h2&gt;
&lt;p&gt;ここで一旦workflowについて広く見てみましょう。ハーバードを始めとする海外の研究所ではサーバーを研究所ごとに管理するのに変えて、クラウドの利用が盛んになってきています。そういう時代感もあり、workflowやコンテナなど、reproducibleな環境の整備というのはますます重要視されてきています。workflow業界ではcwlの他に古き良き&lt;a href="http://wiki.pitagora-galaxy.org/wiki/index.php/Workflows"&gt;Galaxy&lt;/a&gt;、Broad Instituteが開発している&lt;a href="https://software.broadinstitute.org/wdl/"&gt;WDL&lt;/a&gt;や&lt;a href="https://www.nextflow.io/"&gt;nextflow&lt;/a&gt;、Pythonで書かれている&lt;a href="https://snakemake.readthedocs.io/en/stable/"&gt;Snakemake&lt;/a&gt;など、さまざまな選択肢があります。どのworkflowが好きか、Cambridgeの&lt;a href="https://twitter.com/@AlbertVilella"&gt;@AlbertVilella&lt;/a&gt;が世界中のbioinformaticianにアンケートをとっていました。&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;90 responses in &lt;a href="https://t.co/hbaY7ShocR"&gt;https://t.co/hbaY7ShocR&lt;/a&gt; &lt;a href="https://twitter.com/nextflowio?ref_src=twsrc%5Etfw"&gt;@nextflowio&lt;/a&gt; &lt;a href="https://twitter.com/SBGenomics?ref_src=twsrc%5Etfw"&gt;@SBGenomics&lt;/a&gt; &lt;a href="https://twitter.com/commonwl?ref_src=twsrc%5Etfw"&gt;@commonwl&lt;/a&gt; Snamemake &lt;a href="https://t.co/1kc1DaXdBa"&gt;pic.twitter.com/1kc1DaXdBa&lt;/a&gt;&lt;/p&gt;&amp;mdash; Albert Vilella (@AlbertVilella) &lt;a href="https://twitter.com/AlbertVilella/status/1070219898306084865?ref_src=twsrc%5Etfw"&gt;2018年12月5日&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;&lt;p lang="en" dir="ltr"&gt;No votes so far for &lt;a href="https://twitter.com/ensembl?ref_src=twsrc%5Etfw"&gt;@ensembl&lt;/a&gt; Hive, Apache Taverna or &lt;a href="https://twitter.com/arvados?ref_src=twsrc%5Etfw"&gt;@arvados&lt;/a&gt; , even though we know they have plenty of users &lt;a href="https://t.co/Db2el8vPDt"&gt;https://t.co/Db2el8vPDt&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Bioinformatics?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Bioinformatics&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Workflows?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Workflows&lt;/a&gt; &lt;a href="https://t.co/hbaY7ShocR"&gt;https://t.co/hbaY7ShocR&lt;/a&gt;&lt;/p&gt;&amp;mdash; Albert Vilella (@AlbertVilella) &lt;a href="https://twitter.com/AlbertVilella/status/1070579264192462849?ref_src=twsrc%5Etfw"&gt;2018年12月6日&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;どうやら一番twitter界隈のbioinformaticianはnextflowが好きなようです。ただ、下のspreadsheetを見ると、githubではGalaxy,bcbioについで三番目に盛んなようです。&lt;/p&gt;
&lt;p&gt;他にも、cwlやnextflowを取り上げたgenome解析の論文も出ていたりします。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-018-2446-1"&gt;Baichoo, S. et al. Developing reproducible bioinformatics analysis workflows for heterogeneous computing environments to support African genomics. BMC Bioinformatics 19, 457 (2018).&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;結論　みんなでCWLを使おう！&lt;/h2&gt;
&lt;p&gt;医学部生にできるだけわかりやすく書いてみました。みんなでcwlを使ってどんどん解析を楽にしましょう！&lt;/p&gt;
&lt;p&gt;国試も自動化できたらなあ。。。&lt;/p&gt;
&lt;h2&gt;参考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.commonwl.org/"&gt;CWL公式ページ&lt;/a&gt; : リンク集がついている。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/13K6BKQoimiaOIFSnComw8in3HlCxEm820OASP8_jnDI/edit?usp=sharing"&gt;cwl-intro-gui-workshop スライド&lt;/a&gt; : 二階堂研石井さんのスライド。わかりやすいです。&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>PythonとKerasでどうぶつしょうぎ</title><link href="/previews/refs/heads/system/preview_test/blog/2018/12/animalshogi.html" rel="alternate"></link><published>2018-12-06T00:00:00+09:00</published><updated>2018-12-06T00:00:00+09:00</updated><author><name>小川</name></author><id>tag:None,2018-12-06:/previews/refs/heads/system/preview_test/blog/2018/12/animalshogi.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;「どうぶつしょうぎ」&lt;/strong&gt; というゲームをご存知でしょうか。（&lt;a href="https://ja.wikipedia.org/wiki/どうぶつしょうぎ"&gt;wikipediaの解説&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;普及・教育用のミニ将棋として考案されたもので、本将棋が盤9x9、駒8種のところを盤3x4、駒4種までコンパクトにしたものです。&lt;br&gt;
駒の名前もひよこ（歩）、ぞう（弱い角）、きりん（弱い飛車）、ライオン（玉）、にわとり（ひよこの成り駒＝と金）、のように、かわいいです。&lt;br&gt;
駒に描かれているイラストも、大変、かわいいです。  &lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/12/images/animalshogi_figs/1024px-doubutsu-shogi.jpg"&gt;&lt;/p&gt;
&lt;p&gt;ゲーム空間の規模がそこそこ小さいため、すでに随分前に&lt;a href="https://www.tanaka.ecc.u-tokyo.ac.jp/ktanaka/dobutsushogi/"&gt;完全解析もされています&lt;/a&gt;。
双方最善を尽くすと78手まで後手勝ち、だそうです。&lt;/p&gt;
&lt;p&gt;今回は、&lt;a href="https://www.nature.com/articles/nature16961"&gt;AlphaGo&lt;/a&gt;
(&lt;a href="https://www.nature.com/articles/nature24270"&gt;Zero&lt;/a&gt;)
を部分的に真似した深層強化学習で、PythonとKeras（初心者向けの深層学習フレームワーク）を使い、&lt;strong&gt;どうぶつしょうぎをプレイするプログラム&lt;/strong&gt; を作ってみました。&lt;br&gt;
ひとまず先読みは無しで、目の前の局面に対して直感的に手を選び、そこそこ強いもの、を目指します。&lt;/p&gt;
&lt;p&gt;今更な話題で研究としての価値はほぼないと思いますが、ただ論文を読むだけよりも実際に手を動かしてみると、色々とわかることもあるものです。  （たぶん。）&lt;/p&gt;
&lt;h2&gt;つくりかた概要&lt;/h2&gt;
&lt;p&gt;「プレイするプログラム」と大層なことを書きましたが、核心部分は「与えられた局面に対して次の指し手を返す」、これだけです。&lt;br&gt;
この部分を、深層ニューラルネットワーク「だけ」で作ります。  &lt;/p&gt;
&lt;p&gt;実はこれ、&lt;strong&gt;画像カテゴリ認識と殆ど同じ&lt;/strong&gt; です。
例えば手書き数字認識と対比すると、数字画像の代わりに局面データ、0-9の代わりに何番目の指し手か、が対応します。&lt;br&gt;
入力として局面を与え、各指し手のスコア（指す確率）を出力する、順伝搬型の深層ネットワークを作ればいいわけです。&lt;/p&gt;
&lt;h2&gt;ネットワーク構成&lt;/h2&gt;
&lt;h3&gt;入力：盤面と持駒の表現&lt;/h3&gt;
&lt;p&gt;どうぶつしょうぎの盤面は3x4。各マスを考えるとそれぞれ11通りの状態がありえます。
（駒が成駒含めて5種類、自分と相手の駒があり、空白マスとあわせて5x2+1=11です。）&lt;br&gt;
なので、盤面はサイズ(3,4,11)の3次元整数配列として与えましょう。
各マスで11チャネルのうち1つだけが1、残りは0をとるようにします。&lt;/p&gt;
&lt;p&gt;次に持駒ですが、持駒になるのはひよこ、ぞう、きりんの3種のみ。各最大2枚。&lt;br&gt;
こちらは(2,3,2)の3次元配列とします。次元は順に、自分か相手か、駒の種類、持駒の1枚目または2枚目、を表し、値はいずれも0または1です。&lt;/p&gt;
&lt;p&gt;入力は合わせて144ノード。ちょっと冗長すぎる気はしますが、ひとまず気にせず進めましょう。&lt;/p&gt;
&lt;h3&gt;出力：可能な指し手を網羅する&lt;/h3&gt;
&lt;p&gt;どうぶつしょうぎの指し手は、(1)駒の移動、(2)駒打ち、の2種類があります。&lt;br&gt;
これらは任意の局面に対して、&lt;br&gt;
(1)「動かす駒の位置」「移動後の位置」「成るか、成らないか」&lt;br&gt;
(2)「打つ駒の種類」「打つ位置」&lt;br&gt;
を与えると一意に決められます。&lt;br&gt;
一番強い駒であるライオンでも、盤の端から端まで一手で移動などはできないため、(1)には制限があります。実際に合法でありうる動きは61通り。(2)は単純に、打てる駒3種（ひよこ、ぞう、きりん）と打ち場所3x4で36通り。&lt;br&gt;
合わせて&lt;strong&gt;合法手の可能性は97通り&lt;/strong&gt;です。
ですからネットワークは、&lt;strong&gt;97ノードのソフトマックスを出力とすればよい&lt;/strong&gt; ことになります。&lt;/p&gt;
&lt;h3&gt;今回使ったネットワーク&lt;/h3&gt;
&lt;p&gt;入力と出力が決まったので、あとは工夫しだい。
今回は適当に、こんなネットワークでやってみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;Layer (type)                     Output Shape          Param #     Connected to                     &lt;/span&gt;
&lt;span class="err"&gt;====================================================================================================&lt;/span&gt;
&lt;span class="err"&gt;input_1 (InputLayer)             (None, 3, 4, 11)      0                                            &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;input_2 (InputLayer)            (None, 2, 3, 2)       0                                            &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;flatten_1 (Flatten)              (None, 132)           0           input_1[0][0]                    &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;flatten_2 (Flatten)             (None, 12)            0           input_2[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;concatenate_1 (Concatenate)      (None, 144)           0           flatten_1[0][0]                  &lt;/span&gt;
&lt;span class="err"&gt;                                                                   flatten_2[0][0]                 &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_1 (Dense)                 (None, 128)           18560       concatenate_1[0][0]              &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_2 (Dense)                 (None, 128)           16512       dense_1[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_3 (Dense)                 (None, 128)           16512       dense_2[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_4 (Dense)                 (None, 128)           16512       dense_3[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_5 (Dense)                 (None, 128)           16512       dense_4[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_6 (Dense)                 (None, 128)           16512       dense_5[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;span class="err"&gt;dense_7 (Dense)                 (None, 97)            12513       dense_6[0][0]                   &lt;/span&gt;
&lt;span class="err"&gt;====================================================================================================&lt;/span&gt;
&lt;span class="err"&gt;Total params: 113,633&lt;/span&gt;
&lt;span class="err"&gt;Trainable params: 113,633&lt;/span&gt;
&lt;span class="err"&gt;Non-trainable params: 0&lt;/span&gt;
&lt;span class="err"&gt;____________________________________________________________________________________________________&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;input_1とinput_2がそれぞれ盤面と持駒の入力です。中間層6層、活性化関数は途中全てReLU、最後はsoftmax。パラメータ数は11万余り。&lt;br&gt;
盤が小さいので、畳み込みも使わず全て全結合にしています。本将棋に拡張する場合は、畳み込みを使った方がいいでしょう。&lt;/p&gt;
&lt;h2&gt;強化学習：自己対戦と指し手評価&lt;/h2&gt;
&lt;p&gt;さて、ようやく本番の学習。基本は、自己対戦の結果による指し手評価です。&lt;/p&gt;
&lt;p&gt;そのためには、&lt;strong&gt;審判・履歴機能付きのどうぶつしょうぎ盤セット&lt;/strong&gt; をPythonのクラスとして実装することが必要です。実は全体の中でここが一番面倒なのですが、別に面白くはないので割愛。数時間頑張れば、動くものは作れます。そう、Pythonならね。&lt;/p&gt;
&lt;p&gt;自己対戦学習は多少試行錯誤して、いくつか工夫しました。これが良いかはよくわかりませんが。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初期配置からいきなり自己対戦するのではなく、勝負がつかない範囲でランダムに数手〜数十手進めた局面から開始。&lt;/li&gt;
&lt;li&gt;出力中の反則手は無視し、合法手の中で、スコアに比例した確率で指す。&lt;/li&gt;
&lt;li&gt;自己対戦の終局後、勝者側の指し手全てを教師信号としてネットワークを学習する。&lt;/li&gt;
&lt;li&gt;敗者側の指し手は無視し、減点しない。また反則スコアが高くても減点しない。&lt;br&gt;
  （褒めて伸ばす。初期局面が敗勢だとどうしようもないから、という理由もあり。）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は2^17局の自己対戦を行い、終局ごとに学習させました。1局あたりの平均手数は20手、このうち勝者側のみを学習するので、延べ130万局面程度を学習したことになります。&lt;br&gt;
計算は全てノートPC上で行い、計算時間は45分程度でした。&lt;/p&gt;
&lt;h2&gt;学習結果&lt;/h2&gt;
&lt;h3&gt;ルールの習得&lt;/h3&gt;
&lt;p&gt;まず、学習したネットワークはどうぶつしょうぎのルール（合法手の規則）をどれくらい学んでいるのか？を検証してみます。&lt;br&gt;
ランダムに指して生成した局面で、ルールの制限を外して自由に指させてみたところ、じつに &lt;strong&gt;合法手が98.7%&lt;/strong&gt; となりました。1.3%の指し手が反則です。&lt;br&gt;
これら局面での合法手は、平均して局面あたり6.5手程度しかありません。97手からランダムに指せば殆どが反則、合法手は7%にも満たないはず。&lt;br&gt;
ルールについてはかなり良く習得してきていることがわかります。&lt;/p&gt;
&lt;h3&gt;どれくらい強い？&lt;/h3&gt;
&lt;p&gt;自分で対戦してみたいところなのですが、インターフェースを作っていないのと客観性のため、学習前のランダムなネットワークと対戦させてみます。揺らぎが1%程度未満になるように、2^14局連続で対戦。先手後手はランダムです。  &lt;/p&gt;
&lt;p&gt;結果は、、、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;勝率 53% !!!!!!&lt;/strong&gt; (´･ω･`)&lt;/p&gt;
&lt;p&gt;んと、、、まず、この数字は十分に有意であるといえます（ｷﾘｯ）。&lt;br&gt;
ランダムに指すのと比べて、確実に強いです。&lt;br&gt;
しかし、、この程度では、まだ人間と勝負できるレベルでないことも明らかでしょう。&lt;/p&gt;
&lt;p&gt;原因についてはネットワーク設計に問題がある可能性もありますが、おそらく学習量が全然足りないのだと思われます。&lt;br&gt;
強化学習の成長はゆっくりで、少しづつ高度な好手を順番に見出していく必要があります。  &lt;/p&gt;
&lt;p&gt;例えばまず最初に、ライオンが取れるときは取るのが好手だ、ということを学ぶ。すると、駒が多いとライオンを取れる機会も増えるので、駒を取るのがいいことを学ぶ。多分まだ、最初の段階の途中くらいと想像できます。&lt;br&gt;
そういうことを考えると、130万局面を評価した段階での勝率53%は、それなりに納得できる数字かもしれません。&lt;/p&gt;
&lt;p&gt;今回はノートPC上で1時間足らずの学習なので、また時間ができたらもっと大規模にやってみたいと思います。
自己対戦部分をCythonで高速化して、GPUサーバ上で学習するとか。&lt;/p&gt;
&lt;p&gt;ひとまず今回はここまで。おしまい。&lt;/p&gt;
&lt;h3&gt;追記1&lt;/h3&gt;
&lt;p&gt;強化学習をさらに2倍、総計2&lt;sup&gt;18&lt;/sup&gt;局の自己対戦まで行わせたところ、合法手率86.0%、学習前ネットワークに対する勝率51.7%までそれぞれ暴落。何が起こっているのか、やっぱりよくわかりません。学習方法をもう少し検討するとか、あとはやはりもっと計算資源を投入する必要はありそうですかね。&lt;/p&gt;
&lt;h3&gt;追記2&lt;/h3&gt;
&lt;p&gt;強化学習の方法についてですが、碁と将棋の違いとして、特に棋力が低い場合、将棋では終盤（終局間際）の指し手が勝敗に圧倒的に重要、ということがあるかもしれません。&lt;br&gt;
今の場合、最初はライオン取りを学ぶことが必要なのですが、最後にライオンを取るまでにライオン取りを見逃した手なども教師信号になってしまいます。&lt;br&gt;
最初は最終手だけ学ぶなどと人為的に重みをいじった方が、今のレベルでは良い結果が出るかも。王道は、マシンパワーの力尽くなのでしょうが。。&lt;/p&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>Gene Set Enrichment Analysis (GSEA)入門</title><link href="/previews/refs/heads/system/preview_test/blog/2018/11/gsea.html" rel="alternate"></link><published>2018-11-27T00:00:00+09:00</published><updated>2018-11-27T00:00:00+09:00</updated><author><name>西田</name></author><id>tag:None,2018-11-27:/previews/refs/heads/system/preview_test/blog/2018/11/gsea.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;GSEAとは&lt;/h2&gt;
&lt;p&gt;GSEAは発現差異解析の結果などで得られる遺伝子群がどういった機能のものかを明らかにするために用いられる解析手法です。機能表現として用いられる主なものとしてはKEGGのパスウェイ分類やGene Ontology(GO)があります。&lt;/p&gt;
&lt;h2&gt;clusterProfilerでGSEA入門&lt;/h2&gt;
&lt;p&gt;GSEA には様々なGSEAがあります。単に注目する遺伝子のリストをGSEAへの入力とするもの、発現プロファイルを入力とするもの、機能のデータベースやGSEA手法を複数組み合わせたりするもの (EGSEA) など様々です。[余談ですがGeneを代謝物(Metabolite)に置き換えたMSEAもあります。]&lt;/p&gt;
&lt;p&gt;ここでは前述したものの内、最初の「単に注目する遺伝子のリストをGSEAへの入力とするもの」をbioconductorのパッケージ clusterProfiler を用いて体験してみましょう。&lt;/p&gt;
&lt;p&gt;(clusterProfilerのインストールについては省略します。)&lt;/p&gt;
&lt;p&gt;まず注目する遺伝子のリストを下記で用意します。&lt;/p&gt;
&lt;p&gt;※編集注 : 以下はすべてRでの実行になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geneList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DOSE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gene&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geneList&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nf"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;geneList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;gene&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4312&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;8318&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10874&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;55143&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;55388&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;991&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;6280&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;2305&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9493&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1062&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3868&amp;quot;&lt;/span&gt;  
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4605&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9833&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9133&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;6279&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10403&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;8685&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;597&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;7153&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;23397&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;6278&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;79733&amp;quot;&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;259266&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1381&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3627&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;27074&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;6241&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;55165&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;9787&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;7368&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;11065&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;55355&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;9582&amp;quot;&lt;/span&gt;  
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;220134&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;55872&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;51203&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;3669&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;83461&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;22974&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;10460&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;10563&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4751&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;6373&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;8140&amp;quot;&lt;/span&gt;  
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;79019&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;820&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;10635&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;1844&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;4283&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;27299&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;55839&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;27338&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;890&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;9415&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;983&amp;quot;&lt;/span&gt;   
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;54821&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;10232&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4085&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;6362&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9837&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5080&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;7850&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;81930&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;5918&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;81620&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;332&amp;quot;&lt;/span&gt;   
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;67&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;55765&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;79605&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;3832&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;6286&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5163&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;2146&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3002&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;50852&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;7272&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;2568&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;64151&amp;quot;&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;78&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;51806&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;366&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;2842&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9212&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;140578&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;51659&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;8715&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;4902&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;8208&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1111&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9319&amp;quot;&lt;/span&gt;  
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;89&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;9055&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3833&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;146909&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;23475&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4321&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;11182&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;10112&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;3902&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3620&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3887&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;51514&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6790&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;4521&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;891&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;57110&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;8544&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1448&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;24137&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;6355&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10578&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4174&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9232&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;111&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;643314&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1307&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;776&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;4129&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;9370&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;196740&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;25924&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;8857&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1602&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;51161&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;3708&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;122&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;23090&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;10742&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;51760&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;9122&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10699&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;8416&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;60598&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;79148&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;64799&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4629&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1556&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;133&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;55096&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;26289&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;6038&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;771&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;51313&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;23704&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;3117&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;80129&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;23158&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;125&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;4958&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;144&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4857&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1311&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5105&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5174&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;730&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;2018&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;81563&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;2532&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1308&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;4250&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;23362&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;155&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2167&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;51705&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;2593&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;652&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;80736&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4036&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;57502&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;5507&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;56521&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;22885&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4137&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;166&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;8483&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;8839&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;2066&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;4693&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;4148&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;79083&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;1101&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3158&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;3169&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5346&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;1408&amp;quot;&lt;/span&gt;  
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;177&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;9547&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;2922&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;11283&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;64499&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;54829&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;1524&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10234&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;1580&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10647&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;25893&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;24141&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;188&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;10351&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;2330&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5304&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;79846&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;8614&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;2625&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;7021&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;7802&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;79689&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;11122&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;55351&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;199&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;9&amp;quot;&lt;/span&gt;      &lt;span class="s"&gt;&amp;quot;4239&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;5241&amp;quot;&lt;/span&gt;   &lt;span class="s"&gt;&amp;quot;10551&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;10974&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;79838&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;79901&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;57758&amp;quot;&lt;/span&gt;  &lt;span class="s"&gt;&amp;quot;4969&amp;quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gene&lt;/code&gt;はヒト遺伝子のENTREZのIDです。&lt;/p&gt;
&lt;p&gt;この遺伝子リストを入力としてKEGGを対象としたGSEAを行ってみましょう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clusterProfiler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;kk&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;enrichKEGG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gene&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;                  &lt;span class="n"&gt;organism&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hsa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;                  &lt;span class="n"&gt;pvalueCutoff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;ID&lt;/span&gt;                             &lt;span class="n"&gt;Description&lt;/span&gt; &lt;span class="n"&gt;GeneRatio&lt;/span&gt;  &lt;span class="n"&gt;BgRatio&lt;/span&gt;       &lt;span class="n"&gt;pvalue&lt;/span&gt;     &lt;span class="n"&gt;p.adjust&lt;/span&gt;       &lt;span class="n"&gt;qvalue&lt;/span&gt;                                             &lt;span class="n"&gt;geneID&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt;
&lt;span class="n"&gt;hsa04110&lt;/span&gt; &lt;span class="n"&gt;hsa04110&lt;/span&gt;                              &lt;span class="n"&gt;Cell&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;     &lt;span class="m"&gt;11&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt; &lt;span class="m"&gt;123&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;7469&lt;/span&gt; &lt;span class="m"&gt;2.135411e-07&lt;/span&gt; &lt;span class="m"&gt;0.0000409999&lt;/span&gt; &lt;span class="m"&gt;4.023565e-05&lt;/span&gt; &lt;span class="m"&gt;8318&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;991&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9133&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;890&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;983&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4085&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;7272&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;891&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4174&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9232&lt;/span&gt;    &lt;span class="m"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;hsa04114&lt;/span&gt; &lt;span class="n"&gt;hsa04114&lt;/span&gt;                          &lt;span class="n"&gt;Oocyte&lt;/span&gt; &lt;span class="n"&gt;meiosis&lt;/span&gt;     &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;7469&lt;/span&gt; &lt;span class="m"&gt;2.216832e-06&lt;/span&gt; &lt;span class="m"&gt;0.0002128158&lt;/span&gt; &lt;span class="m"&gt;2.088489e-04&lt;/span&gt;    &lt;span class="m"&gt;991&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9133&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;983&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4085&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;51806&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;6790&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;891&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9232&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3708&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5241&lt;/span&gt;    &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;hsa04218&lt;/span&gt; &lt;span class="n"&gt;hsa04218&lt;/span&gt;                     &lt;span class="n"&gt;Cellular&lt;/span&gt; &lt;span class="n"&gt;senescence&lt;/span&gt;     &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt; &lt;span class="m"&gt;160&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;7469&lt;/span&gt; &lt;span class="m"&gt;2.014286e-05&lt;/span&gt; &lt;span class="m"&gt;0.0012891427&lt;/span&gt; &lt;span class="m"&gt;1.265113e-03&lt;/span&gt;     &lt;span class="m"&gt;2305&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4605&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9133&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;890&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;983&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;51806&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1111&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;891&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;776&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3708&lt;/span&gt;    &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;hsa03320&lt;/span&gt; &lt;span class="n"&gt;hsa03320&lt;/span&gt;                  &lt;span class="n"&gt;PPAR&lt;/span&gt; &lt;span class="n"&gt;signaling&lt;/span&gt; &lt;span class="n"&gt;pathway&lt;/span&gt;      &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;  &lt;span class="m"&gt;74&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;7469&lt;/span&gt; &lt;span class="m"&gt;2.724093e-05&lt;/span&gt; &lt;span class="m"&gt;0.0013075646&lt;/span&gt; &lt;span class="m"&gt;1.283191e-03&lt;/span&gt;                 &lt;span class="m"&gt;4312&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9415&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;9370&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5105&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2167&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3158&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5346&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;hsa04914&lt;/span&gt; &lt;span class="n"&gt;hsa04914&lt;/span&gt; &lt;span class="n"&gt;Progesterone&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mediated&lt;/span&gt; &lt;span class="n"&gt;oocyte&lt;/span&gt; &lt;span class="n"&gt;maturation&lt;/span&gt;      &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;90&lt;/span&gt;  &lt;span class="m"&gt;98&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;7469&lt;/span&gt; &lt;span class="m"&gt;1.657604e-04&lt;/span&gt; &lt;span class="m"&gt;0.0063651988&lt;/span&gt; &lt;span class="m"&gt;6.246549e-03&lt;/span&gt;                    &lt;span class="m"&gt;9133&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;890&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;983&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;4085&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;6790&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;891&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5241&lt;/span&gt;     &lt;span class="m"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;kk&lt;/code&gt; がGSEAの結果になります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;head(kk)&lt;/code&gt; でGSEAの結果を上から確からしいもの順にトップ5を出力しています。&lt;/p&gt;
&lt;p&gt;もし遺伝子リスト&lt;code&gt;gene&lt;/code&gt;が発現差異解析の結果であるなら、コントロールとターゲット間で&lt;code&gt;Cell cycle&lt;/code&gt;等に異変が起きているだろう、とこの結果から推測できるということになります。&lt;/p&gt;
&lt;p&gt;次に&lt;code&gt;kk&lt;/code&gt;の各列名の意味ですが&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IDはKEGG pathwayのID&lt;/li&gt;
&lt;li&gt;DescriptionはKEGG pathwayの名前&lt;/li&gt;
&lt;li&gt;GeneRatioは入力&lt;code&gt;gene&lt;/code&gt;の遺伝子の内、何個の遺伝子がそのKEGG pathwayにマップされるか&lt;/li&gt;
&lt;li&gt;BgRatioは全KEGG pathwayにマップされる遺伝子の内、何個の遺伝子がそのKEGG pathwayにマップされるか&lt;/li&gt;
&lt;li&gt;p.adjust, qvalueは多重検定に伴う補正後のpvalueになり小さいほど確からしいことを示します。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;入力&lt;code&gt;gene&lt;/code&gt;に含まれる遺伝子がKEGG pathway上のどのgene productにmapされるかを可視化するには下記を実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;browseKEGG(kk, &amp;#39;hsa04110&amp;#39;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="KEGG map" src="/previews/refs/heads/system/preview_test/blog/2018/11/images/gsea_figs/null9.png"&gt;&lt;/p&gt;
&lt;h2&gt;終わりに&lt;/h2&gt;
&lt;p&gt;最も簡単なGSEAを体験していただく例を示しました。&lt;/p&gt;
&lt;p&gt;追ってより進んだアンサンブル手法なども紹介できればと思っています。&lt;/p&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>pandasのpivot_tableを用いた高速データ処理</title><link href="/previews/refs/heads/system/preview_test/blog/2018/11/pandas_pivot_table.html" rel="alternate"></link><published>2018-11-17T00:00:00+09:00</published><updated>2018-11-17T00:00:00+09:00</updated><author><name>金子</name></author><id>tag:None,2018-11-17:/previews/refs/heads/system/preview_test/blog/2018/11/pandas_pivot_table.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;概要&lt;/h2&gt;
&lt;p&gt;pandasのpivot_tableは強力な機能で、カテゴリごとの集計や計算を高速に行うことができます。&lt;/p&gt;
&lt;p&gt;pivot_tableを使った計算で個人的によく使う処理をまとめたものを&lt;a href="https://www.kaggle.com/nadare/feature-engenieering-with-pivot-table"&gt;kaggle のkernel&lt;/a&gt;で公開しました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/11/images/pandas_pivot_table_figs/pandas_pivot_table.png"&gt;&lt;/p&gt;
&lt;p&gt;このkernelでは簡単なダミーデータでpivot_tableに対する計算の仕方をまとめた後、実例として&lt;a href="https://www.kaggle.com/c/PLAsTiCC-2018"&gt;PLAsTiCC コンペ&lt;/a&gt;の&lt;a href="https://www.kaggle.com/michaelapers/the-plasticc-astronomy-starter-kit"&gt;Starter Kit&lt;/a&gt;にあった特徴量の計算をpandasのpivot_tableを用いて高速化しました。&lt;/p&gt;
&lt;h2&gt;どんなことができるようになるの？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;カテゴリごとに組み込みの集計関数より高度な関数を適用できる&lt;/li&gt;
&lt;li&gt;カテゴリごとの移動平均をかけるようになる&lt;/li&gt;
&lt;li&gt;未来のデータを含まないmean_encodingがかける&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;どれくらい早くなるの？&lt;/h2&gt;
&lt;p&gt;上記のkernelはEDA中に実際に僕が書いたコードに少し修正を加えたものですが、&lt;/p&gt;
&lt;p&gt;愚直なコード(1時間以上) → groupbyでの処理(2分半) → pivot_table(4秒)&lt;/p&gt;
&lt;p&gt;という感じで早くなりました。&lt;/p&gt;</content><category term="Blog"></category><category term="Data Science Competition"></category></entry><entry><title>シェルスクリプト入門(2)</title><link href="/previews/refs/heads/system/preview_test/blog/2018/11/shellscript_2.html" rel="alternate"></link><published>2018-11-16T00:00:00+09:00</published><updated>2018-11-16T00:00:00+09:00</updated><author><name>水野</name></author><id>tag:None,2018-11-16:/previews/refs/heads/system/preview_test/blog/2018/11/shellscript_2.html</id><summary type="html"></summary><content type="html">&lt;p&gt;※　編集注：前作&lt;a href="https://pythonoum.wordpress.com/2018/11/01/%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E5%85%A5%E9%96%801/"&gt;シェルスクリプト入門（1）&lt;/a&gt;の続編です。まだ読み終わってない方はそちらを先にどうぞ。&lt;/p&gt;
&lt;p&gt;テーブルファイルの操作と言えばRです。 (※　編集注：Pythonでもできます。)
が、そこまでbashで書いてきたのに、R呼び出して変数再設定して…面倒くさいから嫌だ！！
ってことないでしょうか。&lt;/p&gt;
&lt;p&gt;Rの機能を代替するのは無理ですが、せめてほんの少し、
例えば、テーブル中の値をそれぞれbashの変数に入れれたら、
Rを呼び出さずに完結できたりします。&lt;/p&gt;
&lt;p&gt;要は、&lt;code&gt;$ mat_i_j=i行j列目の要素&lt;/code&gt;で変数を格納していきます。&lt;/p&gt;
&lt;p&gt;対象ファイル名を、table.txtで、タブ区切り、中身は以下みたいの。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a    b    c&lt;/span&gt;
&lt;span class="err"&gt;1    2    3&lt;/span&gt;
&lt;span class="err"&gt;d    e    f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これの各要素を、&lt;code&gt;$mat_i_j&lt;/code&gt; に格納していきます。
一例として、以下のスクリプトでできます。
配列つかったりしてもっといいスクリプトもきっとあります。&lt;/p&gt;
&lt;p&gt;bashは汚いスクリプトでもたいてい速く動いてくれるので成長しないですね。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;## 行番号に使う変数の設定。&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; x1 x2 x3 &lt;span class="c1"&gt;## 解説①&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nv"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;expr &lt;span class="nv"&gt;$row&lt;/span&gt; + &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="c1"&gt;## 1行ずつ読んでくので、1ずつ足していく。&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; col in &lt;span class="sb"&gt;`&lt;/span&gt;seq &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="c1"&gt;## 今読んでる行での列番号をfor文で回す。&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nb"&gt;eval&lt;/span&gt; mat_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;row&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;col&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;col&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="c1"&gt;## 解説②&lt;/span&gt;
    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;lt&lt;span class="p"&gt;;&lt;/span&gt;table.txt

&lt;span class="c1"&gt;### 変数mat_$i_$j を使った処理が続く。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;時間のある人用に解説です。
少し小技があります。&lt;/p&gt;
&lt;h2&gt;1) while readの使い方&lt;/h2&gt;
&lt;p&gt;よく見かけるのは、&lt;code&gt;cat&lt;/code&gt;からパイプで&lt;code&gt;while read&lt;/code&gt;につなぐやつです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat table.txt &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; x1 x2 x3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ファイルを一行ずつ読んで、各列の要素を&lt;code&gt;read&lt;/code&gt;の後ろに置いた変数名&lt;code&gt;（x1,x2,x3）&lt;/code&gt;に格納していきます。変数名の個数は任意です。ここでは列の数に合わせてます。
各行ごとに、&lt;code&gt;do&lt;/code&gt;～&lt;code&gt;done&lt;/code&gt;の間で、&lt;code&gt;$x1&lt;/code&gt;,&lt;code&gt;$x2&lt;/code&gt;,&lt;code&gt;$x3&lt;/code&gt;が使えるようになります。&lt;/p&gt;
&lt;p&gt;が、しかし、パイプで&lt;code&gt;while&lt;/code&gt;に入ってしまうと、パイプ内はパイプ内で完結するため、
&lt;code&gt;do&lt;/code&gt;~&lt;code&gt;done&lt;/code&gt;の中で変数操作をしても、&lt;code&gt;done&lt;/code&gt;の後では、その中身が空っぽになっちゃいます。&lt;/p&gt;
&lt;p&gt;これを回避するためには、パイプを使わないということで、リダイレクトで、
&lt;code&gt;done&lt;/code&gt;の後ろに&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;done&lt;/span&gt;&amp;lt;table.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;を書きます。
読みにくいですよねー。&lt;/p&gt;
&lt;h2&gt;2) evalの使い方&lt;/h2&gt;
&lt;p&gt;今回の&lt;code&gt;mat_$i_$j&lt;/code&gt;のように、変数名に変数&lt;code&gt;($i,$j)&lt;/code&gt;を使って値を格納する時には、&lt;code&gt;eval&lt;/code&gt;を使います。
&lt;code&gt;eval&lt;/code&gt;は、その後に書いた文をもってきて、bashスクリプトとして評価（evaluate）します。&lt;/p&gt;
&lt;p&gt;なので、&lt;code&gt;i=2, j=3&lt;/code&gt; として、&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval mat_${i}_${j}=aaa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;は、
&lt;code&gt;mat_2_3=aaa&lt;/code&gt; をスクリプトとして評価しろ、ということになり、
&lt;code&gt;mat_2_3&lt;/code&gt;という変数名に、&lt;code&gt;aaa&lt;/code&gt;が入ります。
（ちなみに、どこまでが変数名か分からなくなる状況では、変数名を{}でくくります。ここではiとj。）&lt;/p&gt;
&lt;p&gt;変数を使った変数名の中身を出力させる場合には、echoとevalを組み合わせます。
&lt;code&gt;col=1&lt;/code&gt;として、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="se"&gt;\$&lt;/span&gt;x&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;col&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書けば、まず、&lt;code&gt;eval&lt;/code&gt;が&lt;code&gt;$col&lt;/code&gt;の中身を出してからスクリプトとして評価するので、
（xの&lt;span class="math"&gt;\(には\がかかってるので無視されます）
&lt;code&gt;echo $x1&lt;/code&gt;
と書いていることになり、通常の&lt;code&gt;echo&lt;/code&gt;で書いたように、&lt;code&gt;$x1&lt;/code&gt;の中身が出力されます。
xの\)&lt;/span&gt;にかかってた\は、&lt;code&gt;eval&lt;/code&gt;での評価で消費されて、&lt;code&gt;echo&lt;/code&gt;内にはなくなります。ここ重要。&lt;/p&gt;
&lt;p&gt;やりたいことは、&lt;code&gt;eval echo&lt;/code&gt; で出してきた値を、変数を使った変数名に格納することです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eval mat_${i}_${j}=aaa&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;の&lt;code&gt;aaa&lt;/code&gt;部分に&lt;code&gt;eval echo&lt;/code&gt;を直接もってきても、機能しません。
&lt;code&gt;eval echo&lt;/code&gt;のままでは、まだ値ではなくスクリプトだからです。&lt;/p&gt;
&lt;p&gt;なので、そのスクリプトを実行させて値を出力させたものを、&lt;code&gt;aaa&lt;/code&gt;の部分に書きます。
そういう時は、アクサングラーブ（` シフト押しながら＠）でくくります。&lt;/p&gt;
&lt;p&gt;アクサングラーブは、その中にあるスクリプトの実行結果を出力します。
なので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;とすれば、&lt;code&gt;$k&lt;/code&gt;の中身が出力されて、&lt;code&gt;test&lt;/code&gt;に格納されます。
&lt;code&gt;row&lt;/code&gt;に1ずつ足していくとこでも使ってます。よく見る方法です。
&lt;code&gt;for&lt;/code&gt;文使わなくていいので、見た目がすっきりします。&lt;/p&gt;
&lt;p&gt;では、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eval mat_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;=`eval echo \&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と書けば、&lt;code&gt;mat_2_3&lt;/code&gt;に&lt;code&gt;$x1&lt;/code&gt;の中身が代入されるはず！
となるのですが、不完全です。&lt;/p&gt;
&lt;p&gt;アクサングラーブでの評価で、&lt;code&gt;\&lt;/code&gt;が一個消費されてしまうので、実行する&lt;code&gt;eval echo&lt;/code&gt;の文が、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;col&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;となるので、&lt;code&gt;eval&lt;/code&gt;での評価時に&lt;code&gt;$x&lt;/code&gt;の中身（設定してないので空っぽ）と&lt;code&gt;$col&lt;/code&gt;が出されてしまって、
&lt;code&gt;echo (空)1&lt;/code&gt;
となって、最終的に、&lt;code&gt;mat_2_3&lt;/code&gt;には&lt;code&gt;$x1&lt;/code&gt;ではなく、&lt;code&gt;$col&lt;/code&gt;の中身である1が代入されてしまいます。&lt;/p&gt;
&lt;p&gt;なので、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eval mat_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;_&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;=`eval echo \\&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;と、\を一個増やして書けば、目的達成です。
めでたしめでたし。&lt;/p&gt;
&lt;p&gt;※ 編集注 : 記事はめでたく終わりましたが、アクサングラーブがマークダウンと干渉してしまいました。試行錯誤の結果、ところどころテキストが混じって読みにくくなってしまいました。すみません。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Blog"></category><category term="Shell script"></category></entry><entry><title>シェルスクリプト入門(1)</title><link href="/previews/refs/heads/system/preview_test/blog/2018/11/shellscript_1.html" rel="alternate"></link><published>2018-11-01T00:00:00+09:00</published><updated>2018-11-01T00:00:00+09:00</updated><author><name>水野</name></author><id>tag:None,2018-11-01:/previews/refs/heads/system/preview_test/blog/2018/11/shellscript_1.html</id><summary type="html"></summary><content type="html">&lt;p&gt;python会なのにpythonまだ触ったことありません。勉強せねば。&lt;/p&gt;
&lt;p&gt;データ整形の流れって、教わる機会なくないですか？
つまらないものですが、僕のやり方を紹介してみます。
始めたばかりの人は参考にしてください。
経験者の方、変なとこあったらどしどし突っ込みください！
そして皆さんの自己流も教えてもらえると嬉しいです。&lt;/p&gt;
&lt;h2&gt;1) scriptに起こす前&lt;/h2&gt;
&lt;p&gt;shell scriptに書き起こす前に、プロンプト画面（Mac,Ubuntuならterminal）でテストします。
僕はいつもcatでファイルにつないで、パイプの後に試したいコマンドを打ちます。
その後にパイプでheadにつないで、頭だけ出力してみます。たいていファイル重いので。
圧縮ファイルの時は、解凍する前にzcatでつないで試します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat hogehoge.txt &lt;span class="p"&gt;|&lt;/span&gt; sed 1d（試したいコマンド）&lt;span class="p"&gt;|&lt;/span&gt; head
zcat hoge.gz &lt;span class="p"&gt;|&lt;/span&gt; cut –f1（試したいコマンド）&lt;span class="p"&gt;|&lt;/span&gt; head
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一行が長くて確認しづらい！と思ったら、headからless –Sにつなぎます。
別画面で折り返しなしで見ることができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat hogehoge &lt;span class="p"&gt;|&lt;/span&gt; sed 1d（試したいコマンド）&lt;span class="p"&gt;|&lt;/span&gt; head &lt;span class="p"&gt;|&lt;/span&gt; less -S
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2) scriptを書く&lt;/h2&gt;
&lt;p&gt;うまくいきそうで、だいたい流れが思い描けたらshell scriptに書き起こします。
結局他のファイルも同じ処理をするはめになり、scriptに残しておけば・・と後悔することが多いからです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;touch test.sh &lt;span class="c1"&gt;# ファイルつくって、&lt;/span&gt;
emacs test.sh &lt;span class="c1"&gt;# emacsで開く。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash # おまじない。&lt;/span&gt;
&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;filename &lt;span class="c1"&gt;# ファイルはいつも外から入れれるようにしてます。&lt;/span&gt;
rm –r ./folder &lt;span class="c1"&gt;# 一発で上手くいくことはないので、やり直しやすいように消去コマンド。&lt;/span&gt;
mkdir ./folder &lt;span class="c1"&gt;# 散らからないように専用フォルダを作成。&lt;/span&gt;
&lt;span class="nv"&gt;dir1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;./folder&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# フォルダ名をいつでも変えやすいようにパスを変数にいれる。&lt;/span&gt;
cat &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed 1d &amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/hogehoge2.txt &lt;span class="c1"&gt;#目的のコマンドで処理して保存。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3) 実行&lt;/h2&gt;
&lt;p&gt;書けたら、処理したいファイルを渡して実行してみます。
&lt;code&gt;&amp;amp;&lt;/code&gt;はバックグラウンド実行です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bash ./test.sh ./hogehoge.txt &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;時間がかかりそうで家に帰りたいときは、nohupでサーバーと切れても大丈夫なように。
screenを使うこともあります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nohup bash ./test.sh ./hogehoge.txt &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4)　修正&lt;/p&gt;
&lt;p&gt;scriptを修正するときは、元の文は#をつけてコメントアウトしときます。
そうすれば、後でやり直しやすいです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat &amp;quot;$filename&amp;quot; | sed 1d &amp;gt; &amp;quot;$dir1&amp;quot;/hogehoge2.txt # コメントアウトして置いておく。&lt;/span&gt;
cat &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;blahblah&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$dir1&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;/hogehoge2.txt &lt;span class="c1"&gt;# 新しい文。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;どこでバグってるか分からない時は、とりあえずechoで変数を出してみたりしてチェックしてます。&lt;/p&gt;
&lt;h2&gt;5) 応用編&lt;/h2&gt;
&lt;p&gt;あとはひたすらコマンドを駆使して書き上げていきます。
以下の基本コマンドでだいたいのことはできるかと。
特にawkはたくさんのことができます。joinも重宝します。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;command&lt;/th&gt;
&lt;th&gt;説明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cat&lt;/td&gt;
&lt;td&gt;ファイルを縦につなぐ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;paste&lt;/td&gt;
&lt;td&gt;ファイルを横につなぐ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sed&lt;/td&gt;
&lt;td&gt;指定行抜き出すor削除or文字置換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cut&lt;/td&gt;
&lt;td&gt;指定列抜き出すor削除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;awk&lt;/td&gt;
&lt;td&gt;抜き出し方をいろいろカスタマイズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tr&lt;/td&gt;
&lt;td&gt;文字置換&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sort&lt;/td&gt;
&lt;td&gt;整列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uniq&lt;/td&gt;
&lt;td&gt;重複行を削除or抜き出す&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;join&lt;/td&gt;
&lt;td&gt;2つのファイルを同じ項目で合わせる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grep&lt;/td&gt;
&lt;td&gt;特定の文字が入った行を出す&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;各コマンドのオプションの使い方が重要ですが、長くなってきたので詳細はまたの機会に。&lt;/p&gt;</content><category term="Blog"></category><category term="Shell script"></category></entry><entry><title>MACS2とdeepToolsのbigwigファイルの比較</title><link href="/previews/refs/heads/system/preview_test/blog/2018/10/macs2_deeptools.html" rel="alternate"></link><published>2018-10-29T00:00:00+09:00</published><updated>2018-10-29T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2018-10-29:/previews/refs/heads/system/preview_test/blog/2018/10/macs2_deeptools.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;ChIP-seqとは&lt;/h2&gt;
&lt;p&gt;全身で37兆個あるといわれているヒトの細胞は、基本的にすべて同じDNA配列を有している。しかし、肝細胞、網膜、免疫細胞と細胞にはそれぞれの"個性"がある。更には正常の免疫細胞と暴走している免疫細胞など細胞には"状態"もある。これらを制御する大きな要素としてエピジェネティクスが挙げられ、DNAメチル化やクロマチン修飾などが知られている。ChIP-seq (chromatin immunoprecipitation sequence) は特異的クロマチン修飾を受けている領域を、抗体を用いて沈降、濃縮させ、どの細胞のどの領域でどういう修飾を受けているのかを調べるために用いられる。&lt;/p&gt;
&lt;h2&gt;今回のきっかけ&lt;/h2&gt;
&lt;p&gt;ChIP-seqの解析をする時に便利なフォーマットにbigwigがある。igvで表示したり、coverageを計算したり、様々な用途で使える。詳しくはdrbonobon（第一版）のp118に記載されている。ChIP-seqの解析には&lt;a href="https://github.com/taoliu/MACS"&gt;MACS2&lt;/a&gt;というソフトが良く使われ、bigwigの生成も可能だが、&lt;a href="https://deeptools.readthedocs.io/en/develop/index.html"&gt;deepTools&lt;/a&gt;でも&lt;code&gt;​bamCoverage&lt;/code&gt;や​&lt;code&gt;​bamComapre&lt;/code&gt;機能を使ってbigwigを作ることができる。挙動や使い所の違いを比較しようというのが今回の目的。&lt;/p&gt;
&lt;p&gt;ちなみに、通常のChIP-seq解析ならMACS2,HOMERなどを使ってやるのが無難かと思います。今回はdeeptToolsと戯れたかった。&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda install -c bioconda deeptools

$ conda create -n py27_macs2 &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.7.5
$ conda activate py27_macs2
$ conda install -c bioconda macs2
$ conda install -c bioconda bedtools
$ conda install -c bioconda ucsc-bedgraphtobigwig
$ conda install -c bioconda ucsc-bedclip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;condaでmacs2を入れようとするとxonshとdependency conflictしてしまった。諦めて仮想環境を作る。condaは入ってる前提。MACS2はいまだにpython2な時点で腰が引けるが、先に進む。&lt;/p&gt;
&lt;p&gt;※ python2.7.4以前だとエラーを吐くらしいので、python2.7.5にしてある。今考えると2.7.15でも良かったかもしれない。&lt;/p&gt;
&lt;h2&gt;今回使うsample&lt;/h2&gt;
&lt;p&gt;うちのラボの論文のデータを使ってみます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kitagawa, Y. et al. Guidance of regulatory T cell development by Satb1-dependent super-enhancer establishment. Nat. Immunol. 18, (2016).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ここからH3K27acのTregとTconvを使ってみます。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SRR ID&lt;/th&gt;
&lt;th&gt;sample&lt;/th&gt;
&lt;th&gt;replicate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SRR5385260&lt;/td&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRR5385344&lt;/td&gt;
&lt;td&gt;Treg H3K27ac&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRR5385345&lt;/td&gt;
&lt;td&gt;Treg H3K27ac&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRR5385346&lt;/td&gt;
&lt;td&gt;Tconv H3K27ac&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRR5385347&lt;/td&gt;
&lt;td&gt;Tconv H3K27ac&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;これらをお馴染みpfastq-dumpをつかって落としてきます。今回はSingle-endなのでsplitはいりません。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir data
$ prefetch SRR5385260 SRR5385344 SRR5385345 SRR5385346 SRR5385347
$ bash pfd.sh
$ fastqc -t &lt;span class="m"&gt;22&lt;/span&gt; -o data data/*.fastq
$ multiqc -n multiqc_report_raw.html ./data
$ bash make_bam.sh
$ fastqc -t &lt;span class="m"&gt;22&lt;/span&gt; -o data data/*.trimmed.fastq
$ multiqc -n multiqc_report_trimmed.html ./data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;pdf.sh&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;sras&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SRR5385260&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385344&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385345&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385346&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385347&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; s in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;sras&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
pfastq-dump --threads &lt;span class="m"&gt;22&lt;/span&gt; --outdir data ~/ncbi/public/sra/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.sra
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;make_bam.sh&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;sras&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SRR5385260&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385344&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385345&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385346&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SRR5385347&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; s in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;sras&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
trimmomatic &lt;span class="se"&gt;\&lt;/span&gt;
    SE                  &lt;span class="se"&gt;\&lt;/span&gt;
    -threads &lt;span class="m"&gt;22&lt;/span&gt;         &lt;span class="se"&gt;\&lt;/span&gt;
    -phred33            &lt;span class="se"&gt;\&lt;/span&gt;
    -trimlog log.&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.txt    &lt;span class="se"&gt;\&lt;/span&gt;
    data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.fastq            &lt;span class="se"&gt;\&lt;/span&gt;
    data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.fastq          &lt;span class="se"&gt;\&lt;/span&gt;
    ILLUMINACLIP:adapters.fa:2:10:10  &lt;span class="se"&gt;\&lt;/span&gt;
    LEADING:20 &lt;span class="se"&gt;\&lt;/span&gt;
    TRAILING:20 &lt;span class="se"&gt;\&lt;/span&gt;
    MINLEN:30
bowtie2 -p &lt;span class="m"&gt;22&lt;/span&gt; -x ~/ref_sequence/bowtie2_indexes/mm10 -U data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.fastq -S data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.sam &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; data/out.&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.txt
samtools sort -O bam -o data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.bam data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.sam
samtools index data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.bam data/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.trimmed.bai
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改行とコメントがうまく共存できなかったので、以下に注釈付きを示す。より詳しいことはおなじみ&lt;a href="https://bi.biopapyrus.jp/rnaseq/qc/trimmomatic.html"&gt;biopnpyrus&lt;/a&gt;を参照。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;trimmomatic \
    SE                  \  # single-end
    -threads 22         \  # スレッド数
    -phred33            \  # phred33 または -phred64 を指定
    -trimlog log.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.txt    \  # 実行ログの保存先
    data/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.fastq            \  # 入力 FASTQ
    data/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.trimmed.fastq          \  # 出力 FASTQ
    ILLUMINACLIP:adapters.fa:2:10:10  \ # アダプター除去条件の指定
    LEADING:20 \
    TRAILING:20 \
    MINLEN: 30   # 30bp を満たさないリードを除去
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでbamファイルが出来ているはず。&lt;/p&gt;
&lt;p&gt;igvで表示してみるとこんな感じ。
&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/macs2_deeptools_figs/screenshot-from-2018-10-28-20-04-52.png"&gt;&lt;/p&gt;
&lt;h3&gt;補足 prefetchのoutputを変更する方法（Yoshiharaさんより）&lt;/h3&gt;
&lt;p&gt;デフォルトではプロジェクトのディレクトリの外にsraファイルを保存してしまう。また、データ用のストレージを分けている際もそちらに書き出してやりたい。そこでprefetchのoutputを変更したいという話になるわけだが、やり方は2つ。&lt;/p&gt;
&lt;h4&gt;1)&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/ncbi/sra-tools/wiki/Toolkit-Configuration"&gt;Toolkit-Configuration&lt;/a&gt;をいじる方法。
公式にはこちらが推奨らしいが操作が面倒。&lt;/p&gt;
&lt;h4&gt;2)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; ‘/repository/user/main/public/root &lt;span class="o"&gt;=&lt;/span&gt; “/outputDir”‘ &amp;gt; ~/.ncbi/user-settings.mkfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;こっちのほうが簡単。outputDirに指定してやって下さい。
この例だとpfastq-dumpでは&lt;code&gt;~/ncbi/public/sra/${s}.sra&lt;/code&gt; が &lt;code&gt;/outputDir/sra/${s}.sra&lt;/code&gt;になりますね。&lt;/p&gt;
&lt;h2&gt;MACS2によるピークコール&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Zhang, Y. et al. Model-based Analysis of ChIP-Seq (MACS). Genome Biol. 9, R137 (2008).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ChIP-seq解析の定番ツールであるMACS2を使う。説明は&lt;a href="https://github.com/taoliu/MACS/wiki"&gt;公式wiki&lt;/a&gt;が詳しい。bigwigはpeakcallの副産物的な扱いで、メインはChIP-seqのピーク情報。bigwigは少し回りくどい作り方が必要。詳しくは&lt;a href="https://github.com/taoliu/MACS/wiki/Build-Signal-Track"&gt;こちら&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;まずはbdg2bwを用意する。&lt;code&gt;~/Programs&lt;/code&gt;はpathの通ったディレクトリとする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ vim ~/Programs/bdg2bw &lt;span class="c1"&gt;# emacsでも。中身は以下。&lt;/span&gt;
$ chmod &lt;span class="m"&gt;755&lt;/span&gt; ~/Programs/bdg2bw
$ wget http://hgdownload.cse.ucsc.edu/goldenPath/mm10/database/chromInfo.txt.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;bdg2bw&lt;/code&gt;の中身は以下。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# check commands: slopBed, bedGraphToBigWig and bedClip&lt;/span&gt;

which bedtools &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&lt;/span&gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bedtools not found! Download bedTools: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
which bedGraphToBigWig &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&lt;/span&gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bedGraphToBigWig not found! Download: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
which bedClip &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&lt;/span&gt;/dev/null &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bedClip not found! Download: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# end of checking&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; -lt &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Need 2 parameters!  &amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="nv"&gt;G&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

bedtools slop -i &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -g &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;G&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -b &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; bedClip stdin &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;G&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.clip

&lt;span class="nv"&gt;LC_COLLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C sort -k1,1 -k2,2n &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.clip &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.sort.clip

bedGraphToBigWig &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.sort.clip &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;G&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="p"&gt;/bdg/bw&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

rm -f &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.clip &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;F&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.sort.clip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで実行準備が整った。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda activate py27_macs2
$ mkdir macs2 &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; macs2
$ macs2 callpeak -t ../data/SRR5385344.trimmed.bam -c ../data/SRR5385260.trimmed.bam -g mm -n Treg_H3K27ac_1 -p 1e-5 -f BAM -B --nomodel &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; macs.SRR5385344.out &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; bdg2bw Treg_H3K27ac_1_treat_pileup.bdg ../chromInfo.txt
$ macs2 callpeak -t ../data/SRR5385345.trimmed.bam -c ../data/SRR5385260.trimmed.bam -g mm -n Treg_H3K27ac_2 -p 1e-5 -f BAM -B --nomodel &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; macs.SRR5385345.out &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; bdg2bw Treg_H3K27ac_2_treat_pileup.bdg ../chromInfo.txt
$ macs2 callpeak -t ../data/SRR5385346.trimmed.bam -c ../data/SRR5385260.trimmed.bam -g mm -n Tconv_H3K27ac_1 -p 1e-5 -f BAM -B --nomodel &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; macs.SRR5385346.out &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; bdg2bw Tconv_H3K27ac_1_treat_pileup.bdg ../chromInfo.txt
$ macs2 callpeak -t ../data/SRR5385347.trimmed.bam -c ../data/SRR5385260.trimmed.bam -g mm -n Tconv_H3K27ac_2 -p 1e-5 -f BAM -B --nomodel &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; macs.SRR5385347.out &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;amp&lt;span class="p"&gt;;&lt;/span&gt; bdg2bw Tconv_H3K27ac_2_treat_pileup.bdg ../chromInfo.txt
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-B&lt;/code&gt;でbdgというbedgraphファイルを保存するかどうか。
&lt;code&gt;--nomodel&lt;/code&gt;はshifting modelを作るかどうか。defaultでshiftは100。
実際はigvにはbdgファイルも読み込めてしまうので、特にbigwigにする必要はなかった。&lt;/p&gt;
&lt;h2&gt;deepToolsによるbwファイルの生成&lt;/h2&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/macs2_deeptools_figs/start_workflow1.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ramírez, F. et al. deepTools2: a next generation web server for deep-sequencing data analysis. Nucleic Acids Res. 44, W160–W165 (2016).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MAX PLANCK INSTITUTE製のツールで、ChIP-seq, RNA-seq, MNase-seqなどに使えるツールとされている。多サンプルの比較などに向いている。QCや美しいvisualizationが可能。さらにdeepBlueの大量のデータも使える。CLIではもちろんのこと、Galaxyにも対応しているので、そちらでもいいし、Pythonで書かれていてAPIのドキュメントも手厚いのでそちらを使ってもいい。（ちょっとむずかしい。）&lt;/p&gt;
&lt;p&gt;今回はinputがあるので&lt;code&gt;bamCompare&lt;/code&gt;を使う。log2ratioがbwファイルに出力される。果たしていけるのか。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bamCompare&lt;/code&gt;は&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;サンプルごとのスケーリング、depthの正規化&lt;/li&gt;
&lt;li&gt;operation(defaultはlog2ratio)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;を行う。binはdefaultで50bp。log2ratioの代わりにlog2, ratio, subtract, add, mean, reciprocal_ratio, first, secondを取得することもできる。今回はsubtract(差分)も合わせて取得してみる。macs2と違ってmultiprocessも動くが、bamのindexが先に必要。macs2に比べるととてもsimpleでよい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir deepTools    
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; -b1 ./data/SRR5385344.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Treg_H3K27ac_1_log2ratio.bw
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; -b1 ./data/SRR5385345.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Treg_H3K27ac_2_log2ratio.bw
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; -b1 ./data/SRR5385346.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Tconv_H3K27ac_1_log2ratio.bw
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; -b1 ./data/SRR5385347.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Tconv_H3K27ac_2_log2ratio.bw

$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; --operation subtract -b1 ./data/SRR5385344.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Treg_H3K27ac_1_subtract.bw
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; --operation subtract -b1 ./data/SRR5385345.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Treg_H3K27ac_2_subtract.bw
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; --operation subtract -b1 ./data/SRR5385346.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Tconv_H3K27ac_1_subtract.bw
$ bamCompare -p &lt;span class="m"&gt;22&lt;/span&gt; --operation subtract -b1 ./data/SRR5385347.trimmed.bam -b2 ./data/SRR5385260.trimmed.bam -o deepTools/Tconv_H3K27ac_2_subtract.bw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;※ 181107 subtractのoutput fileが間違えていたので修正しました。（Yoshiharaさんより）&lt;/p&gt;
&lt;h2&gt;igvによる比較&lt;/h2&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/macs2_deeptools_figs/screenshot-from-2018-10-28-20-36-19.png"&gt;&lt;/p&gt;
&lt;p&gt;上からmacs2, deepTools subtract, deepTools log2 fold changeになっている。macs2の結果はdeepToolsのsubtractに近いことがわかる。&lt;/p&gt;
&lt;p&gt;macs2のsummits.bedとnarrowPeakも表示してみた（下2つ）。これはこれで取り回しが効いて良い。narrowPeakはp valueに応じて色が変わっている。&lt;/p&gt;
&lt;p&gt;deepToolsが少しギザギザしているように見えるが、binを変えると細かくできる。&lt;/p&gt;
&lt;h2&gt;おまけ：deepToolsによる可視化&lt;/h2&gt;
&lt;p&gt;最後に、deepToolsの豊富な可視化機能の一部を試してみる。まず、&lt;a href="http://genome.ucsc.edu/cgi-bin/hgTables"&gt;UCSC&lt;/a&gt;よりmm10の遺伝子のbedを取得する。bigwigを用いた可視化は&lt;code&gt;computeMatrix&lt;/code&gt;した後&lt;code&gt;plotHeatmap&lt;/code&gt;などである。log2 fold changeのbigwigを用いて全遺伝子についてH3K27acのheatmapを書き、クラスタリングも同時にしてみる。全遺伝子についてなので&lt;code&gt;computeMatrix&lt;/code&gt;がとても重たくなってしまった。Tconvについては今回は省略。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ computeMatrix scale-regions &lt;span class="se"&gt;\&lt;/span&gt;
-S Treg_H3K27ac_1_log2ratio.bw Treg_H3K27ac_2_log2ratio.bw &lt;span class="se"&gt;\&lt;/span&gt;
-R mm10.genes.bed &lt;span class="se"&gt;\&lt;/span&gt;
--beforeRegionStartLength &lt;span class="m"&gt;3000&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--regionBodyLength &lt;span class="m"&gt;5000&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--afterRegionStartLength &lt;span class="m"&gt;3000&lt;/span&gt; --skipZeros -o matrix.mat.Treg.gz -p &lt;span class="m"&gt;8&lt;/span&gt;

&lt;span class="c1"&gt;# 赤が正になってほしいので_rでリバースする。&lt;/span&gt;
$ plotHeatmap -m matrix.mat.Treg.gz -out Heatmap.png &lt;span class="se"&gt;\&lt;/span&gt;
--colorMap RdYlBu_r --zMin -3 --zMax &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--kmeans &lt;span class="m"&gt;4&lt;/span&gt; --samplesLabel Treg_H3K27ac_1  Treg_H3K27ac_2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/macs2_deeptools_figs/heatmap-3.png"&gt;&lt;/p&gt;
&lt;p&gt;plotHeatmapのクラスタリングは複数のサンプルがある時は１つ目のサンプルでクラスタリングするみたい。せっかく他のサンプルもあるのだから、いろいろ混ぜてクラスタリングできたらいいな。
colormapは&lt;a href="https://matplotlib.org/examples/color/colormaps_reference.html"&gt;matplotlibでおなじみのもの&lt;/a&gt;である。fontsizeは変更する方法は見つからなかった。これは結構困りどころ。強いて言うならissueで自分で書いてみてねとの&lt;a href="https://github.com/deeptools/deepTools/issues/444"&gt;回答&lt;/a&gt;があった。&lt;/p&gt;
&lt;p&gt;deepToolsに関して、いつもお世話になっている&lt;a href="http://kazumaxneo.hatenablog.com/entry/2018/06/25/210934"&gt;macでインフォマティクス&lt;/a&gt;さんにも記事があった。とても詳しい。他にもいろいろな機能があったので是非。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;macs2はpeakcallを目的にしていて、副産物としてbigwigやbdgが出力される。deepToolsは複数のChIP-seqデータなどを扱うのに長けている。逆にdeepToolsはpeak call機能がない。&lt;/li&gt;
&lt;li&gt;deepToolsはIHECのQCに使われていたり、bw作成後のdownstream解析もできたり、&lt;a href="https://www.nature.com/articles/s41467-018-02866-0"&gt;RamDA-seq&lt;/a&gt;の解析に使われていたりと、頼れるツールの様なので、早いうちにマスターしようと思う。&lt;/li&gt;
&lt;li&gt;TregとTconvのデータを用意した割にはTreg-specific peaksを見るところまでは手が回らなかった。（論文読めば書いてあるが。)特異的ピーク検出をするなら&lt;a href="http://homer.ucsd.edu/homer/ngs/index.html"&gt;HOMER&lt;/a&gt;が安定感があって良さそうな。&lt;/li&gt;
&lt;li&gt;ChIP-seq解析のいい練習になりました。&lt;/li&gt;
&lt;li&gt;multi-omics人材になるぞ！&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>GitHub desktopアプリの使い方</title><link href="/previews/refs/heads/system/preview_test/blog/2018/10/github_desktop.html" rel="alternate"></link><published>2018-10-28T00:00:00+09:00</published><updated>2018-10-28T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2018-10-28:/previews/refs/heads/system/preview_test/blog/2018/10/github_desktop.html</id><summary type="html"></summary><content type="html">&lt;p&gt;githubとはなにかの説明は省略しています。githubについて知らない人は先にいろいろ調べてみましょう。今回は&lt;a href="https://desktop.github.com/"&gt;github desktop&lt;/a&gt;についてです。&lt;/p&gt;
&lt;h2&gt;レポジトリの読み込み（プロジェクト開始時の一回のみ。）&lt;/h2&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/github_desktop_figs/2018_10_1.png"&gt;&lt;/p&gt;
&lt;p&gt;github上のレポジトリとLocal pathを指定。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/github_desktop_figs/2018_10_2.png"&gt;&lt;/p&gt;
&lt;p&gt;これでうまくcloneされていたらOK&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;毎回の流れ(基本編)&lt;/h2&gt;
&lt;p&gt;一日の作業の初めにFetchしてきて、最新の状態に同期する。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/github_desktop_figs/2018_10_3.png"&gt;&lt;/p&gt;
&lt;p&gt;ファイルを変更、加筆すると自動的にアプリに反映される&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/github_desktop_figs/2018_10_4.png"&gt;&lt;/p&gt;
&lt;p&gt;作業の区切りがついたら左下のSummeryに適当にコメントを付け、commit to master。
コメントはもうちょっと丁寧に付けましょう。。。&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/github_desktop_figs/2018_10_5.png"&gt;&lt;/p&gt;
&lt;p&gt;pushして変更を反映させる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/github_desktop_figs/2018_10_6.png"&gt;&lt;/p&gt;
&lt;p&gt;まとめると、&lt;strong&gt;fetch(pull) -&amp;gt; commit -&amp;gt; push&lt;/strong&gt; のライフライクルです。&lt;/p&gt;
&lt;h2&gt;CLIでの操作&lt;/h2&gt;
&lt;p&gt;デスクトップアプリはwin,macではあるが、Ubuntuでは無いらしいので、同じ作業をCLIでやる必要がある。ただし、基本は同じで&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git pull origin master
$ git add --all
$ git commit -m &lt;span class="s2"&gt;&amp;quot;コメント&amp;quot;&lt;/span&gt;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;って感じでやればOK。branchやmerge、プルリクエストについては触れていません。&lt;/p&gt;</content><category term="Blog"></category><category term="GitHub"></category></entry><entry><title>LinuxでのBioinformatics環境構築</title><link href="/previews/refs/heads/system/preview_test/blog/2018/10/environment_bioinformatics.html" rel="alternate"></link><published>2018-10-16T00:00:00+09:00</published><updated>2018-10-16T00:00:00+09:00</updated><author><name>平岡</name></author><id>tag:None,2018-10-16:/previews/refs/heads/system/preview_test/blog/2018/10/environment_bioinformatics.html</id><summary type="html"></summary><content type="html">&lt;p&gt;ただいま、私のMacbook Proが入院しておりまして、古いWindows10をUbuntuとデュアルブートして作業しております。下級生でもWindowsしか持っていない、でもBioinformaticsに関心があるという人が、スムーズに環境構築できるようにと今回の記事を書きます。なお、前提として、Ubuntuのインストールが完了しているものとします。なお、筆者のインストールしたUbuntuは18.04.1 LTSです。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href="https://oumpy.github.io/articles/2018/10/kallisto_rnaseq_pipeline.html"&gt;Kallistoを用いたRNA-seq解析パイプライン&lt;/a&gt;で使う、RNA-seq系のツールのインストールを行っていきますが、順次別の解析目的のツールインストールも紹介したいと考えております。今回の環境構築で、Kallistoを用いたRNA-seq解析パイプラインに進むことができます。&lt;/p&gt;
&lt;h2&gt;Pythonのインストール&lt;/h2&gt;
&lt;p&gt;Ubuntuのバージョンによってはpython2.7がデフォルトとなっている場合もあるので、python3系をダウンロードし、デフォルトに設定しよう。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# check the version of python.&lt;/span&gt;
$ python --version
&amp;gt;&amp;gt;&amp;gt; Python &lt;span class="m"&gt;2&lt;/span&gt;.7.15rc1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Biocondaのインストール&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.anaconda.com/download/#macos"&gt;Anaconda&lt;/a&gt;のインストーラーをダウンロードします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ bash ~/Downloads/Anaconda3-4.1.0-Linux-x86_64.sh
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;export PATH=/home/user/anaconda3/bin:$PATH&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&amp;amp;&lt;/span&gt;gt&lt;span class="p"&gt;;&lt;/span&gt; ~/.bashrc
$ conda -V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python --version
&amp;gt;&amp;gt;&amp;gt; Python &lt;span class="m"&gt;3&lt;/span&gt;.6.6+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;バイオインフォマティクスの分野では解析のために様々なツールを利用しますが、インストールのたびにパスを通すなどの作業をしていると大変煩雑ですし、バージョン管理もしにくくなります。パッケージマネージャーを使ってツールを一元管理するのが賢明です。
Homebrewなどのパッケージ管理システムは有名ですが、対応していないツールの多く、現状はBiocondaというパッケージマネージャーがおすすめです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Download a Miniconda package for linux python3&lt;/span&gt;
$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
$ bash Miniconda3-latest-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;EnterやYesを入力していくとインストールが終了し、パスも通った状態になります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# condaコマンドが正常に動作していれば成功です。（terminalを開き直しましょう。）&lt;/span&gt;
$ conda -h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;biocondaのチャンネルを追加。biocondaチャンネルが最上位に来るように設定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda config --add channels conda-forge
$ conda config --add channels defaults
$ conda config --add channels r
$ conda config --add channels bioconda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;それでは早速ツールをインストールしていきましょう。基本 &lt;code&gt;conda install ???&lt;/code&gt;でインストールが完了し正常に動作していきます。非常に便利ですね。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda install parallel-fastq-dump
$ conda install fastqc
$ conda install multiqc
$ conda install trimmomatic
$ conda install kallisto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://imamachi-n.hatenablog.com/entry/2017/01/14/212719"&gt;http://imamachi-n.hatenablog.com/entry/2017/01/14/212719&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Rツールのインストール&lt;/h2&gt;
&lt;p&gt;Rのコンソールを開いて、Rのツールをインストールしていきます。
Tximportのインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;biocLite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tximport&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DESeq2のインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://bioconductor.org/biocLite.R&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;biocLite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DESeq2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/tximport.html"&gt;https://bioconductor.org/packages/release/bioc/html/tximport.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bioconductor.org/packages/release/bioc/html/DESeq2.html"&gt;https://bioconductor.org/packages/release/bioc/html/DESeq2.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>Kallistoを用いたRNA-seq解析パイプライン</title><link href="/previews/refs/heads/system/preview_test/blog/2018/10/kallisto_rnaseq_pipeline.html" rel="alternate"></link><published>2018-10-16T00:00:00+09:00</published><updated>2018-10-16T00:00:00+09:00</updated><author><name>平岡</name></author><id>tag:None,2018-10-16:/previews/refs/heads/system/preview_test/blog/2018/10/kallisto_rnaseq_pipeline.html</id><summary type="html"></summary><content type="html">&lt;p&gt;今回はKallistoを用いたRNA-seq解析パイプラインを紹介します。&lt;a href="https://oumpy.github.io/articles/2018/10/environment_bioinformatics.html"&gt;LinuxでのBioinformatics環境構築&lt;/a&gt;でこの記事への準備はすべて終了している流れになります。&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%AA%E3%82%B9%E3%83%88_(%E5%B0%8F%E6%83%91%E6%98%9F)"&gt;Kallisto&lt;/a&gt;は小惑星の名前のようです。つっこみどころありましたら、コメントいただけると嬉しいです！それではいきましょう！&lt;/p&gt;
&lt;h2&gt;リファレンスのダウンロード&lt;/h2&gt;
&lt;p&gt;kallistoでは、transcriptにシュードアラインメントするので、リファレンスにはcDNAを用います。今回は&lt;a href="https://www.gencodegenes.org/"&gt;GenCodeGenes&lt;/a&gt;のヒトtranscript sequencesのデータを用いました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_29/gencode.v29.transcripts.fa.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;FASTQファイルをダウンロードする場合&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.ebi.ac.uk/arrayexpress/"&gt;ArrayExpress&lt;/a&gt;からFASTQファイルをダウンロード、解凍する。今回のデータは、ヒトES細胞と成熟膵島細胞のデータ。single-end readとなっている。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR266/ERR266335/ERR266335.fastq.gz
$ gunzip ERR266335.fastq.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ERR266349 ERR266351 ERR266338 ERR266347についても同様に！&lt;/p&gt;
&lt;h3&gt;参照：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;次世代シークエンサーDRY解析教本 (細胞工学別冊)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SRAファイルをダウンロードする場合&lt;/h2&gt;
&lt;p&gt;DDBJの&lt;a href="https://ddbj.nig.ac.jp/DRASearch/"&gt;DRA search&lt;/a&gt;からSRAファイルをダウンロード、SRAファイルをFASTQに変換する。pfast-dumpで .sraをペアエンド.fastqに変換。 (&lt;strong&gt;kallistoはsraファイルを扱えない&lt;/strong&gt; ので、pfastq-dumpでfastqに変換する必要がある。）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# download sra files.&lt;/span&gt;
mkdir sra-fastq
&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ERR266335 ERR266337 ERR266338 ERR266347 ERR266349 ERR266351&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; item in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; start download &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.sra
wget ftp://ftp.ddbj.nig.ac.jp/ddbj_database/dra/sralite/ByExp/litesra/ERX/ERX182/ERX182652/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.sra
pfastq-dump -s &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -t &lt;span class="m"&gt;8&lt;/span&gt; -O sra-fastq
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pfastq-dumpのオプション&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; : SRAファイルのID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt; : スレッド数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-O&lt;/code&gt; : 出力ファイル&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回はSRAファイルのダウンロードとpfastq-dumpを使ってsraをfastqに変換する処理をシェルスクリプトを使って行いました。共通項のあるかつ時間のかかるterminalでの処理はシェルスクリプトを使うと便利です。&lt;/p&gt;
&lt;h3&gt;SRAファイルとは？&lt;/h3&gt;
&lt;p&gt;Sequence Read Archiveの略。（かつてはNGSにリードが短い特徴があったのでShort Read Archiveと呼ばれていた。）NGSの登場により配列の品質情報を塩基配列とともに記述形式であるFASTQ形式が使用されるようになった時にできたバイナリ形式のデータフォーマット。よってpfastq-dumpなどのツールでFASTQに変換することができる。&lt;a href="https://en.wikipedia.org/wiki/International_Nucleotide_Sequence_Database_Collaboration"&gt;INSDC&lt;/a&gt;、&lt;a href="https://en.wikipedia.org/wiki/European_Bioinformatics_Institute"&gt;EBI&lt;/a&gt;、&lt;a href="https://en.wikipedia.org/wiki/DNA_Data_Bank_of_Japan"&gt;DDBJ&lt;/a&gt;が共同で運営しているデータベース&lt;a href="https://en.wikipedia.org/wiki/Sequence_Read_Archive"&gt;SRA&lt;/a&gt;に保存してある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ less ERR266335.sra
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;バイナリデータなので、SRAファイルの中をのぞいてみると下のようになる。
&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-31-at-19-29-38.png"&gt;&lt;/p&gt;
&lt;h3&gt;pfastq-dumpとは？&lt;/h3&gt;
&lt;p&gt;fastq-dumpを並列処理するbashスクリプト。Sequence Read Archive（wiki）からダウンロードされたシーケンスデータ（SRAフォーマット ）をfastq-dumpの並列処理で素早くfastqに変換することができる。&lt;a href="https://github.com/inutanoOhta"&gt;Ohta&lt;/a&gt;さんが公開されている。&lt;/p&gt;
&lt;h2&gt;Fastqc&lt;/h2&gt;
&lt;p&gt;クオリティチェック。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ERR266335 ERR266337 ERR266338 ERR266347 ERR266349 ERR266351&lt;span class="o"&gt;)&lt;/span&gt;
mkdir fastqc
&lt;span class="k"&gt;for&lt;/span&gt; item in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; start quality check &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
mkdir fastqc/fastqc_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
fastqc -t &lt;span class="m"&gt;8&lt;/span&gt; -o fastqc/fastqc_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; sra-fastq/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.fastq -f fastq
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;sra-fastq/${item}.fastq&lt;/code&gt;がインプットファイル。
fastqcのオプションについて&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt; : スレッド数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-O&lt;/code&gt; : 解析結果の保存先のディレクトリを指定する。今回はfastqcというディレクトリを作ってそこに入れている。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; : インプットファイルのフォーマット。bam, samにも対応。.fastq.gzもfastqで指定する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行結果は下記のようになる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-31-at-19-58-17.png"&gt;&lt;/p&gt;
&lt;p&gt;fastqcディレクトリをのぞいてみる。fastqcのなかに&lt;code&gt;fastqc_${item}&lt;/code&gt;というディレクトリが自動生成されている。&lt;/p&gt;
&lt;p&gt;&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-31-at-20-05-02.png"&gt;&lt;/p&gt;
&lt;p&gt;fastqc_ERR266335の中をのぞいてみると。htmlファイルとzipファイルが生成されている。&lt;/p&gt;
&lt;p&gt;&lt;img alt="4" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-31-at-20-07-03.png"&gt;&lt;/p&gt;
&lt;p&gt;htmlファイルをブラウザで開くことができる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ open ERR266335_fastqc.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="5" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-31-at-20-09-37.png"&gt;&lt;/p&gt;
&lt;h3&gt;参照：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;次世代シークエンサーDRY解析教本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Multiqc&lt;/h2&gt;
&lt;p&gt;クオリティチェックの結果、ログファイルなどをまとめていい感じにレポートにしてくれるツール。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# After analysis, run Multiqc by commands below. You can create report.&lt;/span&gt;
$ multiqc .
$ open multiqc_report.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;multiqcの実行により、関連ファイルが下記のように自動生成される。&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-22-at-21-20-18.png"&gt;&lt;/p&gt;
&lt;p&gt;複数のリードのクオリティチェックの結果を同時に表示できる。&lt;/p&gt;
&lt;p&gt;&lt;img alt="7" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/screen-shot-2018-10-31-at-20-02-17.png"&gt;&lt;/p&gt;
&lt;h3&gt;参照：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://multiqc.info/"&gt;https://multiqc.info/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Trimmomatic&lt;/h2&gt;
&lt;p&gt;Java で書かれているアダプタートリミングツールである。 Trimmomatic はアダプターの除去のみならず、リードの末端から一定数の塩基をトリムしたりする、簡単なクオリティフィルタリングも行える。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ trimmomatic SE -phred33 ERR266335.fastq output_ERR266335.fastq ILLUMINACLIP:adapters.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;SE&lt;/code&gt;オプションでsingle-end readを指定している。pair-end readでは、オプションでPEとかき、paired outputとunpaired outputの出力先２つを指定する必要がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ILLUMINACLIP : 除去するアダプター配列をFASTA形式で与える。そのあとにミスマッチ許容数、palindrome clip threshold、simple clip thresholdの順に指定していく。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bi.biopapyrus.jp/rnaseq/qc/trimmomatic.html"&gt;https://bi.biopapyrus.jp/rnaseq/qc/trimmomatic.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.usadellab.org/cms/?page=trimmomatic"&gt;http://www.usadellab.org/cms/?page=trimmomatic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Single-end, Pair-endってなに？？&lt;/h2&gt;
&lt;p&gt;&lt;img alt="8" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/img_1051.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="9" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/kallisto_rnaseq_pipeline_figs/img_1050.jpg"&gt;&lt;/p&gt;
&lt;p&gt;シーケンスする機器によって、cDNAのかた方のみ読む(single-end read)方法と両端を読む(pair-end read)方法があります。トリミング、アラインメントにおいて、single-endなのか、pair-endなのかを指定しあげる必要があります。&lt;/p&gt;
&lt;h2&gt;Kallisto&lt;/h2&gt;
&lt;p&gt;RNA-Seqデータ、またはより一般的にはハイスループットシーケンシングリードを用いて転写産物の量を定量化するためのプログラムである。&lt;/p&gt;
&lt;p&gt;kallisto や Salmon を利用して定量したデータを使って、edgeR や DESeq2 などで発現量の群間比較を行うことができる。この際に、Bioconductor の tximport パッケージを利用することで、簡単に kallisto/Salmon の定量結果を edgeR/DESEq2 に渡すことができる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;time&lt;/span&gt; kallisto/kallisto index -i hsGRCh38_kallisto Homo_sapiens.GRCh38.rna.fa.gz
$ &lt;span class="nb"&gt;time&lt;/span&gt; kallisto/kallisto quant -i hsGRCh38_kallisto sra_fastqc/ERR266335.fastq -o ERR266335exp_kallisto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;kallisto quantにおいて、&lt;strong&gt;-iと-oのオプションは強制&lt;/strong&gt; である。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; :作成したインデックスの指定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt; :出力結果の保存先&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;デフォルトではペアエンドを読もうとする&lt;/strong&gt; ので、シングルリードの場合は&lt;code&gt;--single&lt;/code&gt;オプションをつける。シングルの時は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt; : Estimated standard deviation of fragment lengthシーケンシング用のライブラリー中のフラグメントの長さの偏差&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; : Estimated average fragment lengthシーケンシング用のライブラリー中のフラグメントの長さの平均&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のオプションを追加するのが必須となる。
(kallistoはsraファイルを扱えないので、pfastq-dumpでfastqに変換する必要があった。)
ERR266337 ERR266349 ERR266351 ERR266338 ERR266347も同様に&lt;code&gt;kallisto_quant.sh&lt;/code&gt;というシェルスクリプトを書き実行した。今回に限らず、時間がかかるかつ繰り返しの処理はシェルスクリプトを書くと良い（私もこれから練習します）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ERR266335 ERR266337 ERR266349 ERR266351 ERR266338 ERR266347&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; item in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; start mapping &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; with Kallisto
&lt;span class="nv"&gt;result_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;_exp_kallisto
kallisto/kallisto quant -i hsGRCh38_kallisto -o &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; --single -l &lt;span class="m"&gt;200&lt;/span&gt; -s &lt;span class="m"&gt;20&lt;/span&gt; -b &lt;span class="m"&gt;100&lt;/span&gt; sra_fastqc/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.fastq
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;abundance.tsv, target_id, length, eff_length, est_counts, tpm&lt;/p&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scilifelab.github.io/courses/rnaseq/labs/kallisto"&gt;https://scilifelab.github.io/courses/rnaseq/labs/kallisto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bi.biopapyrus.jp/rnaseq/mapping/kallisto/kallisto-single-end-reads.html"&gt;https://bi.biopapyrus.jp/rnaseq/mapping/kallisto/kallisto-single-end-reads.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kazumaxneo.hatenablog.com/entry/2018/07/14/180503"&gt;http://kazumaxneo.hatenablog.com/entry/2018/07/14/180503&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scilifelab.github.io/courses/rnaseq/labs/kallisto"&gt;https://scilifelab.github.io/courses/rnaseq/labs/kallisto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;FPKM, RPKM, TPMとは？&lt;/h2&gt;
&lt;p&gt;転写産物にマッピングされるリードの数は、サンプル中の総リード数（sequence depth）と転写産物の長さに影響されるので、RNA-Seq データから得られたリードカウントデータは、そのまま転写産物（遺伝子）発現量を表すわけではない。そのため、RNA-Seq データから得られるリードカウントデータを転写産物発現量として利用するには、総リード数や転写産物長で補正する必要がある。&lt;/p&gt;
&lt;p&gt;補正計算として、かつてはFPKM,RPKMが用いられてきたが、現在ではかわりにTPMが用いられている。TPMではサンプルごとの値の合計が同じになるので、比較する目的のためにはTPMの方が都合が良い。&lt;/p&gt;
&lt;h3&gt;FPKM/RPKM の計算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FPKM : Fragments Per Kilobase of exon per Killion reads Mapped&lt;/li&gt;
&lt;li&gt;RPKM : Reads Per Kilobase of exon per Million mapped reads
&lt;div class="math"&gt;$$
FPKM_i = Y_i \frac{10^3}{L_i}\frac{10^6}{N}=\frac{Y_i}{L_i N}10^9
$$&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(N\)&lt;/span&gt;: リファレンスにマッピングできた全リード数&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(Y_i\)&lt;/span&gt;: そのうち転写産物 &lt;span class="math"&gt;\(i\)&lt;/span&gt; の領域にマッピングされたリード数&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(L_i\)&lt;/span&gt;: 転写産物 &lt;span class="math"&gt;\(i\)&lt;/span&gt; の長さ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;TPMの計算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TPM : Transcripts Per Kilobase Million&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$
T_t = \frac{Y_t}{L_t}10^3
$$&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(Y_t\)&lt;/span&gt; : 転写産物 &lt;span class="math"&gt;\(t\)&lt;/span&gt; にマッピングされたリードカウント&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(L_t\)&lt;/span&gt;:  転写産物 &lt;span class="math"&gt;\(t\)&lt;/span&gt; の長さ&lt;/li&gt;
&lt;li&gt;&lt;span class="math"&gt;\(T_t\)&lt;/span&gt;: 転写産物 &lt;span class="math"&gt;\(t\)&lt;/span&gt; の 1,000 bp あたりのリード数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="math"&gt;$$
TPM_t = T_t \frac{10^6}{\sum_t T_t}
$$&lt;/div&gt;
&lt;p&gt;転写産物長による補正後の総リードカウントが 100 万となるように補正&lt;/p&gt;
&lt;h3&gt;参照&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bi.biopapyrus.jp/rnaseq/analysis/normalizaiton/fpkm.html"&gt;bipapyrus fpkm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bi.biopapyrus.jp/rnaseq/analysis/normalizaiton/tpm.html"&gt;bipapyrus tpm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Tximport, DESeq2を用いた解析はコメントをいただき、ただ今編集中となっております。少々お待ちください。&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Blog"></category><category term="Bioinformatics"></category></entry><entry><title>いまさらGoogle Colaboratory入門</title><link href="/previews/refs/heads/system/preview_test/blog/2018/10/google_colaboratory.html" rel="alternate"></link><published>2018-10-08T00:00:00+09:00</published><updated>2018-10-08T00:00:00+09:00</updated><author><name>宮崎</name></author><id>tag:None,2018-10-08:/previews/refs/heads/system/preview_test/blog/2018/10/google_colaboratory.html</id><summary type="html"></summary><content type="html">&lt;p&gt;いまさらGoogle Colaboratory触ってみた感じ、かなり便利なのでまとめておきます。動機は、研究室の環境とは別に、趣味のプログラミングの環境が欲しかったからです。&lt;/p&gt;
&lt;p&gt;(あと、PCがクソザコなので、クラウドがいいかなーと思いました)&lt;/p&gt;
&lt;h2&gt;対象&lt;/h2&gt;
&lt;p&gt;初学者に非常に向いています。pythonの勉強会や趣味レベルまで対応している神環境だと思います。&lt;/p&gt;
&lt;h2&gt;特徴&lt;/h2&gt;
&lt;p&gt;一言でいうと：コードの共有に向いています。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無料&lt;/li&gt;
&lt;li&gt;install不要&lt;/li&gt;
&lt;li&gt;ブラウザさえ使えればどこでもできる&lt;/li&gt;
&lt;li&gt;google driveとの連携が便利&lt;/li&gt;
&lt;li&gt;githubとの連携が簡単(コピーする、というボタンだけでuploadできる)&lt;/li&gt;
&lt;li&gt;しかもGPU使える(TPUも)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;p&gt;登録：&lt;a href="https://colab.research.google.com"&gt;https://colab.research.google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;標準では書いたノートブックはGoogle Driveに保存されるようになっています。&lt;/p&gt;
&lt;p&gt;&lt;img alt="スクリーンショット" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/google_colaboratory_figs/2018-10-08-12-18-55.png"&gt;&lt;/p&gt;
&lt;p&gt;右上の共有コマンドから、Google Documentと同じようにリンクを作ったり、他の人と共有できます。&lt;/p&gt;
&lt;p&gt;ファイルの選択から、Google DriveやGitHubと連携ができます(すごい)。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;全部クラウドでできるので良い。&lt;/li&gt;
&lt;li&gt;notebookがGoogle用にチューニングされていて更に使いやすい。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初学の時はpycharm使ってましたが、今から始めるなら間違いなくこれを使います。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codexa.net/how-to-use-google-colaboratory/#Google_Colab-4"&gt;https://www.codexa.net/how-to-use-google-colaboratory/#Google_Colab-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://karaage.hatenadiary.jp/entry/2018/03/21/073000"&gt;https://karaage.hatenadiary.jp/entry/2018/03/21/073000&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Python"></category></entry><entry><title>Particle filter</title><link href="/previews/refs/heads/system/preview_test/blog/2018/10/particle_filter.html" rel="alternate"></link><published>2018-10-05T00:00:00+09:00</published><updated>2018-10-05T00:00:00+09:00</updated><author><name>柳澤</name></author><id>tag:None,2018-10-05:/previews/refs/heads/system/preview_test/blog/2018/10/particle_filter.html</id><summary type="html"></summary><content type="html">&lt;p&gt;今回は&lt;strong&gt;パーティクルフィルター&lt;/strong&gt;の紹介をしたいと思います。
といってもやり始めたばっかなので、間違っていたらご指摘お願いします。&lt;/p&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;基本は以下の４つのサイクルを繰り返すだけです。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;リサンプリング  &lt;/li&gt;
&lt;li&gt;予測  &lt;/li&gt;
&lt;li&gt;観測  &lt;/li&gt;
&lt;li&gt;尤度計算 重みの更新  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;と言っても分かりにくかったんで、イメージで話すと&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;まず粒子（パーティクル）を全体に振りかけます  &lt;/li&gt;
&lt;li&gt;振りかけたなかで、あってそうな粒子だけ生き残ってもらい、それ以外は消えてもらいます。  &lt;/li&gt;
&lt;li&gt;あってそうなものは、尤度（確からしさ）を計算して其れに（おおよそ）従い新たに粒子を撒きなおします（ちょっとランダムウォークさせます）  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ってかんじで対象の動きを推定してくれます。&lt;/p&gt;
&lt;p&gt;なんでいきなりパーティクルフィルターの話をしたかというと、こいつは画像解析の分野ではノイズや予想外の動きによって影響を受けにくく、しっかりと標的のものを追ってくれるかなり有用な方法らしいからです。&lt;/p&gt;
&lt;p&gt;まあとりあえずやってみよう。ということでpython3+opencvを使いました。
Opencvをpythonで使えるようになったのは結構最近なので、なかなか良い本がないのですが、&lt;a href="http://labs.eecs.tottori-u.ac.jp/sd/Member/oyamada/OpenCV/html/py_tutorials/py_tutorials.html"&gt;公式のチュートリアル&lt;/a&gt;が結構役に立ちます。&lt;/p&gt;
&lt;p&gt;でも、やってたら結構間違いもあるので、注意してください。あと、有料ですがUdemyでもopencv+pythonの講座があるので、試してみても良いかもしれません。
先ほど紹介したコンピュータビジョン最先端ガイドも理論がわからない時便利です。&lt;/p&gt;
&lt;p&gt;うまくいった例はネットに大量にあるので、興味のある方は検索してみてください。&lt;/p&gt;
&lt;p&gt;ちなみにパーティクルフィルターでの一番の肝は、↑の4．尤度関数の設定の仕方です。
今回は色の尤度の他に、距離でも尤度を設定して（つまりある時点で散らばっている粒子の重心からの距離を考えるということ）それらをかけたものを最終の尤度のしました。
ブラウン運動ではなく、今回のように細胞の動きを追う場合では、次のフレームで動きそうなところの尤度を大きくすればもっと正確に動きを追いかけられるみたいです。難しい。。。&lt;/p&gt;
&lt;h2&gt;実装&lt;/h2&gt;
&lt;p&gt;以下、&lt;a href="https://www.udemy.com/pythonopencv/"&gt;『Udemy 【Pythonで学ぶ】OpenCVでの画像処理入門』&lt;/a&gt;のコードを参考にさせていただきました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cv2&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#プログレスバーの表示&lt;/span&gt;

&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="c1"&gt;#コマンドライン引数&lt;/span&gt;

&lt;span class="n"&gt;cap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoCapture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/movie/lps.avi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isOpened&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;

&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c1"&gt;#大きさを取得&lt;/span&gt;

&lt;span class="n"&gt;fourcc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoWriter_fourcc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mp4v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;output_dst&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VideoWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/output/test[&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s2"&gt;].m4v&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="n"&gt;fourcc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;#動画出力の設定&lt;/span&gt;

&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#乱数の初期化,毎回同じ乱数になる&lt;/span&gt;
&lt;span class="n"&gt;Np&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="c1"&gt;#粒子の数&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])),&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt; &lt;span class="c1"&gt;#目的の（追いかける）標的の座標0~512&lt;/span&gt;
&lt;span class="n"&gt;WD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#粒子のx座標&lt;/span&gt;
&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#粒子のy座標&lt;/span&gt;
&lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;#粒子の色の尤度&lt;/span&gt;
&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;#粒子の空間の尤度&lt;/span&gt;
&lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="c1"&gt;#粒子の尤度total&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#objの周りに撒く&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;artists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c1"&gt;#１枚読み込み&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="c1"&gt;#最後になったらループから抜ける&lt;/span&gt;

    &lt;span class="n"&gt;gx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;gy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#１フレーム前の粒子の重心&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;255.0&lt;/span&gt;&lt;span class="c1"&gt;#色の尤度&lt;/span&gt;
        &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;gy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WD&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;pnew_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;pxnew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pnew_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pynew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pnew_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;#リサンプリングした,ある程度ランダムウォーク&lt;/span&gt;
    &lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pxnew&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pxnew&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pynew&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pynew&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;#ランダムウォークで画面外に出る場合の処理&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#画像の中に粒子を描く&lt;/span&gt;
        &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cv2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/output/test_tiff/test&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.tif&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#tiffでも保存&lt;/span&gt;
    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;output_dst&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;こんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/10/images/particle_filter_figs/result.gif"&gt;&lt;/p&gt;
&lt;p&gt;最初は尤度を計算するとき以下のようにやってました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pxnew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pynew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これではxとyを別々に計算してしまっているので、微妙に結果がおかしい感じになってました。（点が四角っぽくなる）
確かにそれはそうか。ランダムに選ぶのは１回でいいはず。。。。&lt;/p&gt;
&lt;p&gt;こういうとき、適当にindexとかおいてやるとうまくいくんですね。
今回もpnew_indexをおいてしまうという感じでやってます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pnew_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;pxnew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;px&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pnew_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pynew&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pnew_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.co.jp/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%93%E3%82%B8%E3%83%A7%E3%83%B3%E6%9C%80%E5%85%88%E7%AB%AF%E3%82%AC%E3%82%A4%E3%83%891-CVIM%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-%E5%80%89%E7%88%AA-%E4%BA%AE/dp/4915851346"&gt;コンピュータビジョン最先端ガイド&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>【論文まとめ】Improving Breast Cancer Detection using Symmetry Information with Deep Learning</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/breast_cancer_detection.html" rel="alternate"></link><published>2018-09-25T00:00:00+09:00</published><updated>2018-09-25T00:00:00+09:00</updated><author><name>秋山</name></author><id>tag:None,2018-09-25:/previews/refs/heads/system/preview_test/blog/2018/09/breast_cancer_detection.html</id><summary type="html"></summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Improving Breast Cancer Detection using Symmetry Information with Deep Learning.
http://arxiv.org/abs/1808.08273&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;概要&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;放射線専門医がするようにマンモグラムの左右差を見て乳がんの判定をするCNNモデルを提案&lt;/li&gt;
&lt;li&gt;MICCAI (医療画像解析のトップ会議) 2018 採択&lt;/li&gt;
&lt;li&gt;1st authorは放射線科医&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;データセット&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;マンモグラフィー7k症例, 正常4k, 悪性腫瘍3k&lt;/li&gt;
&lt;li&gt;放射線専門医により腫瘍領域マスクをアノテーションした&lt;/li&gt;
&lt;li&gt;正常乳房は2年フォローして乳がん発症が無かったことを確認&lt;/li&gt;
&lt;li&gt;乳がん乳房は腫瘍領域を生検し悪性腫瘍であるとすべて診断されている&lt;/li&gt;
&lt;li&gt;非公開データ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;前処理&lt;/h2&gt;
&lt;h4&gt;Fig. 1&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Fig. 1" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/breast_cancer_detection_figs/2352f582-60c8-486b-a9ec-c247787510f7.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;従来法の画像特徴量を用いた手法で腫瘍候補点を計算 (Fig.1, 赤点)&lt;/li&gt;
&lt;li&gt;候補点を中心に300x300 pixels (6cm x 6cm) を切り出し (Fig.1, 緑枠)&lt;/li&gt;
&lt;li&gt;左右差を比較するために反対側の領域を切り出し (Fig.1, 青枠)&lt;/li&gt;
&lt;li&gt;切り出した領域に腫瘍のマスク領域が含まれていれば悪性腫瘍のラベルを割り当てる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;モデル&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;baseline model: 標準的なCNN (VGG like)&lt;/li&gt;
&lt;li&gt;symmetry model: 候補領域とその左右対称となる領域の2画像を入力とするCNN&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Fig.2&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Fig. 2" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/breast_cancer_detection_figs/67ac70b1-0afe-478b-b046-a2bacb1450f8.png"&gt;&lt;/p&gt;
&lt;h2&gt;結果&lt;/h2&gt;
&lt;p&gt;&lt;img alt="AUC table" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/breast_cancer_detection_figs/e382b9e382afe383aae383bce383b3e382b7e383a7e38383e38388-2018-09-25-17-28-58.png"&gt;&lt;/p&gt;
&lt;p&gt;AUCがわずかに改善 (有意差なし)&lt;/p&gt;
&lt;h4&gt;Fig.3a&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Fig. 3a" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/breast_cancer_detection_figs/6aaac880-7ac2-4425-8be3-4d78367088e2.png"&gt;&lt;/p&gt;
&lt;p&gt;FROC曲線(偽陽性率を横軸, 感受性を縦軸) で比較すると有意に提案手法がよかった&lt;/p&gt;
&lt;h2&gt;考察&lt;/h2&gt;
&lt;h4&gt;Fig. 4&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Fig. 4" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/breast_cancer_detection_figs/ef07a0c8-ed1e-4127-b747-f9103aa6095e.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a) baseline modelが正常と誤判定し, symmetry modelが正しく悪性腫瘍と判定した画像の例 (上下の画像が同じ患者の左右の乳房)&lt;/li&gt;
&lt;li&gt;b) baseline modelが悪性腫瘍と誤判定し, symmetry modelが正しく正常と判定した画像の例 (上下の画像が同じ患者の左右の乳房)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暗めの悪性腫瘍, 明るい正常像は誤判定しやすいがsymmetry modelは左右の比較によって正しく判定していることが読み取れる&lt;/p&gt;
&lt;h2&gt;読んだ感想&lt;/h2&gt;
&lt;p&gt;性能差がちょっと微妙だけど考察の納得感はある&lt;/p&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>クラスター分析</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/cluster_analysis.html" rel="alternate"></link><published>2018-09-24T00:00:00+09:00</published><updated>2018-09-24T00:00:00+09:00</updated><author><name>柳澤</name></author><id>tag:None,2018-09-24:/previews/refs/heads/system/preview_test/blog/2018/09/cluster_analysis.html</id><summary type="html"></summary><content type="html">&lt;p&gt;現在、クラスター分析の勉強をしています。
勉強し始めて数時間ですが、少しまとめてみたいと思います。&lt;/p&gt;
&lt;h2&gt;クラスター分析とは&lt;/h2&gt;
&lt;p&gt;簡単に言うと、クラスター分析とは異なる性質のものが混ざり合った集団から互いに似た性質を持つものを集める方法のことです。
あらかじめ分類の基準が決まっておらず分類のための外的基準や評価が与えられていない「教師無しの分類法」です。&lt;/p&gt;
&lt;h3&gt;グループ分けの対象&lt;/h3&gt;
&lt;p&gt;サンプルを分類するのか、変数を分類するのか&lt;/p&gt;
&lt;h3&gt;分類の形式（種類、生成）&lt;/h3&gt;
&lt;p&gt;階層的方法か非階層的方法か&lt;/p&gt;
&lt;h3&gt;分類に用いる対象間の距離（類似度）&lt;/h3&gt;
&lt;p&gt;ユークリッド距離、マハラノビス距離、コサイン距離 ・・・&lt;/p&gt;
&lt;h3&gt;クラスターの合併方法（クラスター間の距離の測定方法）&lt;/h3&gt;
&lt;p&gt;ウォード法、群平均法、最短距離法、最長距離法・・・&lt;/p&gt;
&lt;p&gt;クラスター分類するにはここら辺を決めなくてはいけません。
特に後ろ二つが馴染みがなく難しい。。。&lt;/p&gt;
&lt;h2&gt;デンドログラム&lt;/h2&gt;
&lt;p&gt;階層的クラスタリングを可視化する代表的な方法にデンドログラムがあります。Scikit-learnのirisデータセットで試しにやってみます。調べたところ、scikit-learnでデンドログラム描写はできないみたいだったので、Scipyからimportして使います。
（Scipyのクラスタリングアルゴリズムはscikit-learnのアルゴリズムを若干違うみたいです。）
上で書いた後ろ２つを以下で指定しています。&lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.cluster.hierarchy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dendrogram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;iris&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_iris&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# data load&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;feature_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# ウォード法 &amp;amp; ユークリッド距離&lt;/span&gt;
&lt;span class="n"&gt;linkage_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linkage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ward&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metric&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;euclidean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;dn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dendrogram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linkage_result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;iris&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                              &lt;span class="n"&gt;above_threshold_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 各ラベルに色を割り当て&lt;/span&gt;
&lt;span class="n"&gt;label_colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;setosa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;versicolor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;m&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;virginica&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xlbls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xmajorticklabels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lbl&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xlbls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lbl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label_colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lbl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_text&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dendrogram of Iris dataset &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Distance&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;結果&lt;/h3&gt;
&lt;p&gt;縦軸がクラスタ間距離です。横軸のラベルでは、setosaをシアン、versicolorをマゼンタ、virginicaを黄色としました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/cluster_analysis_figs/dendrogram.png"&gt;&lt;/p&gt;
&lt;p&gt;setosaは綺麗に分かれますが、versicolorとvirginicaはうまく分けられていないのがわかります。なるほど。&lt;/p&gt;
&lt;p&gt;イメージング画像でクラスタリングしたいなあとか思っているんですが、
なかなかサンプル数とか特徴量の問題で難しそう。&lt;/p&gt;
&lt;p&gt;うまく特徴がつかめるような解析がしたいなあ。&lt;/p&gt;
&lt;p&gt;頑張って勉強してみます。
何かいいサイトや参考資料があったら教えてください。&lt;/p&gt;
&lt;h2&gt;参考資料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.kamishima.net/jp/clustering/"&gt;http://www.kamishima.net/jp/clustering/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://datanongrata.com/2019/04/27/67/"&gt;http://datanongrata.com/2019/04/27/67/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/14802048/scipy-dendrogram-leaf-label-colours"&gt;https://stackoverflow.com/questions/14802048/scipy-dendrogram-leaf-label-colours&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pythonではじめる機械学習 オライリー社&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>寿司打タイピング自動化</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/sushi_typing.html" rel="alternate"></link><published>2018-09-20T00:00:00+09:00</published><updated>2018-09-20T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2018-09-20:/previews/refs/heads/system/preview_test/blog/2018/09/sushi_typing.html</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;span class="videobox"&gt;
                &lt;iframe width="640" height="390"
                    src='https://www.youtube.com/embed/SqOO9I1tFjk'
                    frameborder='0' webkitAllowFullScreen mozallowfullscreen
                    allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;寿司打の自動化についてです。上の動画のようになりました。寿司打は結構昔からあるタイピング練習サイトです。寿司打は&lt;a href="http://typing.sakura.ne.jp/sushida/"&gt;こちら&lt;/a&gt;です。
1万円コースで1万円超えない人はタイピング遅いので特訓しましょう。&lt;/p&gt;
&lt;p&gt;自動化の流れとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;スクリーンショットを取る(PIL)&lt;/li&gt;
&lt;li&gt;OCRで文字認識をする(pyocr)&lt;/li&gt;
&lt;li&gt;キーボード入力(pyautogui)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;です。
ご認識を防ぐため、調整用のところでできるだけ正確にローマ字部分が入るようにスクリーンショットの座標をあわせないといけません。&lt;/p&gt;
&lt;p&gt;今回はMBPをつかって一万円コース63120 円でした。OCRの部分が律速になっていそうなので、リソースかアルゴリズムでここを高速化するとプラトーになるのではと考えています。
一晩中自動でゲームを繰り返してスコアをメモし続けるように書き直したので、少し冗長なコードになっています。
ところで、ランキングをチェックすると、抜かれていたので、だれかリベンジしてください。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/yyoshiaki/a9a2eea1105a654e6b9beaaf2b854871"&gt;https://gist.github.com/yyoshiaki/a9a2eea1105a654e6b9beaaf2b854871&lt;/a&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="Python"></category></entry><entry><title>超高速次元圧縮アルゴリズムUMAP</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/umap.html" rel="alternate"></link><published>2018-09-15T00:00:00+09:00</published><updated>2018-09-15T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2018-09-15:/previews/refs/heads/system/preview_test/blog/2018/09/umap.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;tSNEとUMAP&lt;/h2&gt;
&lt;p&gt;世間では、高性能な次元圧縮アルゴリズムとしてtSNEがよく使われています。 tSNEは便利ですが、少し遅いです。（パラメーターも意外に面倒。 tSNEのパラメータについては以下のリンク参照）&lt;/p&gt;
&lt;p&gt;&lt;a href="https://deepage.net/machine_learning/2017/03/08/tsne.html"&gt;https://deepage.net/machine_learning/2017/03/08/tsne.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;そこで今回紹介するのは&lt;strong&gt;UMAP&lt;/strong&gt;。 arxivで今月publishされたばかりのアルゴリズムです(記事執筆時 2018年2月時点)。 試しにMNIST(手書き数字画像。28*28=764次元)70000枚の次元圧縮をしてみました。&lt;/p&gt;
&lt;p&gt;tSNEではちょうど1時間30分でしたが、UMAPではたったの1分でした。詳細は以下のリンクより。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lmcinnes/umap"&gt;https://github.com/lmcinnes/umap&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;コード&lt;/h2&gt;
&lt;p&gt;インストールは &lt;code&gt;pip install umap&lt;/code&gt;でok。&lt;/p&gt;
&lt;p&gt;こちらが今回のソースコード。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_mldata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;MNIST&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;umap&lt;/span&gt;
&lt;span class="n"&gt;embedding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;umap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UMAP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;UMAP&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;umap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.manifold&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TSNE&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TSNE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_components&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tsne_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tsne_result&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;tsne_result&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;tSNE&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;tsne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;結果&lt;/h2&gt;
&lt;h3&gt;tSNE&lt;/h3&gt;
&lt;p&gt;&lt;img alt="tsne" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/umap_figs/tsne.png"&gt;&lt;/p&gt;
&lt;h3&gt;UMAP&lt;/h3&gt;
&lt;p&gt;&lt;img alt="umap" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/umap_figs/umap.png"&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>論文抄読で便利なサイト</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/article_reading.html" rel="alternate"></link><published>2018-09-09T23:00:00+09:00</published><updated>2018-09-09T23:00:00+09:00</updated><author><name>柳澤</name></author><id>tag:None,2018-09-09:/previews/refs/heads/system/preview_test/blog/2018/09/article_reading.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;論文抄読で便利なサイト&lt;/h2&gt;
&lt;p&gt;英語論文を読むのにものすごいハードルがある人（＝僕）や英語見るだけでなんとなく気持ちがのらない人（＝僕）でも、論文を読まなければみたいな状況は訪れます。結局大事なことは英語で書いてあるし今後嫌でも読まなければいけないので、なんとか楽して読めないものか…ということで、いつも論文を読む時にどんなサイトを使っているかを一度書き起こしてみました。&lt;br&gt;
とりあえずハードルを下げることメインなので、「普通に読めるやろ」みたいな人はスルーでお願いします笑。5年の免疫内科の実習で論文の効率的な読み方を習って、もっと早く知ってればなあと思ったので、もし先生に「〇〇に関する論文読んできてねー」みたいなことを言われた時とかに参考にしてみてください。 &lt;a href="http://www.imed3.med.osaka-u.ac.jp/education/education01.html"&gt;大阪大学免疫内科のホームページ&lt;/a&gt;と被っていることも多いです。こちらも是非見てみてください。&lt;/p&gt;
&lt;h2&gt;論文を（ざっと）読む&lt;/h2&gt;
&lt;p&gt;とりあえずわからない単語が多すぎて全然読み進められない、いちいち単語を調べているとテンポが悪く全然頭に入らないみたいな時は、是非ライフサイエンス辞書の&lt;a href="https://lsd-project.jp/ja/service/etoj_v/index.html"&gt;EtoJ Vocabulary&lt;/a&gt;を使ってみてください。
論文の英語の文章を丸ごと一本コピー&amp;amp;ペーストして青くなっている単語をクリックすると下にその単語の日本語訳がでます。オプション設定で「ライフサイエンス辞書 + ejdic」にして使うことが多いです。論文一本読むか迷うような場合はとりあえずアブストだけe to jに入れて読むと数分でなんとなく何が書いてあるのかわかるのでおすすめ。なんか変に訳されていることもおおいので、そういう時はガシガシググりまくってます。ググると日本語ページなんかもあったりして大抵なんとかなります。よく英語の構造がわかんない時は&lt;a href="https://translate.google.co.jp/?hl=ja"&gt;google 翻訳&lt;/a&gt;に文章ごと突っ込んで雰囲気を理解します。略語に関しては、正式名称が論文のどこにも見当たらない時は&lt;a href="http://allie.dbcls.jp/ja"&gt;略語検索Allie&lt;/a&gt;っていうサイトを使います（かなり便利）。成句がわからない時もググるのですが、アルク社の英辞郎の方がweblioよりうまくいく気がします。あと免内のHPにも書いてありますが&lt;a href="https://www.ncbi.nlm.nih.gov"&gt;NCBI&lt;/a&gt;では遺伝子とかタンパクのデータを調べるとバックグラウンドが理解でき、今読んでいる論文がどんなことをしたいかがよくわかることが多いです。（余談ですが予算が減らされたらしくNCBIのサイトのアップデートできないみたいな話を聞いたんですがどうなったんだろう)。&lt;br&gt;
個人的にはアブストを読んだ後、イントロを読もうとして途中で心が折れることが多いのでイントロは飛ばしてResultsに行くようにしてます。とりあえずResultsの題名だけ読んでFigureをみて全体像を掴む→よくわからんところがあったら本文を見ていくって感じにすると意外と早く大体の内容が把握できます。&lt;/p&gt;
&lt;h2&gt;論文と（とりあえず）身近になる&lt;/h2&gt;
&lt;p&gt;有名な雑誌（Impact Factorの高い雑誌）に関しては免内のサイトをみてください。 日本語でいいから論文に触れる。を目標にして行きたい。 Nature とNEJMは題名とアブストを日本語で読める。興味のある記事が一目でわかります。Natureには日本語のご利用ガイドまで。ありがたいです。 AASJはほぼ毎日日本語で面白い論文を解説してくれています。&lt;a href="http://aasj.jp/watch.html"&gt;AASJ&lt;/a&gt;おすすめ あと&lt;a href="http://first.lifesciencedb.jp"&gt;ライフサイエンス新着論文レビュー&lt;/a&gt;, &lt;a href="http://leading.lifesciencedb.jp"&gt;領域融合レビュー&lt;/a&gt;もお世話になってます。論文執筆者がその論文について解説してくれていたり、その領域について概説してくれています。（DBCLSのサービスの一つなのですが、他にも前述のAllie含め色々なサービスがあります。うまく使いこなせるようになりたい。使いこなしてるって人は教えてください。サイトは→ &lt;a href="http://dbcls.rois.ac.jp/services"&gt;DBCLS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;（有名どころの）論文を探す&lt;/h2&gt;
&lt;p&gt;せっかく読むんならたくさん引用されているすごい論文を読んだ方がかコスパがいい気がする！ということでその領域の代表的な論文を読みたいって時、結構pubmedでは検索しにくかったりします。キーワード入れたけどこれはどれくらいすごい論文なのかわからないという時はISI web of knowledgeを使ってます。ある領域で被引用回数の多い順に論文を見ることができたりいろいろ便利な機能があります。おおきな括りで調べる時（autophagyとかsepsisとか）は最近3年くらいで、何個か検索ワードを並べて検索する時には最近10年分くらいで検索するとうまく行くことが多いです。被引用回数の多い順に検索結果を並べかえて上位のものからいくつかアブストを読んでみて、面白いなあと思ったものの論文を実際に読むっていう感じにしてます。&lt;br&gt;
論文がどこにあるかわからなければ下の方に書いてあるpubmed idをコピーしてpubmedの検索のところにその番号を直接ペーストすると、お目当の論文が出てきます。阪大のwifiに繋がないと見れないですが、本当に役立ちます。あとはやっぱりgoogle scholarも使うことが多いです。&lt;/p&gt;</content><category term="Blog"></category><category term="論文関連"></category></entry><entry><title>組み込みでDeep Learningにつかえるハードについて</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/hardware_for_deeplearning.html" rel="alternate"></link><published>2018-09-09T00:00:00+09:00</published><updated>2018-09-09T00:00:00+09:00</updated><author><name>安水</name></author><id>tag:None,2018-09-09:/previews/refs/heads/system/preview_test/blog/2018/09/hardware_for_deeplearning.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;Rasberry pi&lt;/h2&gt;
&lt;p&gt;シングルボードコンピュータ。手のひらサイズで値段も５０００円とリーズナブルだが一人前のコンピューター。Linuxの練習にもうってつけ。クアッドコアだが機械学習としてはすこし非力。GPUもつかえない。電池で動く。何台もつなげてクラスター化する強者も。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.cenav.org/raspi2/"&gt;計算工学ナビ : RaspberryPiでスパコンを作ろう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kazunori279/items/bb58f0b3095f3c65b2a1"&gt;Qiita : RasPiとディープラーニングで我が家のトイレ問題を解決する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;スマホ&lt;/h2&gt;
&lt;p&gt;やはり今の時代にハードとしてスマホに注目しないわけにはいかない。Tensorflowならスマホ組み込みも。まだ開発版のみだが、アンドロイドもiosもどちらも遊べるらしい。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sejuku.net/blog/55188"&gt;侍エンジニア塾 : 【TensorFlow】スマホで動かせるLiteとは？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GPU&lt;/h2&gt;
&lt;p&gt;おなじみ。Deep Learning等は大量の行列演算を必要とする。GPUはもともとグラフィックスにフォーカスして作られていた演算回路だが、グラフィックス自体大量の行列演算だったため、Deep Learningに転用することで超高速な学習が可能になった。Deep learningやるなら必需品。ただ、これ自体を持ち出すのは困難。市販最速のNVIDIA GTX 1080 tiで１０万円くらい。&lt;/p&gt;
&lt;h2&gt;FPGA&lt;/h2&gt;
&lt;p&gt;Field Programmable Gate Arrayの略。デジタル回路を自分で設計できる集積回路。集積回路といえば単一タスクを低電力低コストで高速な演算が可能だが、専門家しか作れなかったし、そもそも作ること自体が大変だった。FPGAは集積回路の設計をソフトで行うことで、柔軟に専門設計が可能になった。ちっちゃいので組み込みにも向いている。最近Scienceにのって話題になったGohst CytometryもFPGA使ってるそうな。（阪大、東大、理研AIPのコラボ。下で書くjetson化も視野に入れているらしい。）最近では各社がFPGAに取り組みだしている。Tensorflowも動かせるらしい。ただしやはり専門外ではとっつきにくい。ピンキリだがやすいので１万５千円くらい。論理回路設計がもとめられるのでぶっちゃけよくわからん。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kazunori279/items/a9e97a4463cab7dda8b9"&gt;Qiita : そろそろプログラマーもFPGAを触ってみよう！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://science.sciencemag.org/content/360/6394/1246.full"&gt;Science : Gohst Cytometry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;jetson&lt;/h2&gt;
&lt;p&gt;NVIDIA組み込みモジュール。安価かつ高速でポータブルなGPUが使える。NVIDIA製ということで、Tensorflowも使えるのが嬉しい。値段は開発キットが599ドル（1ドル＝114円換算で、6万8286円）で、製品に組み込んで出荷可能なProduction Moduleは1000個ロット時で399ドル（同、4万5486円）。256 CUDAコア（GTX 1080 tiで3584 cuda cores）なので、やはり学習済みモデルの運用がメインと思われる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ababa893/items/57b43e788d684c380866"&gt;Qiita : NVIDIA Jetson TX2でTensorFlowによる人体姿勢推定プログラムを動かせるようになるまで&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ディープラーニングに限らず、なにか作ったよとか、こんなの面白いよというのがあれば教えてください。最近ラズパイを持て余して困っています。&lt;/p&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>Parameter Tuning</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/parameter_tuning.html" rel="alternate"></link><published>2018-09-09T00:00:00+09:00</published><updated>2018-09-09T00:00:00+09:00</updated><author><name>佐藤</name></author><id>tag:None,2018-09-09:/previews/refs/heads/system/preview_test/blog/2018/09/parameter_tuning.html</id><summary type="html"></summary><content type="html">&lt;p&gt;機械学習を行う際に大事なのがパラメーターの調整です。
今まで適当にデフォルトの値でそのままやったりGridearchで探したりしていましたが、結構時間かかるので他の有効な方法を探して、手元で実際に動かして見ました。以下の資料がわかりやすかったです。(図もこちらのものを引用しました)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://neupy.com/2016/12/17/hyperparameter_optimization_for_neural_networks.html"&gt;http://neupy.com/2016/12/17/hyperparameter_optimization_for_neural_networks.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Bayesian Optimization&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Bayesian Optimization&lt;/strong&gt; はパラメーターを&lt;span class="math"&gt;\(\boldsymbol{x}\)&lt;/span&gt;、評価値(精度とか)を&lt;span class="math"&gt;\(y\)&lt;/span&gt;として
&lt;/p&gt;
&lt;div class="math"&gt;$$
y=f(\boldsymbol{x})
$$&lt;/div&gt;
&lt;p&gt;
という関数を指定します(ブラックボックス関数)。中身は良くわかりませんが、この関数を最適化するパラメーターを見つけたいと思います。そこでBaysian Optimizationはこの関数が&lt;a href="http://www.yasuhisay.info/entry/20091011/1255189429"&gt;ガウス過程&lt;/a&gt;に従うと仮定します。&lt;/p&gt;
&lt;p&gt;下の図ではパラメーターの組み合わせをそれぞれ2,3個とって来て、その評価値を計算して結果をプロットしたグラフです。青い曲線はこの二点から導かれる関数の事後分布で、青い部分はこの分布の95%信頼区間です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/gaussian-process-example.png"&gt;&lt;/p&gt;
&lt;p&gt;このグラフを見ると、観測点から離れた部分は信頼区間の幅が広い(=&lt;span class="math"&gt;\(\sigma\)&lt;/span&gt;が大きい)ことがわかります。&lt;/p&gt;
&lt;h3&gt;獲得関数(Acquisition Function)&lt;/h3&gt;
&lt;p&gt;獲得関数は、次にどこの点を観測するか決める関数です。これにはいろいろな関数がありますが、よく使われるのが  &lt;/p&gt;
&lt;div class="math"&gt;$$
g_\max (x)=\max(0,\ y_{\text{highest expected}}-y_{\max})
$$&lt;/div&gt;
&lt;p&gt;という &lt;strong&gt;Expected Improvement&lt;/strong&gt; [Mockus,1978]であったり、  &lt;/p&gt;
&lt;div class="math"&gt;$$
g_\max (x)=\mu(x)+\sigma(x)
$$&lt;/div&gt;
&lt;p&gt;のような &lt;strong&gt;Mutual Information&lt;/strong&gt; [Contal+2014]がよく使われます。後者は特に直感的にわかりやすいと思うのですが、私たちも次にどの点を選ぶかというときに&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;観測した点から推測して精度が良さそうな点を選びたい(&lt;span class="math"&gt;\(\mu\)&lt;/span&gt;が大きい)  &lt;/li&gt;
&lt;li&gt;まだ観測していない場所から選びたい( &lt;span class="math"&gt;\(\sigma\)&lt;/span&gt; が大きい)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということを考えて選びそうなものです。よくできてますね。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/expected-improvement-example.png"&gt;&lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;p&gt;実装には&lt;a href="https://github.com/fmfn/BayesianOptimization"&gt;Bayesian Optimization&lt;/a&gt;を使いました。&lt;/p&gt;
&lt;p&gt;使用するデータはkaggleの&lt;a href="https://www.kaggle.com/c/otto-group-product-classification-challenge#evaluation"&gt;Otto Group Product Classification Challenge&lt;/a&gt;のデータで評価指標はmulti-class loglossです。定番のXGBoostのパラメータを最適化します。installはpipで入ります：&lt;code&gt;pip install bayesian-optimization&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;xgboost&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;xgb&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LabelEncoder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bayes_opt&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BayesianOptimization&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;調整したいパラメーターを引数にとる評価関数の指定、クロスバリデーション。bayesian-optimizationには評価関数の最大化のライブラリしかないので、小さい値ほどいいloglossは返り値に-1をかけます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;xgb_evaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_child_weight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colsample_bytree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;max_depth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_child_weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min_child_weight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cosample_bytree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colsample_bytree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max_depth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subsample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subsample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gamma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gamma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;cv_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xgtrain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_boost_round&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_rounds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nfold&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;callbacks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;early_stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cv_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test-mlogloss-mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いよいよ最適化！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;xgtrain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prepare_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;num_rounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
    &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
    &lt;span class="n"&gt;num_iter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
    &lt;span class="n"&gt;init_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;silent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;eval_metric&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mlogloss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;verbose_eval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;seed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;&amp;#39;num_class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;xgbBO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BayesianOptimization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xgb_evaluate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_child_weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                  &lt;span class="s1"&gt;&amp;#39;colsample_bytree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                  &lt;span class="s1"&gt;&amp;#39;max_depth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                  &lt;span class="s1"&gt;&amp;#39;subsample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                  &lt;span class="s1"&gt;&amp;#39;gamma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                  &lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),})&lt;/span&gt;

    &lt;span class="n"&gt;xgbBO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;maximize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;init_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_iter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;結果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/result.png"&gt;
&lt;img alt="4" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/result2.png"&gt;&lt;/p&gt;
&lt;p&gt;だいたい15回くらいの試行でloglossが0.46136まで下がりました。やってから気づいたんですが、max_depthとかって整数の値しかとらないですね、、、&lt;/p&gt;
&lt;p&gt;ただし、ベイズ最適化には弱点もいくつかあって、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カテゴリー変数の場合にうまくいかない。  &lt;/li&gt;
&lt;li&gt;偶然性に左右されたり、再現性が取れないことがある  &lt;/li&gt;
&lt;li&gt;パラメータが増えてきたら時間かかる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;みたいなことになるらしいです。&lt;/p&gt;
&lt;h2&gt;Tree-structured Parzen Estimator(TPE)&lt;/h2&gt;
&lt;p&gt;このような弱点を修正したのがTPEという最適化手法です。ベイズとコンセプトは似ていますが、手法は全く異なります。一般的な方法として、まずRandom Searchを用いていくつか点をとってきます。プロットすると下の図のようになりました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/tpe-observation-groups.png"&gt;&lt;/p&gt;
&lt;p&gt;次に精度が良かったもの(図では上位20%)とそうでなかったものに分けます。この2群の尤度関数を求めます。あまり尤度と言っても馴染みのない人が多いと思いますが、サンプリングされたデータは様々な確率分布のうち、どの分布から得られたものとするのが一番尤もらしいかを決めようとするものです。これにより2群の確率分布が出来上がります。&lt;/p&gt;
&lt;p&gt;TPEでもExpected Improvement関数の下のように定義します。精度良かったものを&lt;span class="math"&gt;\(l\)&lt;/span&gt;,そうではなかったものを&lt;span class="math"&gt;\(g\)&lt;/span&gt;として、&lt;/p&gt;
&lt;div class="math"&gt;$$
EI(x)=\frac{l(x)}{g(x)}
$$&lt;/div&gt;
&lt;p&gt;これをそれぞれの観測点に対して適用し、最もEIの値が大きかった場所が次の観測点になります。&lt;/p&gt;
&lt;p&gt;&lt;img alt="6" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/tpe-sampled-candidates.png"&gt;
&lt;img alt="7" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/tpe-expected-improvement.png"&gt;&lt;/p&gt;
&lt;h3&gt;実装&lt;/h3&gt;
&lt;p&gt;こっちも実装してみます。Pythonではhyperoptというライブラリがあってpipで入ります：&lt;code&gt;pip install hyperopt&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hyperopt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hyperopt&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Trials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最適化するパラメータはbayesian optimizationと同じやつにしてみました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;hyperopt_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_child_weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min_child_weight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="s1"&gt;&amp;#39;colsample_bytree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colsample_bytree&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="s1"&gt;&amp;#39;max_depth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max_depth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                       &lt;span class="s1"&gt;&amp;#39;subsample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;subsample&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="s1"&gt;&amp;#39;gamma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gamma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最適化する関数の指定&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;objective&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;classifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xgb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XGBClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stratifiedkfold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StratifiedKFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_splits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cross_val_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stratifiedkfold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;scoring&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;neg_log_loss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;max_evals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Trials&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# 実行結果を格納するインスタンス&lt;/span&gt;

&lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;hyperopt_parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;algo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suggest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;max_evals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;max_evals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;trials&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;verbose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;結果&lt;/h3&gt;
&lt;p&gt;&lt;img alt="8" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/loss.jpg"&gt;
&lt;img alt="9" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/parameter_tuning_figs/best_param.png"&gt;&lt;/p&gt;
&lt;p&gt;logloss最小値は0.4749でした。あれ、bayesian optimizaationより悪い、、、bayesianではmax_depthを整数に限定しなかったからかも、、
でも自分で手動でやった時は0.6とかだったんで、パラメーターチューニングの時にはこれからこれ使っていこうと思います。あとこのxgboost動かすのに8コアCPU使ってそれぞれ半日くらい回しました。GPU使ってたらもうちょい早かったと思うのですが、きちんとbuildとmakeしてもうまくいきませんでした。また挑戦します。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Blog"></category><category term="Machine Learning"></category></entry><entry><title>食べログのWebScraping</title><link href="/previews/refs/heads/system/preview_test/blog/2018/09/webscraping.html" rel="alternate"></link><published>2018-09-09T00:00:00+09:00</published><updated>2018-09-09T00:00:00+09:00</updated><author><name>平岡</name></author><id>tag:None,2018-09-09:/previews/refs/heads/system/preview_test/blog/2018/09/webscraping.html</id><summary type="html"></summary><content type="html">&lt;p&gt;安水さんに教えてもらい、先週からpythonで遊んでいます。食べログをweb scrapingして大阪市のラーメン屋さんの評価点数とコメント数の相関係数と離散分布図を作成しました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/webscraping_figs/1.jpg"&gt;
&lt;img alt="2" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/webscraping_figs/2.jpg"&gt;
&lt;img alt="3" src="/previews/refs/heads/system/preview_test/blog/2018/09/images/webscraping_figs/3.jpg"&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="Python"></category></entry></feed>